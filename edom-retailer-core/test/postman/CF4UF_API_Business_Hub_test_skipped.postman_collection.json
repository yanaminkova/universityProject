{
    "info": {
        "_postman_id": "ef554fd5-c91a-4723-91bb-f8b0611a5029",
        "name": "API Business Hub #1981",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "JWT",
            "item": [
                {
                    "name": "{{jwtProtocol}}://{{uaa-domain}}/oauth/token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "",
                                    "var jsonData = JSON.parse(responseBody);",
                                    "if(jsonData && jsonData.access_token){",
                                    "    postman.setEnvironmentVariable(\"jwt\", jsonData.access_token);",
                                    "}",
                                    "pm.test(\"Successful POST request\", function () {",
                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [""],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "X-CorrelationID",
                                "value": "",
                                "disabled": true
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "response_type",
                                    "value": "token",
                                    "type": "text"
                                },
                                {
                                    "key": "grant_type",
                                    "value": "client_credentials",
                                    "type": "text"
                                },
                                {
                                    "key": "client_id",
                                    "value": "{{uaa_client_id}}",
                                    "type": "text"
                                },
                                {
                                    "key": "client_secret",
                                    "value": "{{uaa_client_secret}}",
                                    "type": "text"
                                },
                                {
                                    "key": "scope",
                                    "value": "",
                                    "type": "text"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{jwtProtocol}}://{{uaa-domain}}/oauth/token",
                            "protocol": "{{jwtProtocol}}",
                            "host": ["{{uaa-domain}}"],
                            "path": ["oauth", "token"]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Customizing and Configuration",
            "item": [
                {
                    "name": "Currency Codes",
                    "item": [
                        {
                            "name": "READ Currency Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Currency Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/CurrencyCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "CurrencyCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Currency Code",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Currency Codes. Successful POST request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let currencyCodeEUR = 'EUR'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"currencyCodeEUR\", currencyCodeEUR);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"currencyCodeEUR\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"EUR\",\r\n    \"name\": \"Euro\",\r\n    \"descr\": null,\r\n    \"changeType\": \"n\",\r\n    \"minorUnit\": 2\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CurrencyCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "CurrencyCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Country Codes",
                    "item": [
                        {
                            "name": "READ Country Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Country Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/CountryCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "CountryCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Country Code",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Country Codes. Successful POST request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let countryCodeDE = 'DE'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"countryCodeDE\", countryCodeDE);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"countryCodeDE\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Germany\",\r\n    \"changeType\": \"n\",\r\n    \"code\": \"DE\",\r\n    \"currency\": {\r\n        \"code\": \"{{currencyCodeEUR}}\"\r\n    }\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CountryCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "CountryCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Language Codes",
                    "item": [
                        {
                            "name": "READ Language Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Languiage Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/LanguageCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "LanguageCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Language Code - English",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Language Code - English (en). Successful POST request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let languageCodeEN = 'en'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"languageCodeEN\", languageCodeEN);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"languageCodeEN\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"English\",\r\n    \"descr\": null,\r\n    \"code\": \"en\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/LanguageCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "LanguageCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Language Code - German",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Language Code - German (de). Successful POST request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let languageCodeDE = 'de'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"languageCodeDE\", languageCodeDE);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"languageCodeDE\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"German\",\r\n    \"descr\": null,\r\n    \"code\": \"de\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/LanguageCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "LanguageCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Company Codes",
                    "item": [
                        {
                            "name": "READ Company Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Company Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/CompanyCode",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "CompanyCode"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Company Code",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Company Code - Supply Company Ltd. Successful POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "\r",
                                            "if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"companyCodeID\", jsonData.id);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "let companyVatRegistrationIdRand = Math.floor(100000 + Math.random() * 1000000000);\r",
                                            "pm.collectionVariables.set(\"companyVatRegistrationIdRand\", \"RND\" + companyVatRegistrationIdRand);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"displayId\": \"C001\",\r\n    \"name\": \"Supply Company Ltd.\",\r\n    \"isMainForCompany\": true,\r\n    \"country\": {\r\n        \"code\": \"{{countryCodeDE}}\"\r\n    },\r\n    \"currency\": {\r\n        \"code\": \"{{currencyCodeEUR}}\"\r\n    },\r\n    \"language\": {\r\n        \"code\": \"{{languageCodeEN}}\"\r\n    },\r\n    \"vatRegistrationId\": \"{{companyVatRegistrationIdRand}}\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CompanyCode",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "CompanyCode"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Sales Cancellation Status Codes",
                    "item": [
                        {
                            "name": "READ Sales Cancellation Status Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Sales Cancellation Status Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesCancellationStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesCancellationStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Sales Cancellation Reason Codes",
                    "item": [
                        {
                            "name": "READ Sales Cancellation Reason Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Sales Cancellation Reason Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [""],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesCancellationReasonCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesCancellationReasonCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Sales Processing Status Codes",
                    "item": [
                        {
                            "name": "CREATE Sales Processing Status Code 00",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Processing Status Code - Initial (00). Successful POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let processingStatusCode00 = '00'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"processingStatusCode00\", processingStatusCode00);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"processingStatusCode00\", jsonData.code);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"00\",\r\n    \"name\": \"Initial\",\r\n    \"descr\": \"Initial\",\r\n    \"isDefault\":true\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 01",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Processing Status Code - Open (01). Successful POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let processingStatusCode01 = '01'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"processingStatusCode01\", processingStatusCode01);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"processingStatusCode01\", jsonData.code);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"01\",\r\n    \"name\": \"Open\",\r\n    \"descr\": \"Open\",\r\n    \"isDefault\": false\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 02",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Processing Status Code - In process (02). Successful POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let processingStatusCode02 = '02'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"processingStatusCode02\", processingStatusCode02);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"processingStatusCode02\", jsonData.code);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"02\",\r\n    \"name\": \"In Process\",\r\n    \"descr\": \"In Process\",\r\n    \"isDefault\": false\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 03",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Processing Status Code - Completed (03). Successful POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"03\",\r\n    \"name\": \"Completed\",\r\n    \"descr\": \"Completed\",\r\n    \"isDefault\": false\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 04",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Processing Status Code - Canceled (04). Successful POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"04\",\r\n    \"name\": \"Canceled\",\r\n    \"descr\": \"Canceled\",\r\n    \"isDefault\": false\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 05",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Processing Status Code - Rejected (05). Successful POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"05\",\r\n    \"name\": \"Rejected\",\r\n    \"descr\": \"Rejected\",\r\n    \"isDefault\": false\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 06",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Processing Status Code - In distribution (06). Successful POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"06\",\r\n    \"name\": \"In Distribution\",\r\n    \"descr\": \"In Distribution\",\r\n    \"isDefault\": false\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 07",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Processing Status Code - Active (07). Successful POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"07\",\r\n    \"name\": \"Active\",\r\n    \"descr\": \"Active\",\r\n    \"isDefault\": false\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 08",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Processing Status Code - In error (08). Successful POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"08\",\r\n    \"name\": \"In Error\",\r\n    \"descr\": \"In Error\",\r\n    \"isDefault\": false\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "READ Sales Processing Status Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Sales Processing Status Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Sales Partner Role Codes",
                    "item": [
                        {
                            "name": "CREATE Sales Partner Role Code - Approver",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Partner Role Code - 0000000200 (Approver). Successful POST request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Approver\",\r\n    \"descr\": null,\r\n    \"code\": \"0000000200\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesPartnerRoleCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesPartnerRoleCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Partner Role Code - Contact Copy",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Partner Role Code - 0000000100 (Contact). Successful POST request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let salesPartnerRoleCodeContact = '0000000100'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"salesPartnerRoleCodeContact\", salesPartnerRoleCodeContact);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"salesPartnerRoleCodeContact\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Contact\",\r\n    \"descr\": null,\r\n    \"code\": \"0000000100\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesPartnerRoleCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesPartnerRoleCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "READ Sales Partner Role Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ metadata. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesPartnerRoleCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesPartnerRoleCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Sales Text Type Codes",
                    "item": [
                        {
                            "name": "CREATE Sales Text Type Codes - 00001",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Text Type Codes - 00001. Successful POST request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let salesTextTypeCodes00001 = '00001'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"salesTextTypeCodes00001\", salesTextTypeCodes00001);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"salesTextTypeCodes00001\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"00001\",\r\n    \"name\": \"Bundle discount\",\r\n    \"descr\": \"Bundle discount notice\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesTextTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "SalesTextTypeCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Text Type Codes - 00002",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Sales Text Type Codes - 00001. Successful POST request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let salesTextTypeCodes00002 = '00002'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"salesTextTypeCodes00002\", salesTextTypeCodes00002);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"salesTextTypeCodes00002\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"00002\",\r\n    \"name\": \"Welcome Bonus\",\r\n    \"descr\": \"Welcome Bonus notice\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesTextTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "SalesTextTypeCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "READ Sales Text Type Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Sales Text Type Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesTextTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "SalesTextTypeCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Division Codes",
                    "item": [
                        {
                            "name": "CREATE DivisionCodes - Electricity",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE DivisionCodes - Electricity (01). Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let coDivisionCode01 = '01';  // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"coDivisionCode01\", coDivisionCode01);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"coDivisionCode01\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Electricity\",\r\n    \"descr\": null,\r\n    \"code\": \"01\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/DivisionCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "DivisionCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE DivisionCodes - Gas",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE DivisionCodes - Gas (02). Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let divisionCode02 = '02'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"divisionCode02\", divisionCode02);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"divisionCode02\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Gas\",\r\n    \"descr\": null,\r\n    \"code\": \"02\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/DivisionCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "DivisionCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE DivisionCodes - Water",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE DivisionCodes - Water (03). Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let divisionCode03 = '03'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"divisionCode03\", divisionCode03);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"divisionCode03\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Water\",\r\n    \"descr\": null,\r\n    \"code\": \"03\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/DivisionCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "DivisionCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "READ Division Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ metadata. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/DivisionCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "DivisionCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Distribution Channel Codes",
                    "item": [
                        {
                            "name": "Create Distribution Channel Code - Direct",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Create Distribution Channel Code - Direct (D1). Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let distributionChannelCodeD1 = 'D1'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"distributionChannelCodeD1\", distributionChannelCodeD1);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"distributionChannelCodeD1\", jsonData.code);    \r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Direct\",\r\n    \"descr\": \"Direct-to-consumer sale\",\r\n    \"code\": \"D1\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/DistributionChannelCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "DistributionChannelCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Create Distribution Channel Code - Wholesale",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Create Distribution Channel Code - Wholesale (W1). Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "});\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Wholesale\",\r\n    \"descr\": null,\r\n    \"code\": \"W1\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/DistributionChannelCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "DistributionChannelCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Create Distribution Channel Code - Retailers",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Create Distribution Channel Code - Retailers (R1). Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Retail\",\r\n    \"descr\": null,\r\n    \"code\": \"R1\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/DistributionChannelCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "DistributionChannelCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "READ Distribution Channel Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ metadata. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/DistributionChannelCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "DistributionChannelCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Condition Type Codes",
                    "item": [
                        {
                            "name": "CREATE Condition Type Code - Product price",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Condition Type Code - Product price (PR00). Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json(); \r",
                                            "let conditionTypePR00 = 'PR00'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"conditionTypePR00\", conditionTypePR00);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"conditionTypePR00\", jsonData.code);\r",
                                            "} \r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Product price\",\r\n    \"descr\": null,\r\n    \"code\": \"PR00\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/ConditionTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "ConditionTypeCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Condition Type Code - Customer discount",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Condition Type Code - Customer discount (K007). Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Customer discount\",\r\n    \"descr\": null,\r\n    \"code\": \"K007\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/ConditionTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "ConditionTypeCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Condition Type Code - Price group discount",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Condition Type Code - Price group discount (K020). Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Price group discount\",\r\n    \"descr\": null,\r\n    \"code\": \"K020\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/ConditionTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "ConditionTypeCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "READ Condition Type Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ metadata. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/ConditionTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "ConditionTypeCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Service Order Priority Codes",
                    "item": [
                        {
                            "name": "READ Service Order Priority Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Service Order Priority Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/ServiceOrderPriorityCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "ServiceOrderPriorityCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Shipping Condition Codes",
                    "item": [
                        {
                            "name": "CREATE Shipping Condition Codes - Standard",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Shipping Condition Codes - Standard (01). Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let shippingConditionCode01 = '01'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "    pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "    pm.collectionVariables.set(\"shippingConditionCode01\", \r",
                                            "                        shippingConditionCode01);\r",
                                            "    } else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"shippingConditionCode01\", jsonData.code);    \r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Standard\",\r\n    \"descr\": null,\r\n    \"code\": \"01\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/ShippingConditionCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "ShippingConditionCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Shipping Condition Codes - Pickup",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Shipping Condition Codes - Pickup (02). Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [""],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Pickup\",\r\n    \"descr\": null,\r\n    \"code\": \"02\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/ShippingConditionCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "ShippingConditionCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Shipping Condition Codes - Express",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Shipping Condition Codes - Express (03). Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let shippingConditionCode03 = '03'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "    pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "    pm.collectionVariables.set(\"shippingConditionCode03\", \r",
                                            "                        shippingConditionCode03);\r",
                                            "    } else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"shippingConditionCode03\", jsonData.code);    \r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Express\",\r\n    \"descr\": null,\r\n    \"code\": \"03\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/ShippingConditionCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "ShippingConditionCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "READ Shipping Condition Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Shipping Condition Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/ShippingConditionCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "ShippingConditionCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Delivery Priority Codes",
                    "item": [
                        {
                            "name": "READ Delivery Priority Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Delivery Priority Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/DeliveryPriorityCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "DeliveryPriorityCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Unit Of Measures Codes",
                    "item": [
                        {
                            "name": "UnitOfMeasuresCodes - PC",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"UnitOfMeasuresCodes - PC. Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json(); \r",
                                            "let unitOfMeasureCodePC = 'PC'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"unitOfMeasureCodePC\", unitOfMeasureCodePC);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"unitOfMeasureCodePC\", jsonData.code);\r",
                                            "} \r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Piece\",\r\n    \"descr\": null,\r\n    \"code\": \"PC\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/UnitOfMeasuresCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "UnitOfMeasuresCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "UnitOfMeasuresCodes - Each per billing cycle",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"UnitOfMeasuresCodes - Each per billing cycle. Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let unitOfMeasureCodeEB = 'EB'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"unitOfMeasureCodeEB\", unitOfMeasureCodeEB);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"unitOfMeasureCodeEB\", jsonData.code);\r",
                                            "} \r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Each per billing cycle\",\r\n    \"descr\": null,\r\n    \"code\": \"EB\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/UnitOfMeasuresCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "UnitOfMeasuresCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "UnitOfMeasuresCodes - m3",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"UnitOfMeasuresCodes - m3. Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let unitOfMeasureCodeM3 = 'm3';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"unitOfMeasureCodeM3\", unitOfMeasureCodeM3);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"unitOfMeasureCodeM3\", jsonData.code);\r",
                                            "} \r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Cubic meter\",\r\n    \"descr\": null,\r\n    \"code\": \"m3\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/UnitOfMeasuresCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "UnitOfMeasuresCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "UnitOfMeasuresCodes - Kilowatt Hours",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"UnitOfMeasuresCodes - Kilowatt Hours. Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let unitOfMeasureCodeKWh = 'kWh';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"unitOfMeasureCodeKWh\", unitOfMeasureCodeKWh);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"unitOfMeasureCodeKWh\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Kilowatt Hours\",\r\n    \"descr\": null,\r\n    \"code\": \"kWh\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/UnitOfMeasuresCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "UnitOfMeasuresCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "UnitOfMeasuresCodes - Each",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"UnitOfMeasuresCodes - Each. Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let unitOfMeasureCodeEA = 'EA';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"unitOfMeasureCodeEA\", unitOfMeasureCodeEA);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"unitOfMeasureCodeEA\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Each\",\r\n    \"descr\": null,\r\n    \"code\": \"EA\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/UnitOfMeasuresCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "UnitOfMeasuresCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "READ Unit Of Measures Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Unit Of Measures Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/UnitOfMeasuresCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "UnitOfMeasuresCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Payment Term Codes",
                    "item": [
                        {
                            "name": "CREATE PaymentTermCodes 0001",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE PaymentTermCodes 0001. Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let paymentTermCode0001 = '0001'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"paymentTermCode0001\", paymentTermCode0001);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"paymentTermCode0001\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"End Of Month\",\r\n    \"descr\": null,\r\n    \"code\": \"0001\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/PaymentTermCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "PaymentTermCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "READ Payment Term Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Payment Term Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/PaymentTermCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "PaymentTermCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Payment Card Type Codes",
                    "item": [
                        {
                            "name": "READ Payment Card Type Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Payment Card Type Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/PaymentCardTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "PaymentCardTypeCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Incoterms Classification Codes",
                    "item": [
                        {
                            "name": "CREATE Incoterm Classification Code - DDP",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Incoterm Classification Code - DDP. Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let incotermCodeDDP = 'DDP'; // value to be set in case of 400\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.collectionVariables.set(\"incotermCodeDDP\", incotermCodeDDP);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.collectionVariables.set(\"incotermCodeDDP\", jsonData.code);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"DELIVERED DUTY PAID\",\r\n    \"descr\": null,\r\n    \"code\": \"DDP\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/IncotermsClassificationCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "IncotermsClassificationCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Incoterm Classification Code - CFR",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Incoterm Classification Code - CFR. Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"COST AND FREIGHT\",\r\n    \"descr\": null,\r\n    \"code\": \"CFR\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/IncotermsClassificationCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "IncotermsClassificationCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Incoterm Classification Code - CIF",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Incoterm Classification Code - CIF. Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"COST INSURANCE AND FREIGHT\",\r\n    \"descr\": null,\r\n    \"code\": \"CIF\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/IncotermsClassificationCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "IncotermsClassificationCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Incoterm Classification Code - CIP",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Incoterm Classification Code - CIP. Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"CARRIAGE AND INSURANCE PAID TO\",\r\n    \"descr\": null,\r\n    \"code\": \"CIP\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/IncotermsClassificationCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "IncotermsClassificationCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Incoterm Classification Code - UN",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Incoterm Classification Code - UN. Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"NOT FREE\",\r\n    \"descr\": null,\r\n    \"code\": \"UN\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/IncotermsClassificationCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "IncotermsClassificationCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Incoterm Classification Code - FOB",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"CREATE Incoterm Classification Code - FOB. Succesfull POST request\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"FREE ON BOARD\",\r\n    \"descr\": null,\r\n    \"code\": \"FOB\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/IncotermsClassificationCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "IncotermsClassificationCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "READ Incoterms Classification Codes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"READ Incoterms Classification Codes. Successful GET request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{url}}/api/v1/IncotermsClassificationCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "IncotermsClassificationCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                }
            ]
        },
        {
            "name": "Product",
            "item": [
                {
                    "name": "CREATE Product - Happy Home Bundle",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"CREATE Product - Happy Home Bundle. Succesfull POST request\", function () {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})\r",
                                    "\r",
                                    "var responseCode = pm.response.code;\r",
                                    "var jsonData = pm.response.json();\r",
                                    "if ( responseCode == 200 || 201  ) {\r",
                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                    "    pm.collectionVariables.set(\"productB000001\", jsonData.id);    \r",
                                    "}\r",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "{{jwt}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json;IEEE754Compatible=true"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"displayId\": \"B000001\",\r\n    \"name\": \"Happy Home Bundle\"\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/Product",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "Product"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "CREATE Product - Black Forest Home Bundle",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"CREATE Product - Black Forest Home Bundle. Succesfull POST request\", function () {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})\r",
                                    "\r",
                                    "var responseCode = pm.response.code;\r",
                                    "var jsonData = pm.response.json();\r",
                                    "if ( responseCode == 200 || 201  ) {\r",
                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                    "    pm.collectionVariables.set(\"productB000002\", jsonData.id);    \r",
                                    "}\r",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "{{jwt}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json;IEEE754Compatible=true"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"displayId\": \"B000002\",\r\n    \"name\": \"Black Forest home bundle\"\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/Product",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "Product"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "CREATE Product - Eco Elec Happy Home",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"CREATE Product - Eco Elec Happy Home. Succesfull POST request\", function () {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})\r",
                                    "\r",
                                    "var responseCode = pm.response.code;\r",
                                    "var jsonData = pm.response.json();\r",
                                    "if ( responseCode == 200 || 201  ) {\r",
                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                    "    pm.collectionVariables.set(\"productP000001\", jsonData.id);    \r",
                                    "}\r",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "{{jwt}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json;IEEE754Compatible=true"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"displayId\": \"P000002\",\r\n    \"name\": \"Eco Elec Happy Home\"\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/Product",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "Product"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "CREATE Product - Eco Elec Basic",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"CREATE Product - Eco Elec Basic. Succesfull POST request\", function () {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})\r",
                                    "\r",
                                    "var responseCode = pm.response.code;\r",
                                    "var jsonData = pm.response.json();\r",
                                    "if ( responseCode == 200 || 201  ) {\r",
                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                    "    pm.collectionVariables.set(\"productP000006\", jsonData.id);    \r",
                                    "}\r",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "{{jwt}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json;IEEE754Compatible=true"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"displayId\": \"P000006\",\r\n    \"name\": \"Eco Elec Basic\"\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/Product",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "Product"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "CREATE Product - Bio Gas Happy Home",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"CREATE Product - Bio Gas Happy Home. Succesfull POST request\", function () {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})\r",
                                    "\r",
                                    "var responseCode = pm.response.code;\r",
                                    "var jsonData = pm.response.json();\r",
                                    "if ( responseCode == 200 || 201  ) {\r",
                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                    "    pm.collectionVariables.set(\"productP000002\", jsonData.id);    \r",
                                    "}\r",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "{{jwt}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json;IEEE754Compatible=true"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"displayId\": \"P000001\",\r\n    \"name\": \"Bio Gas Happy Home\",\r\n    \"salesAspect\": {\r\n        \"division\": {\r\n            \"code\": \"{{divisionCode02}}\"\r\n        }\r\n    }\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/Product",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "Product"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "CREATE Product - Safe home",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"CREATE Product - Safe home. Succesfull POST request\", function () {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})\r",
                                    "\r",
                                    "var responseCode = pm.response.code;\r",
                                    "var jsonData = pm.response.json();\r",
                                    "if ( responseCode == 200 || 201  ) {\r",
                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                    "    pm.collectionVariables.set(\"productP000003\", jsonData.id);    \r",
                                    "}\r",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "{{jwt}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json;IEEE754Compatible=true"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"displayId\": \"P000003\",\r\n    \"name\": \"Safe home\"\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/Product",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "Product"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "CREATE Product - Flying e-Bike",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"CREATE Product - Flying e-Bike. Succesfull POST request\", function () {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})\r",
                                    "\r",
                                    "var responseCode = pm.response.code;\r",
                                    "var jsonData = pm.response.json();\r",
                                    "if ( responseCode == 200 || 201  ) {\r",
                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                    "    pm.collectionVariables.set(\"productP000004\", jsonData.id);    \r",
                                    "}\r",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "{{jwt}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json;IEEE754Compatible=true"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"displayId\": \"P000004\",\r\n    \"name\": \"Flying e-Bike\"\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/Product",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "Product"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "CREATE Product - Smart Audit",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"CREATE Product - Smart Audit. Succesfull POST request\", function () {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})\r",
                                    "\r",
                                    "var responseCode = pm.response.code;\r",
                                    "var jsonData = pm.response.json();\r",
                                    "if ( responseCode == 200 || 201  ) {\r",
                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                    "    pm.collectionVariables.set(\"productP000005\", jsonData.id);    \r",
                                    "}\r",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "{{jwt}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json;IEEE754Compatible=true"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"displayId\": \"P000005\",\r\n    \"name\": \"Smart Audit\"\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/Product",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "Product"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "READ Products",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"READ Products. Successful GET request\", function () {\r",
                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/Product",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "Product"]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Sales Organization",
            "item": [
                {
                    "name": "CREATE  ​Sales Organization",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"CREATE  ​Sales Organization. Succesfull POST request\", function () {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                    "})\r",
                                    "\r",
                                    "var responseCode = pm.response.code;\r",
                                    "var jsonData = pm.response.json();\r",
                                    "let SalesOrgID = '';\r",
                                    "\r",
                                    "if ( responseCode == 200 || 201  ) {\r",
                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                    "    pm.collectionVariables.set(\"salesOrgID\", jsonData.id);\r",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"displayId\": \"SA01\",\r\n    \"name\": \"Sales Org Germany\",\r\n    \"companyCode\": {\r\n        \"id\": \"{{companyCodeID}}\"\r\n    },\r\n    \"currency\": {\r\n        \"code\": \"{{currencyCodeEUR}}\"\r\n    }\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/SalesOrganization",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "SalesOrganization"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "READ Sales Organization",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"READ Sales Organization. Successful GET request\", function () {\r",
                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{url}}/api/v1/SalesOrganization",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "SalesOrganization"]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Service Organization",
            "item": [
                {
                    "name": "CREATE Service Organization",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"CREATE Service Organization. Succesfull POST request\", function () {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                    "})\r",
                                    "\r",
                                    "var responseCode = pm.response.code;\r",
                                    "var jsonData = pm.response.json();\r",
                                    "let ServiceOrgID = ' ';\r",
                                    "\r",
                                    "if ( responseCode == 200 || 201  ) {\r",
                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                    "    pm.collectionVariables.set(\"ServiceOrgID\", jsonData.id);\r",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"serviceOrganization\": \"Service Org\"\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/ServiceOrganization",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "ServiceOrganization"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "READ Service Organization",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"READ Service Organization. Successful GET request\", function () {\r",
                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/ServiceOrganization",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "ServiceOrganization"]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Customer Order",
            "item": [
                {
                    "name": "Customer Order Configuration",
                    "item": [
                        {
                            "name": "Customer Order Reason Codes",
                            "item": [
                                {
                                    "name": "CREATE Customer Order reason codes",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"CREATE CREATE Customer Order Reason Code - RC10 (eCommerce order). Successful POST request\", function () {\r",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let customerOrderReasonCodeRC10 = 'RC10'; // value to be set in case of 400\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.collectionVariables.set(\"customerOrderReasonCodeRC10\", customerOrderReasonCodeRC10);\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.collectionVariables.set(\"customerOrderReasonCodeRC10\", jsonData.code);\r",
                                                    "}\r",
                                                    ""
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"name\": \"eCommerce order\",\r\n    \"descr\": null,\r\n    \"code\": \"RC10\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderReasonCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderReasonCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "READ Customer Order reason codes",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"READ Customer Order reason codes. Successful GET request\", function () {\r",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                    "})"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "GET",
                                        "header": [],
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderReasonCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderReasonCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "Customer Order Items Type Codes",
                            "item": [
                                {
                                    "name": "CREATE Customer Order Item Type Codes USB2",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"CREATE Customer Order Item Type Codes - USB2. Successful POST request\", function () {\r",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let coItemTypeCodeUSB2 = 'USB2'; // value to be set in case of 400\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.collectionVariables.set(\"coItemTypeCodeUSB2\", coItemTypeCodeUSB2);\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.collectionVariables.set(\"coItemTypeCodeUSB2\", jsonData.code);\r",
                                                    "}\r",
                                                    ""
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"name\": \"Commodity Subscription\",\r\n    \"descr\": null,\r\n    \"code\": \"USB2\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderItemTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "CREATE Customer Order Item Type Codes - USB1",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"CREATE Customer Order Item Type Codes - USB1. Successful POST request\", function () {\r",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let coItemTypeCodeUSB1 = 'USB1'; // value to be set in case of 400\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.collectionVariables.set(\"coItemTypeCodeUSB1\", coItemTypeCodeUSB1);\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.collectionVariables.set(\"coItemTypeCodeUSB1\", jsonData.code);\r",
                                                    "}\r",
                                                    ""
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"name\": \"Non-commodity Subscription\",\r\n    \"descr\": null,\r\n    \"code\": \"USB1\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderItemTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "CREATE Customer Order Item Type Codes - UBD1",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"CREATE Customer Order Item Type Codes - UBD1. Successful POST request\", function () {\r",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let coItemTypeCodeUBD1 = 'UBD1'; // value to be set in case of 400\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.collectionVariables.set(\"coItemTypeCodeUBD1\", coItemTypeCodeUBD1);\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.collectionVariables.set(\"coItemTypeCodeUBD1\", jsonData.code);\r",
                                                    "}\r",
                                                    ""
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"name\": \"Bundle\",\r\n    \"descr\": null,\r\n    \"code\": \"UBD1\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderItemTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "CREATE CustomerOrderItemTypeCodes - UMT1",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"CREATE Customer Order Item Type Codes - UMT1. Successful POST request\", function () {\r",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let coItemTypeCodeUMT1 = 'UMT1'; // value to be set in case of 400\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.collectionVariables.set(\"coItemTypeCodeUMT1\", coItemTypeCodeUMT1);\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.collectionVariables.set(\"coItemTypeCodeUMT1\", jsonData.code);\r",
                                                    "}\r",
                                                    ""
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"name\": \"Physical\",\r\n    \"descr\": null,\r\n    \"code\": \"UMT1\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderItemTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "CREATE CustomerOrderItemTypeCodes - USV1",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"CREATE Customer Order Item Type Codes - USV1. Successful POST request\", function () {\r",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let coItemTypeCodeUSV1 = 'USV1'; // value to be set in case of 400\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.collectionVariables.set(\"coItemTypeCodeUSV1\", coItemTypeCodeUSV1);\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.collectionVariables.set(\"coItemTypeCodeUSV1\", jsonData.code);\r",
                                                    "}\r",
                                                    ""
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"name\": \"Service\",\r\n    \"descr\": null,\r\n    \"code\": \"USV1\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderItemTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "READ Customer Order Item Type Codes",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"READ Customer Order Item Type Codes. Successful GET request\", function () {\r",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                    "})"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "GET",
                                        "header": [],
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderItemTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "Customer Order Utilities Status Mapping",
                            "item": [
                                {
                                    "name": "READ Customer Order Utilities Status Mapping",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"READ Customer Order Utilities Status Mapping. Successful GET request\", function () {\r",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                    "})"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "GET",
                                        "header": [],
                                        "url": {
                                            "raw": "{{url}}/api/v1/config/CustomerOrderUtilitiesStatusMapping",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "config",
                                                "CustomerOrderUtilitiesStatusMapping"
                                            ]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "Customer Order Utilities Status Source Systems",
                            "item": [
                                {
                                    "name": "READ Customer Order Utilities Status Source Systems",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"READ Customer Order Utilities Status Source Systems. Successful GET request\", function () {\r",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                    "})"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "GET",
                                        "header": [],
                                        "url": {
                                            "raw": "{{url}}/api/v1/config/CustomerOrderUtilitiesStatusSourceSystems",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "config",
                                                "CustomerOrderUtilitiesStatusSourceSystems"
                                            ]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "Customer Order Utilities Status Mapping Type Codes",
                            "item": [
                                {
                                    "name": "READ Customer Order Utilities Status Mapping Type Codes",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"READ Customer Order Utilities Status Mapping Type Codes. Successful GET request\", function () {\r",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                    "})"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "GET",
                                        "header": [],
                                        "url": {
                                            "raw": "{{url}}/api/v1/config/CustomerOrderUtilitiesStatusMappingTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "config",
                                                "CustomerOrderUtilitiesStatusMappingTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "CREATE Customer Order",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"CREEATE Customer Order. Successful POST request\", function () {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "/*\r",
                                    "//partner ID\r",
                                    "var partnerId = '';\r",
                                    "let partId = Math.floor(100000 + Math.random() * 1000000000);\r",
                                    "pm.globals.set(\"partnerId\", partId);\r",
                                    "// Display ID\r",
                                    " var dispID = '';\r",
                                    "let displID = Math.floor(1000000000 + Math.random() * 9000000)\r",
                                    "pm.globals.set(\"dispID\", displID);\r",
                                    "*/\r",
                                    "\r",
                                    "let now = new Date();\r",
                                    "\r",
                                    "pm.collectionVariables.set('now', now);\r",
                                    "\r",
                                    "pm.collectionVariables.set('isoDate', now.toISOString().substr(0,10));\r",
                                    "pm.collectionVariables.set('isoDateTime', now.toISOString());\r",
                                    "let isoDatePlusOneYear = new Date(now.getFullYear() + 1, now.getMonth(), now.getDate() + 1);\r",
                                    "pm.collectionVariables.set('isoDatePlusOneYear', isoDatePlusOneYear.toISOString().substr(0,10));\r",
                                    "let isoDatePlusTwoYears = new Date(now.getFullYear() + 2, now.getMonth(), now.getDate() + 1);\r",
                                    "pm.collectionVariables.set('isoDatePlusTwoYears', isoDatePlusTwoYears.toISOString().substr(0,10));\r",
                                    "let isoDatePlusOneMonth = new Date(now.getFullYear(), now.getMonth() + 1, now.getDate() + 1);\r",
                                    "pm.collectionVariables.set('isoDatePlusOneMonth', isoDatePlusOneMonth.toISOString().substr(0,10));\r",
                                    "let isoDatePlusOneMonthOneYear = new Date(now.getFullYear() + 1, now.getMonth() + 1, now.getDate() + 1);\r",
                                    "pm.collectionVariables.set('isoDatePlusOneMonthOneYear', isoDatePlusOneMonthOneYear.toISOString().substr(0,10));"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "{{jwt}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json;IEEE754Compatible=true"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"displayId\": \"{{$timestamp}}\",\r\n    \"isExternallyPriced\": true,\r\n    \"cancellationStatus\": null,\r\n    \"netAmount\": 2110,\r\n    \"notes\": [\r\n        {\r\n            \"id\": \"{{$guid}}\",\r\n            \"text\": \"20% on base charge for 24 months if all subs are active\",\r\n            \"language\": {\r\n                \"code\": \"{{languageCodeEN}}\"\r\n            },\r\n            \"textType\": {\r\n                \"code\": \"{{salesTextTypeCodes00001}}\"\r\n            }\r\n        }\r\n    ],\r\n    \"orderReason\": {\r\n        \"code\": \"{{customerOrderReasonCodeRC10}}\"\r\n    },\r\n    \"partners\": [\r\n        {\r\n            \"id\": \"{{$guid}}\",\r\n            \"main\": true,\r\n            \"address\": {\r\n                \"country\": {\r\n                    \"code\": \"{{countryCodeDE}}\"\r\n                }\r\n            },\r\n            \"personAddressDetails\": {\r\n                \"firstName\": \"Jhon\",\r\n                \"lastName\": \"Doe\",\r\n                \"formattedPersonName\": \"J. Doe\",\r\n                \"isBlocked\": false\r\n            },\r\n            \"role\": {\r\n                \"code\": \"{{salesPartnerRoleCodeContact}}\"\r\n            }\r\n        }\r\n    ],\r\n    \"priceComponents\": [\r\n        {\r\n            \"conditionType\": {\r\n                \"code\": \"{{conditionTypePR00}}\"\r\n            },\r\n            \"currency\": {\r\n                \"code\": \"{{currencyCodeEUR}}\"\r\n            },\r\n            \"perQuantityUnit\": {\r\n                \"code\": \"{{unitOfMeasureCodePC}}\"\r\n            }\r\n        }\r\n    ],\r\n    \"salesAspect\": {\r\n        \"incotermsClassification\": {\r\n            \"code\": \"{{incotermCodeDDP}}\"\r\n        },\r\n        \"shippingCondition\": {\r\n            \"code\": \"{{shippingConditionCode03}}\"\r\n        },\r\n        \"paymentTerms\": {\r\n            \"code\": \"{{paymentTermCode0001}}\"\r\n        }\r\n    },\r\n    \"salesOrganization\": {\r\n        \"id\": \"{{salesOrgID}}\"\r\n    },\r\n    \"customerReferenceId\": \"8e5e535a-dd32-11ea-87d0-0242ac130004\",\r\n    \"orderDate\": \"{{isoDate}}\",\r\n    \"pricingDate\": \"{{isoDateTime}}\",\r\n    \"processingStatus\": {\r\n        \"code\": \"{{processingStatusCode02}}\"\r\n    },\r\n    \"distributionChannel\": {\r\n        \"code\": \"{{distributionChannelCodeD1}}\"\r\n    },\r\n    \"division\": {\r\n        \"code\": \"{{coDivisionCode01}}\"\r\n    },\r\n    \"items\": [\r\n        {\r\n            \"id\": \"100000\",\r\n            \"text\": \"Happy Home Bundle\",\r\n            \"type\": {\r\n                \"code\": \"{{coItemTypeCodeUBD1}}\"\r\n            },\r\n            \"product\": {\r\n                \"id\": \"{{productB000001}}\"\r\n            },\r\n            \"processingStatus\": {\r\n                \"code\": \"{{processingStatusCode02}}\"\r\n            },\r\n            \"quantity\": 4,\r\n            \"quantityUnit\": {\r\n                \"code\": \"{{unitOfMeasureCodePC}}\"\r\n            },\r\n            \"netAmount\": 1490\r\n        },\r\n        {\r\n            \"id\": \"100001\",\r\n            \"parentItemId\": \"100000\",\r\n            \"text\": \"Eco Elec Happy Home\",\r\n            \"type\": {\r\n                \"code\": \"{{coItemTypeCodeUSB2}}\"\r\n            },\r\n            \"product\": {\r\n                \"id\": \"{{productP000001}}\"\r\n            },\r\n            \"processingStatus\": {\r\n                \"code\": \"{{processingStatusCode02}}\"\r\n            },\r\n            \"quantity\": 1,\r\n            \"quantityUnit\": {\r\n                \"code\": \"{{unitOfMeasureCodePC}}\"\r\n            },\r\n            \"netAmount\": 75,\r\n            \"subscriptionAspect\": {\r\n                \"contractTerm\": {\r\n                    \"period\": 24,\r\n                    \"periodicity\": \"calendar-monthly\"\r\n                },\r\n                \"validFrom\": \"{{isoDate}}\",\r\n                \"validTo\": \"{{isoDatePlusOneYear}}\",\r\n                \"isBlocked\": false\r\n            },\r\n            \"priceComponents\": [\r\n                {\r\n                    \"conditionType\": {\r\n                        \"code\": \"{{conditionTypePR00}}\"\r\n                    },\r\n                    \"value\": \"12.0\",\r\n                    \"currency\": {\r\n                        \"code\": \"{{currencyCodeEUR}}\"\r\n                    },\r\n                    \"perQuantityUnit\": {\r\n                        \"code\": \"{{unitOfMeasureCodePC}}\"\r\n                    }\r\n                },\r\n                {\r\n                    \"conditionType\": {\r\n                        \"code\": \"{{conditionTypePR00}}\"\r\n                    },\r\n                    \"value\": \"0.28\",\r\n                    \"currency\": {\r\n                        \"code\": \"{{currencyCodeEUR}}\"\r\n                    },\r\n                    \"perQuantityUnit\": {\r\n                        \"code\": \"{{unitOfMeasureCodeKWh}}\"\r\n                    }\r\n                }\r\n            ],\r\n            \"notes\": [\r\n                {\r\n                    \"id\": \"{{$guid}}\",\r\n                    \"text\": \"20%  on base charge for 24 months if all subs are active\",\r\n                    \"language\": {\r\n                        \"code\": \"{{languageCodeEN}}\"\r\n                    },\r\n                    \"textType\": {\r\n                        \"code\": \"{{salesTextTypeCodes00001}}\"\r\n                    }\r\n                },\r\n                {\r\n                    \"id\": \"{{$guid}}\",\r\n                    \"text\": \"€100 with first yearly bill\",\r\n                    \"language\": {\r\n                        \"code\": \"{{languageCodeEN}}\"\r\n                    },\r\n                    \"textType\": {\r\n                        \"code\": \"{{salesTextTypeCodes00002}}\"\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"id\": \"100002\",\r\n            \"parentItemId\": \"100000\",\r\n            \"text\": \"Bio Gas Happy Home\",\r\n            \"type\": {\r\n                \"code\": \"{{coItemTypeCodeUSB2}}\"\r\n            },\r\n            \"product\": {\r\n                \"id\": \"{{productP000002}}\"\r\n            },\r\n            \"processingStatus\": {\r\n                \"code\": \"{{processingStatusCode02}}\"\r\n            },\r\n            \"quantity\": 1,\r\n            \"quantityUnit\": {\r\n                \"code\": \"{{unitOfMeasureCodePC}}\"\r\n            },\r\n            \"netAmount\": 50,\r\n            \"subscriptionAspect\": {\r\n                \"contractTerm\": {\r\n                    \"period\": 12,\r\n                    \"periodicity\": \"calendar-monthly\"\r\n                },\r\n                \"validFrom\": \"{{isoDate}}\",\r\n                \"validTo\": \"{{isoDatePlusOneYear}}\",\r\n                \"isBlocked\": false\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"100003\",\r\n            \"parentItemId\": \"100000\",\r\n            \"text\": \"Safe home\",\r\n            \"type\": {\r\n                \"code\": \"{{coItemTypeCodeUSB1}}\"\r\n            },\r\n            \"product\": {\r\n                \"id\": \"{{productP000003}}\"\r\n            },\r\n            \"processingStatus\": {\r\n                \"code\": \"{{processingStatusCode02}}\"\r\n            },\r\n            \"quantity\": 1,\r\n            \"quantityUnit\": {\r\n                \"code\": \"{{unitOfMeasureCodePC}}\"\r\n            },\r\n            \"netAmount\": 65,\r\n            \"subscriptionAspect\": {\r\n                \"contractTerm\": {\r\n                    \"period\": 12\r\n                },\r\n                \"validFrom\": \"{{isoDate}}\",\r\n                \"validTo\": \"{{isoDatePlusOneYear}}\",\r\n                \"isBlocked\": false\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"100004\",\r\n            \"parentItemId\": \"100000\",\r\n            \"text\": \"Flying e-Bike\",\r\n            \"type\": {\r\n                \"code\": \"{{coItemTypeCodeUMT1}}\"\r\n            },\r\n            \"product\": {\r\n                \"id\": \"{{productP000004}}\"\r\n            },\r\n            \"processingStatus\": {\r\n                \"code\": \"{{processingStatusCode02}}\"\r\n            },\r\n            \"quantity\": 1,\r\n            \"quantityUnit\": {\r\n                \"code\": \"{{unitOfMeasureCodePC}}\"\r\n            },\r\n            \"netAmount\": 1300,\r\n            \"subscriptionAspect\": {\r\n                \"contractTerm\": {\r\n                    \"period\": 12\r\n                },\r\n                \"validFrom\": \"{{isoDate}}\",\r\n                \"validTo\": \"{{isoDatePlusOneYear}}\",\r\n                \"isBlocked\": false\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"200000\",\r\n            \"text\": \"HD energy audit order\",\r\n            \"netAmount\": 130,\r\n            \"type\": {\r\n                \"code\": \"{{coItemTypeCodeUSV1}}\"\r\n            },\r\n            \"product\": {\r\n                \"id\": \"{{productP000005}}\"\r\n            },\r\n            \"processingStatus\": {\r\n                \"code\": \"{{processingStatusCode02}}\"\r\n            },\r\n            \"quantity\": 1,\r\n            \"quantityUnit\": {\r\n                \"code\": \"{{unitOfMeasureCodePC}}\"\r\n            },\r\n            \"utilitiesAspect\": {\r\n                \"distributionChannel\": {\r\n                    \"code\": \"{{distributionChannelCodeD1}}\"\r\n                },\r\n                \"division\": {\r\n                    \"code\": \"{{coDivisionCode01}}\"\r\n                },\r\n                \"salesOrganization\": {\r\n                    \"id\": \"{{salesOrgID}}\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"300000\",\r\n            \"text\": \"Black Forest home bundle\",\r\n            \"netAmount\": 490,\r\n            \"type\": {\r\n                \"code\": \"{{coItemTypeCodeUBD1}}\"\r\n            },\r\n            \"product\": {\r\n                \"id\": \"{{productB000002}}\"\r\n            },\r\n            \"processingStatus\": {\r\n                \"code\": \"{{processingStatusCode02}}\"\r\n            },\r\n            \"quantity\": 2,\r\n            \"quantityUnit\": {\r\n                \"code\": \"{{unitOfMeasureCodePC}}\"\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"300001\",\r\n            \"text\": \"Flying e-Bike\",\r\n            \"netAmount\": 450,\r\n            \"type\": {\r\n                \"code\": \"{{coItemTypeCodeUMT1}}\"\r\n            },\r\n            \"product\": {\r\n                \"id\": \"{{productP000004}}\"\r\n            },\r\n            \"processingStatus\": {\r\n                \"code\": \"{{processingStatusCode02}}\"\r\n            },\r\n            \"quantity\": 1,\r\n            \"quantityUnit\": {\r\n                \"code\": \"{{unitOfMeasureCodePC}}\"\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"300002\",\r\n            \"parentItemId\": \"300000\",\r\n            \"text\": \"Eco Elec Basic\",\r\n            \"type\": {\r\n                \"code\": \"{{coItemTypeCodeUSV1}}\"\r\n            },\r\n            \"product\": {\r\n                \"id\": \"{{productP000006}}\"\r\n            },\r\n            \"processingStatus\": {\r\n                \"code\": \"{{processingStatusCode02}}\"\r\n            },\r\n            \"quantity\": 1,\r\n            \"quantityUnit\": {\r\n                \"code\": \"{{unitOfMeasureCodePC}}\"\r\n            },\r\n            \"netAmount\": 40,\r\n            \"subscriptionAspect\": {\r\n                \"contractTerm\": {\r\n                    \"period\": 12\r\n                },\r\n                \"validFrom\": \"{{isoDatePlusOneMonth}}\",\r\n                \"validTo\": \"{{isoDatePlusOneMonthOneYear}}\",\r\n                \"isBlocked\": false\r\n            },\r\n            \"notes\": [\r\n                {\r\n                    \"id\": \"{{$guid}}\",\r\n                    \"text\": \"€150 after confirmation\",\r\n                    \"language\": {\r\n                        \"code\": \"{{languageCodeEN}}\"\r\n                    },\r\n                    \"textType\": {\r\n                        \"code\": \"{{salesTextTypeCodes00002}}\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/CustomerOrder",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "CustomerOrder"]
                        },
                        "description": "2 products with bundle items"
                    },
                    "response": []
                },
                {
                    "name": "READ Customer Order",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"READ Customer Order. Successful GET request\", function () {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "//partner ID\r",
                                    "var partnerId = '';\r",
                                    "let partId = Math.floor(100000 + Math.random() * 1000000000);\r",
                                    "pm.globals.set(\"partnerId\", partId);\r",
                                    "// Display ID\r",
                                    " var dispID = '';\r",
                                    "let displID = Math.floor(1000000000 + Math.random() * 9000000)\r",
                                    "pm.globals.set(\"dispID\", displID);\r",
                                    "\r",
                                    "\r",
                                    "\r",
                                    "// console.log(\"partnerId\", partId);\r",
                                    "// console.log(\"Display ID\", dispID)\r",
                                    "\r",
                                    "// *************************************************************************\r",
                                    "\r",
                                    "// function uuid() {\r",
                                    "//   function s4() {\r",
                                    "//     return Math.floor((1 + Math.random()) * 0x10000)\r",
                                    "//       .toString(16)\r",
                                    "//       .substring(1);\r",
                                    "//   }\r",
                                    "//   return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r",
                                    "//     s4() + '-' + s4() + s4() + s4();\r",
                                    "// }\r",
                                    "\r",
                                    "// function lastName() {\r",
                                    "//    var result           = '';\r",
                                    "//    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                                    "//    var charactersLength = characters.length;\r",
                                    "//    for ( var i = 0; i < 10; i++ ) {\r",
                                    "//       result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
                                    "//    }\r",
                                    "//    return result;\r",
                                    "// }\r",
                                    "\r",
                                    "// Setup the Customer Order\r",
                                    "// let pLastName = lastName();\r",
                                    "// let pSapAddressUUID = uuid();\r",
                                    "// let custId = Math.floor(1000 + Math.random() * 9000);\r",
                                    "\r",
                                    "// set variables\r",
                                    "\r",
                                    "// pm.globals.set(\"bp_customerId\", custId);\r",
                                    "// pm.golabls.set(\"bp_uid\", pUuid);\r",
                                    "// pm.globals.set(\"bp_lastName\", pLastName);\r",
                                    "// pm.globals.set(\"bp_sapAddressUUID\", pSapAddressUUID);\r",
                                    "\r",
                                    "// **************************************************************************"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "{{jwt}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json;IEEE754Compatible=true"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"processingStatus\": {\r\n                \"code\": \"{{StatusCode00}}\"\r\n    },\r\n    \"salesOrganization\": {\r\n                \"id\": \"{{salesOrgU100}}\"\r\n    },\r\n    \"division\": {\r\n                \"code\": \"{{divisionCode01}}\"\r\n    },\r\n    \"distributionChannel\": {\r\n                \"code\": \"{{customerOrderDistributionChannelCodeU1}}\"\r\n    },\r\n    \"netAmount\": \"10\",\r\n    \"items\": [\r\n        {\r\n            \"id\": \"000001\",\r\n            \"parentItemId\": \"\",\r\n                \"processingStatus\": {\r\n                    \"code\": \"{{StatusCode01}}\"\r\n                },\r\n            \"netAmount\": \"100.99\",\r\n            \"partners\": [\r\n                {\r\n                    \"id\": \"10100023\"\r\n                }\r\n            ],\r\n            \"priceComponents\": [\r\n                {\r\n                    \"conditionType\": {\r\n                        \"code\": \"PPR0\"\r\n                    },\r\n                    \"value\": \"26.9\",\r\n                    \"currency\": {\r\n                        \"code\": \"EUR\"\r\n                    },\r\n                    \"perQuantityUnit\": {\r\n                        \"code\": \"PC\"\r\n                    }\r\n                },\r\n                {\r\n                    \"conditionType\": {\r\n                        \"code\": \"YK07\"\r\n                    },\r\n                    \"value\": \"55\",\r\n                    \"currency\": {\r\n                        \"code\": \"EUR\"\r\n                    }\r\n                }\r\n            ],\r\n            \"subscriptionAspect\": {\r\n                \"contractTerm\": {\r\n                    \"period\": null,\r\n                    \"periodicity\": \"null\"\r\n                },\r\n                \"validFrom\": \"2021-04-01\"\r\n            },\r\n            \"utilitiesAspect\": {\r\n                \"distributionChannel\": {\r\n                    \"code\": \"{{customerOrderDistributionChannelCodeU1}}\"\r\n                },\r\n                \"division\": {\r\n                    \"code\": \"00\"\r\n                },\r\n                \"salesOrganization\": {\r\n                    \"id\": \"{{salesOrg1010}}\"\r\n                }\r\n            },\r\n            \"type\": {\r\n                \"code\": \"UMT1\"\r\n            },\r\n            \"text\": \"physical order\",\r\n            \"quantity\": \"1\",\r\n            \"quantityUnit\": {\r\n                \"code\": \"{{unitOfMeasureCodePC}}\"\r\n            },\r\n            \"product\": {\r\n                \"id\": \"{{productTG11}}\"\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"000002\",\r\n            \"processingStatus\": {\r\n                    \"code\": \"{{StatusCode02}}\"\r\n                },\r\n            \"netAmount\": \"100.99\",\r\n            \"partners\": [\r\n                {\r\n                    \"id\": \"IP_CUST\"\r\n                }\r\n            ],\r\n            \"type\": {\r\n                \"code\": \"{{itemTypeCodeUsb1}}\"\r\n            },\r\n            \"utilitiesAspect\": {\r\n                \"distributionChannel\": {\r\n                    \"code\": \"{{customerOrderDistributionChannelCode10}}\"\r\n                },\r\n                \"division\": {\r\n                    \"code\": \"{{divisionCode00}}\"\r\n                },\r\n                \"salesOrganization\": {\r\n                    \"id\": \"{{salesOrg1010}}\"\r\n                }\r\n            },\r\n            \"subscriptionAspect\": {\r\n                \"contractTerm\": {\r\n                    \"period\": 12,\r\n                    \"periodicity\": \"calendar-monthly\"\r\n                },\r\n                \"validFrom\": \"2021-04-01\"\r\n            },\r\n            \"text\": \"Bundle Subscription\",\r\n            \"quantity\": \"2\",\r\n            \"quantityUnit\": {\r\n                \"code\": \"{{unitOfMeasureCodePC}}\"\r\n            },\r\n            \"product\": {\r\n                \"id\": \"{{nonComoditySubscriptionProduct}}\"\r\n            }\r\n        }\r\n    ],\r\n    \"displayId\": \"{{dispID}}\",\r\n    \"orderDate\": \"2021-05-01\",\r\n    \"pricingDate\": \"2021-04-26T15:51:04Z\",\r\n    \"partners\": [\r\n        {\r\n            \"id\": \"10100023\",\r\n            \"contractAccountId\": \"010000013102\",\r\n            \"businessPartnerId\": \"{{BPdisplID}}\",\r\n            \"role\": {\r\n                \"code\": \"SH\"\r\n            }\r\n        }\r\n    ],\r\n    \"priceComponents\": [\r\n        {\r\n            \"conditionType\": {\r\n                \"code\": \"DRN1\"\r\n            },\r\n            \"value\": \"16.9\",\r\n            \"currency\": {\r\n                \"code\": \"EUR\"\r\n            },\r\n            \"perQuantityUnit\": {\r\n                \"code\": \"PC\"\r\n            }\r\n        },\r\n        {\r\n            \"conditionType\": {\r\n                \"code\": \"DRG1\"\r\n            },\r\n            \"value\": \"49\",\r\n            \"currency\": {\r\n                \"code\": \"EUR\"\r\n            },\r\n            \"perQuantityUnit\": {\r\n                \"code\": \"PC\"\r\n            }\r\n        }\r\n    ],\r\n   \r\n    \"salesAspect\": {\r\n        \"incotermsClassification\": {\r\n            \"code\": \"FH\"\r\n        },\r\n        \"shippingCondition\": {\r\n            \"code\": \"{{customerOrderShippingConditionCode02}}\"\r\n        },\r\n        \"paymentTerms\": {\r\n            \"code\": \"{{paymentTermCodes0001}}\"\r\n        }\r\n    }\r\n}\r\n",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{url}}/api/v1/CustomerOrder",
                            "host": ["{{url}}"],
                            "path": ["api", "v1", "CustomerOrder"]
                        },
                        "description": "2 products with bundle items"
                    },
                    "response": []
                }
            ]
        }
    ],
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{jwt}}",
                "type": "string"
            }
        ]
    },
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [""]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [""]
            }
        }
    ],
    "variable": [
        {
            "key": "currencyCodeEUR",
            "value": ""
        },
        {
            "key": "languageCodeEN",
            "value": ""
        },
        {
            "key": "languageCodeDE",
            "value": ""
        },
        {
            "key": "companyVatRegistrationIdRand",
            "value": ""
        },
        {
            "key": "companyCodeID",
            "value": ""
        },
        {
            "key": "countryCodeDE",
            "value": ""
        },
        {
            "key": "processingStatusCode02",
            "value": ""
        },
        {
            "key": "salesPartnerRoleCodeContact",
            "value": ""
        },
        {
            "key": "salesTextTypeCodes00001",
            "value": ""
        },
        {
            "key": "salesTextTypeCodes00002",
            "value": ""
        },
        {
            "key": "coDivisionCode01",
            "value": ""
        },
        {
            "key": "divisionCode02",
            "value": ""
        },
        {
            "key": "distributionChannelCodeD1",
            "value": ""
        },
        {
            "key": "conditionTypePR00",
            "value": ""
        },
        {
            "key": "shippingConditionCode01",
            "value": ""
        },
        {
            "key": "shippingConditionCode03",
            "value": ""
        },
        {
            "key": "unitOfMeasureCodePC",
            "value": ""
        },
        {
            "key": "unitOfMeasureCodeEB",
            "value": ""
        },
        {
            "key": "unitOfMeasureCodeKWh",
            "value": ""
        },
        {
            "key": "unitOfMeasureCodeEA",
            "value": ""
        },
        {
            "key": "paymentTermCode0001",
            "value": ""
        },
        {
            "key": "incotermCodeDDP",
            "value": ""
        },
        {
            "key": "productB000001",
            "value": ""
        },
        {
            "key": "productB000002",
            "value": ""
        },
        {
            "key": "productP000001",
            "value": ""
        },
        {
            "key": "productP000006",
            "value": ""
        },
        {
            "key": "productP000002",
            "value": ""
        },
        {
            "key": "productP000003",
            "value": ""
        },
        {
            "key": "productP000004",
            "value": ""
        },
        {
            "key": "productP000005",
            "value": ""
        },
        {
            "key": "salesOrgID",
            "value": ""
        },
        {
            "key": "coItemTypeCodeUSB2",
            "value": ""
        },
        {
            "key": "coItemTypeCodeUSB1",
            "value": ""
        },
        {
            "key": "coItemTypeCodeUBD1",
            "value": ""
        },
        {
            "key": "coItemTypeCodeUMT1",
            "value": ""
        },
        {
            "key": "coItemTypeCodeUSV1",
            "value": ""
        },
        {
            "key": "customerOrderItemUtilitiesSubsequentDocumentCodeUMT1",
            "value": ""
        },
        {
            "key": "customerOrderItemUtilitiesSubsequentDocumentCodeUSB2",
            "value": ""
        },
        {
            "key": "now",
            "value": ""
        },
        {
            "key": "isoDate",
            "value": ""
        },
        {
            "key": "isoDateTime",
            "value": ""
        },
        {
            "key": "isoDatePlusOneYear",
            "value": ""
        },
        {
            "key": "isoDatePlusTwoYears",
            "value": ""
        },
        {
            "key": "isoDatePlusOneMonth",
            "value": ""
        },
        {
            "key": "isoDatePlusOneMonthOneYear",
            "value": ""
        },
        {
            "key": "processingStatusCode01",
            "value": ""
        },
        {
            "key": "processingStatusCode00",
            "value": ""
        },
        {
            "key": "divisionCode03",
            "value": ""
        },
        {
            "key": "unitOfMeasureCodeM3",
            "value": ""
        }
    ]
}
