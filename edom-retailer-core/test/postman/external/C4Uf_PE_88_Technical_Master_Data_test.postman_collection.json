{
    "info": {
        "_postman_id": "6b25ff83-43fb-44ff-b589-74af638a4a48",
        "name": "C4Uf_PE_88_Technical_Master_Data_test.postman_collection.json",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "FEATURE FLAGS",
            "item": [
                {
                    "name": "GET: all feature flags",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"/api/v1/features/export\", function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200,201,204,400,401,402,403,404,500,501,502,503]);",
                                    "",
                                    "    const responseJSON = pm.response.json();",
                                    "    const { flags } = responseJSON;",
                                    "",
                                    "    const tenantId = pm.environment.get('tenant_id');",
                                    "",
                                    "    const flagsHashMap = flags.reduce((hashMap, flag) => {",
                                    "        const tenantShipment = flag.directShipments",
                                    "            .find(directShipment => directShipment.receivers",
                                    "                .some(receiver => receiver === tenantId)",
                                    "            );",
                                    "        ",
                                    "        let variationIndex = !flag.enabled ",
                                    "            ? flag.offVariationIndex ",
                                    "            : tenantShipment ",
                                    "                ? tenantShipment.variationIndex ",
                                    "                : flag.defaultVariationIndex;",
                                    "        ",
                                    "",
                                    "        hashMap[flag.id] = flag.variations[variationIndex] === 'true';",
                                    "        return hashMap;",
                                    "    }, {});",
                                    "",
                                    "    console.log(flagsHashMap['technical-master-data-service-1.5']);",
                                    "",
                                    "    pm.environment.set('env_featureFlag_TMD_1.5', flagsHashMap['technical-master-data-service-1.5']);",
                                    "",
                                    "    console.log(pm.environment.get('env_featureFlag_TMD_1.5'));",
                                    "});",
                                    "",
                                    "",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{feature_flag_uri}}/api/v1/features/export",
                            "host": ["{{feature_flag_uri}}"],
                            "path": ["api", "v1", "features", "export"]
                        }
                    },
                    "response": []
                }
            ],
            "auth": {
                "type": "basic",
                "basic": [
                    {
                        "key": "password",
                        "value": "{{feature_flag_password}}",
                        "type": "string"
                    },
                    {
                        "key": "username",
                        "value": "{{feature_flag_username}}",
                        "type": "string"
                    }
                ]
            },
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [""]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [""]
                    }
                }
            ]
        },
        {
            "name": "MCM JWT Token",
            "item": [
                {
                    "name": "MCM JWT Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "",
                                    "var jsonData = JSON.parse(responseBody);",
                                    "if(jsonData && jsonData.access_token){",
                                    "    postman.setEnvironmentVariable(\"jwt_MCM_Tech_Data\", jsonData.access_token);",
                                    "}",
                                    "",
                                    "pm.test(\"Successful POST request\", function () {",
                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                    "});",
                                    "",
                                    "if (pm.environment.get('env_featureFlag_TMD_1.5')) {",
                                    "    postman.setNextRequest(\"GET Service Document\");",
                                    "}  else {",
                                    "    postman.setNextRequest(\"GET Service Document - Old\");",
                                    "} ",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [""],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "X-CorrelationID",
                                "value": "",
                                "disabled": true
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "response_type",
                                    "value": "token",
                                    "type": "text"
                                },
                                {
                                    "key": "grant_type",
                                    "value": "client_credentials",
                                    "type": "text"
                                },
                                {
                                    "key": "client_id",
                                    "value": "{{clientid_MCM}}",
                                    "type": "text"
                                },
                                {
                                    "key": "client_secret",
                                    "value": "{{clientsecret_MCM}}",
                                    "type": "text"
                                },
                                {
                                    "key": "scope",
                                    "value": "",
                                    "type": "text"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{authurl}}/oauth/token",
                            "host": ["{{authurl}}"],
                            "path": ["oauth", "token"]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "SingleRegister Batched - Create Instance and Configure",
            "item": [
                {
                    "name": "Service Metadata",
                    "item": [
                        {
                            "name": "GET Service Document",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "pm.test(\"Get Service Document check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Service Metadata",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "    pm.test(\"Get Service Metadata check\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$metadata",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$metadata"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Read MCM Classes & MCM Models",
                    "item": [
                        {
                            "name": "GET All MCM Classes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "    pm.test(\"Get MCM Classes check\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "});\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MeasurementConceptClasses?$orderby=idText&$select=idText,name,description",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MeasurementConceptClasses"],
                                    "query": [
                                        {
                                            "key": "$orderby",
                                            "value": "idText",
                                            "description": "Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)"
                                        },
                                        {
                                            "key": "$select",
                                            "value": "idText,name,description",
                                            "description": "Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Model \"B_S_M1 - Standard-Bezug Strom\" with maLos, MClass(Melos, MTasks, MeteringProcedures, Actors) Copy",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "    pm.test(\"Get Model B_S_M1 check\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)?$expand=marketLocations,measurementClass($expand=meteringLocations($expand=meteringTasks($expand=meteringProcedures)),actors)",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": [
                                        "MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)"
                                    ],
                                    "query": [
                                        {
                                            "key": "$skip",
                                            "value": "71282403",
                                            "description": "Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$search",
                                            "value": "aute sit velit ex",
                                            "description": "Search items by search phrases, see [Searching](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionsearch)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$filter",
                                            "value": "aute sit velit ex",
                                            "description": "Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$count",
                                            "value": "true",
                                            "description": "Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$orderby",
                                            "value": "description,conceptType_code",
                                            "description": "Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$select",
                                            "value": "name,status_code",
                                            "description": "Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$expand",
                                            "value": "marketLocations,measurementClass($expand=meteringLocations($expand=meteringTasks($expand=meteringProcedures)),actors)"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Model Formula \"B_S_M1\" /MaLos /Formula /Usages",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "    pm.test(\"Get Model Formula B_S_M1 check\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)?$expand=marketLocations($expand=calculationRules($expand=formula($expand=formulaSteps),usages)),modelOperands",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": [
                                        "MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)"
                                    ],
                                    "query": [
                                        {
                                            "key": "$skip",
                                            "value": "71282403",
                                            "description": "Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$search",
                                            "value": "aute sit velit ex",
                                            "description": "Search items by search phrases, see [Searching](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionsearch)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$filter",
                                            "value": "aute sit velit ex",
                                            "description": "Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$count",
                                            "value": "true",
                                            "description": "Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$orderby",
                                            "value": "description,conceptType_code",
                                            "description": "Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$select",
                                            "value": "name,status_code",
                                            "description": "Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$expand",
                                            "value": "marketLocations($expand=calculationRules($expand=formula($expand=formulaSteps),usages)),modelOperands"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "New Instance from MCM Model \"B_S_M1 Standard Bezug Strom\"",
                    "item": [
                        {
                            "name": "Create Instance with Reference to Model \"B_S_M1\"",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Creation of Instance Check\", function () {",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);",
                                            "});",
                                            "",
                                            "var responseCode = pm.response.code;",
                                            "if ( responseCode ===  200 || responseCode ===  201){",
                                            "",
                                            "var jsonResponse = JSON.parse(responseBody);",
                                            "var instanceUuid = jsonResponse?.id;",
                                            "var addressId = jsonResponse?.addresses[0]?.id;",
                                            "var meloId = jsonResponse?.meteringLocations[0]?.id;",
                                            "var maloId = jsonResponse?.marketLocations[0]?.id;",
                                            "var changeProcessId = jsonResponse?.changeProcesses[0]?.id;",
                                            "var meloPDId = jsonResponse?.changeProcesses[0]?.processData?.meteringLocationsPD[0]?.id;",
                                            "var meloTaskPDId = jsonResponse?.changeProcesses[0]?.processData?.meteringLocationsPD[0]?.meteringTasksPD[0]?.id;",
                                            "var maloPDId = jsonResponse?.changeProcesses[0]?.processData?.marketLocationsPD[0]?.id;",
                                            "var actorId1 = jsonResponse?.actors[0]?.id;",
                                            "var actorId2 = jsonResponse?.actors[1]?.id;",
                                            "var meloTaskId = jsonResponse?.meteringLocations[0]?.meteringTasks[0]?.id;",
                                            "var maloCalcRuleId = jsonResponse?.marketLocations[0]?.calculationRules[0]?.id;",
                                            "pm.environment.set(\"instanceId\", instanceUuid);",
                                            "pm.environment.set(\"addressId-1\", addressId);",
                                            "pm.environment.set(\"meloId-1\", meloId);",
                                            "pm.environment.set(\"maloId-1\", maloId);",
                                            "pm.environment.set(\"meloPDId-1\", meloPDId);",
                                            "pm.environment.set(\"meloTaskPDId-1\", meloTaskPDId);",
                                            "pm.environment.set(\"maloPDId-1\", maloPDId);",
                                            "pm.environment.set(\"changeProcessId-1\", changeProcessId);",
                                            "pm.environment.set(\"actorId-1\", actorId1);",
                                            "pm.environment.set(\"actorId-2\", actorId2);",
                                            "pm.environment.set(\"meloTaskId\", meloTaskId);",
                                            "pm.environment.set(\"maloCalcRuleId\", maloCalcRuleId);",
                                            "} else {",
                                            "    console.log(\"MCM System is down\");",
                                            "    postman.setNextRequest(0);",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "var lv_timestamp = new Date();\r",
                                            "\r",
                                            "var lv_month = lv_timestamp.getMonth()+1;\r",
                                            "var lv_date =  lv_timestamp.getDate();\r",
                                            "if (lv_month < 10){ lv_month = '0'+lv_month; }\r",
                                            "if (lv_date < 10){ lv_date = '0'+lv_date; }\r",
                                            "var lv_installation_date = \r",
                                            "\r",
                                            "     ( lv_timestamp.getFullYear() +'-'+ \r",
                                            "\r",
                                            "       lv_month +'-'+\r",
                                            "\r",
                                            "       lv_date );\r",
                                            "\r",
                                            "pm.environment.set(\"lv_installation_date\", lv_installation_date);\r",
                                            "//Add sleep here\r",
                                            "/*setTimeout(function(){ \r",
                                            "\r",
                                            "            console.log('Delay for 10secs');\r",
                                            "                }, 10000);\r",
                                            "})*/"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"description\": \"Instanz Strom Bezug 2108\",\n    \"measurementModel_id\": \"ffffffff-2222-2222-2222-100000000001\",\n    \"leadingGrid_code\": \"SNE956610053427\",\n    \"division_code\": \"EL\",\n    \"orderer_code\": \"9903692562385\",\n    \"addresses\": [\n        {\n            \"country_code\": \"DE\",\n            \"cityID\": \"WALLDORF\",\n            \"cityName\": \"Walldorf\",\n            \"postalCode\": \"69190\",\n            \"streetID\": \"RINGSTRASSE\",\n            \"streetName\": \"Ringstrasse\",\n            \"houseNumber\": \"100\",\n            \"floorNumber\": \"5\",\n            \"supplement\": \"5.Stock App 67\"\n        }\n    ],\n    \"changeProcesses\": [\n        {\n            \"externalOrderId\": \"4711\",\n            \"processData\": {\n                \"customerRequestDate\": \"{{lv_installation_date}}\",\n                \"leadingConnectionOwner\": \"0815\",\n                \"leadingConnectionUser\": \"0815\",\n                \"note\": \"Place any note for the new instance here\"\n            },\n            \"instanceCharacteristics\": [\n                {\n                    \"entityType_code\": \"MCIMarketLocations\",\n                    \"characteristic_code\": \"selectMeteringProcedureType\",\n                    \"modelEntityId\": \"aaaaaaaa-2222-3333-1111-100000000001\",\n                    \"value\": \"SLP\"\n                },\n                {\n                    \"entityType_code\": \"MCICalculationRules\",\n                    \"characteristic_code\": \"selectMarketLocationUsageType\",\n                    \"modelEntityId\": \"ffff1111-2222-3333-1111-100000000001\",\n                    \"value\": \"GRIDUSE\"\n                },\n                {\n                    \"entityType_code\": \"MCICalculationRules\",\n                    \"characteristic_code\": \"selectMarketLocationUsageType\",\n                    \"modelEntityId\": \"ffff1111-2222-3333-1111-100000000001\",\n                    \"value\": \"OUBILL\"\n                },\n                {\n                    \"entityType_code\": \"MCICalculationRules\",\n                    \"characteristic_code\": \"selectMarketLocationUsageType\",\n                    \"modelEntityId\": \"ffff1111-2222-3333-1111-100000000001\",\n                    \"value\": \"SETTLE\"\n                },\n                {\n                    \"entityType_code\": \"MCIMeteringTask\",\n                    \"characteristic_code\": \"selectPlannedMeteringProcedure\",\n                    \"modelEntityId\": \"bbb50001-5555-5555-5555-501010000001\",\n                    \"value\": \"SLP\"\n                }\n            ]\n        }\n    ]\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Instance",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "    pm.test(\"Get Instance check\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Activities @ INITIAL - CREATE",
                    "item": [
                        {
                            "name": "DSO - Batched Configuration Activities for Process Status INITIAL/CREATE",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/*\r",
                                            "1. DSO -Assign address to Instance / MeLo / Malo\r",
                                            "2. DSO - Metering Location (grid level, lossFactor, disconnectable, transformerRequired)\r",
                                            "3. DSO - Metering Location - Process data\r",
                                            "4. DSO - Metering Tasks - Process data\r",
                                            "5. DSO - Market Location - Process data\r",
                                            "6. DSO - Actors (gridLevel)\r",
                                            "\r",
                                            "*/\r",
                                            "pm.test(\"Check for Configurtion Activities\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"leadingAddress_id\":\"{{addressId-1}}\"}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"address_id\":\"{{addressId-1}}\"}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/marketLocations({{maloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"address_id\":\"{{addressId-1}}\"}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"gridLevel_code\": \"MV\",\n    \"disconnectable\": false,\n    \"transformerRequired\": false,\n    \"lossTransformer\": \"0\",\n    \"lossLine\": \"0\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"classification\": \"ANY\",\n    \"note\": \"Any note on this metering location\",\n    \"volumeCorrector\": false,\n    \"meterOperator\": \"9903692607804\",\n    \"nominalCapacity\": \"42\",\n    \"measuringType_code\": \"MMU\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/meteringTasksPD({{meloTaskPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"rate_code\": \"ET\",\n    \"periodConsumption\": \"789\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"classification\": \"ANY\",\n    \"connectionUser\": \"0815\",\n    \"connectionOwner\": \"0815\",\n    \"forecastBasis_code\": \"CODE\",\n    \"consumptionDistribution\": \"some\",\n    \"flatrateType_code\": \"CODE\",\n    \"flatrate\": \"some\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/actors({{actorId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"gridLevel_code\":\"LV\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/actors({{actorId-2}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"gridLevel_code\":\"LV\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/marketLocations({{maloId-1}})/calculationRules({{maloCalcRuleId}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"registerCode\": \"1-1:1.9.0\"}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"forecastBasis_code\": \"H0\"}\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "DSO - oData action notifyInitialDataEntryReady()",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Notify Initial Data Entry Ready\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/MCMService.notifyInitialDataEntryReady HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Instance Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get Instance Status check\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "// pm.test(\"Check for No Error in Response\", function () {\r",
                                            "//     // pm.expect(pm.response.text()).not.to.include(\"400 Bad Request\");\r",
                                            "// });\r",
                                            "// const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "// if (hasErrors) {\r",
                                            "//     postman.setNextRequest(\"MCM JWT Token-DoubleRegister\");\r",
                                            "// }\r",
                                            "// var responseCode = pm.response.code;\r",
                                            "// if ( responseCode ==  200 || 201 ) {\r",
                                            "// var jsonResponse = JSON.parse(responseBody);\r",
                                            "// var InstallationID = '';\r",
                                            "// // console.log(\"Resp\",jsonResponse);\r",
                                            "// // pm.globals.set(\"InstallationID\", instalId);\r",
                                            "// pm.test(\" Response instanceStatus_code must be NEW\", function () {\r",
                                            "// pm.expect( jsonResponse.status.instanceStatus_code).to.eql(\"NEW\");\r",
                                            "// }\r",
                                            "// );\r",
                                            "// pm.test(\" Response processStatus_code must be START_NEW\", function () {\r",
                                            "// pm.expect( jsonResponse.status.processStatus_code).to.eql(\"START_NEW\" );\r",
                                            "// }\r",
                                            "// );\r",
                                            "// } else {\r",
                                            "//     console.log(\"status after Configuration not as expected(New/Start_New)\");\r",
                                            "// }\r",
                                            "\r",
                                            "\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "status"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Activities @ IN_CREATION - STARTED",
                    "item": [
                        {
                            "name": "ISU - Set POD Id on MaLo",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set POD ID on MaLo Request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            " var lv_timestamp = new Date();\r",
                                            "\r",
                                            "var lv_timestamp_utc = \r",
                                            "     ( lv_timestamp.getYear() +''+ \r",
                                            "       (lv_timestamp.getMonth()+1)  +''+\r",
                                            "       lv_timestamp.getDate() +''+\r",
                                            "        lv_timestamp.getUTCHours()+''+\r",
                                            "       lv_timestamp.getUTCMinutes()+''+\r",
                                            "       lv_timestamp.getUTCSeconds() );\r",
                                            "var generated_num = lv_timestamp_utc.substring(1);\r",
                                            "var marketLocationId = generated_num;\r",
                                            "var meteringLocationId = \"DE002179434010000000000\"+ marketLocationId;\r",
                                            "// console.log(meteringLocationId);\r",
                                            "pm.environment.set(\"meteringLocationId\", marketLocationId);\r",
                                            "pm.environment.set(\"marketLocationId\", marketLocationId);\r",
                                            "pm.environment.set(\"InstallationID\", marketLocationId);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/marketLocations({{maloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"marketLocationId\": \"{{marketLocationId}}\"\n}\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "ISU - oData action notifyMarketLocationIdentifierReady()",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Notify Market Location Identifier Ready\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}})/MCMService.notifyMarketLocationIdentifierReady HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "ISU - Set POD Id on MeLo",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set POD ID on MeLo Request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [""],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"meteringLocationId\": \"{{meteringLocationId}}\"\n}\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "ISU - oData action notifyMeteringLocationIdentifierReady()",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set Metering Location Identifier Ready\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/MCMService.notifyMeteringLocationIdentifierReady HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "ISU - oData action notifyLocationIdentifiersReady()",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set Location Identifiers Ready\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/MCMService.notifyLocationIdentifiersReady HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Instance Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get Instance Status\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "status"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Activities @ IN_CREATION - IDENTIFIERS_OK",
                    "item": [
                        {
                            "name": "DSO - oData action notifyFinalDataEntryReady()",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set Final Data Entry Ready\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/MCMService.notifyFinalDataEntryReady HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Instance Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get Instance Status\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "status"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Activities @ IN_CREATION - EXTLOC_OK",
                    "item": [
                        {
                            "name": "ISU - Set Installation Date and Serial ID",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set Serial ID\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [""],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"installationDate\": \"{{lv_installation_date}}\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"deviceSerialId\": \"{{InstallationID}}\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}})/meteringTasks({{meloTaskId}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"registerCode\": \"1-1:1.8.0\"}\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "ISU - oData action notifyMasterDataReadyFor*Location()",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set Master Data Ready\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/MCMService.notifyMasterDataReadyForMeteringLocation HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}})/MCMService.notifyMasterDataReadyForMarketLocation HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Complete Instance",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get Complete Instance\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "var responseCode = pm.response.code;\r",
                                            "if ( responseCode ==  200 || 201 ) {\r",
                                            "var jsonResponse = JSON.parse(responseBody);\r",
                                            "var InstallationID = '';\r",
                                            "\r",
                                            "pm.test(\" Response meteringLocationId is set to Installation ID\", function () {\r",
                                            "    pm.environment.set(\"TMDActionIDSingleRegister\", jsonResponse?.id);\r",
                                            "    pm.environment.set(\"InstallationID\", jsonResponse?.meteringLocations[0]?.meteringLocationId);\r",
                                            "}\r",
                                            ");\r",
                                            "}\r",
                                            "else{\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "TMD Action Copy",
                    "item": [
                        {
                            "name": "C4E JWT",
                            "item": [
                                {
                                    "name": "C4E JWT",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "var jsonData = JSON.parse(responseBody);",
                                                    "if(jsonData && jsonData.access_token){",
                                                    "    postman.setEnvironmentVariable(\"jwt_C4E\", jsonData.access_token);",
                                                    "}",
                                                    "",
                                                    "pm.test(\"Get C4E JWT token\", function () {",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                                    "});"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        },
                                        {
                                            "listen": "prerequest",
                                            "script": {
                                                "exec": [""],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "auth": {
                                            "type": "noauth"
                                        },
                                        "method": "POST",
                                        "header": [
                                            {
                                                "key": "Accept",
                                                "value": "application/json"
                                            },
                                            {
                                                "key": "X-CorrelationID",
                                                "value": "",
                                                "disabled": true
                                            },
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "body": {
                                            "mode": "urlencoded",
                                            "urlencoded": [
                                                {
                                                    "key": "response_type",
                                                    "value": "token",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "grant_type",
                                                    "value": "client_credentials",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_id",
                                                    "value": "{{clientid_C4E}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_secret",
                                                    "value": "{{clientsecret_C4E}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "scope",
                                                    "value": "",
                                                    "type": "text"
                                                }
                                            ]
                                        },
                                        "url": {
                                            "raw": "{{authurlC4E}}/oauth/token",
                                            "host": ["{{authurlC4E}}"],
                                            "path": ["oauth", "token"]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "Retailer JWT",
                            "item": [
                                {
                                    "name": "Retailer JWT Token",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "var jsonData = JSON.parse(responseBody);",
                                                    "",
                                                    "if(jsonData && jsonData.access_token){",
                                                    "    postman.setEnvironmentVariable(\"jwt\", jsonData.access_token);",
                                                    "}",
                                                    "",
                                                    "pm.test(\"Get Retailer JWT\", function () {",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                                    "});",
                                                    "console.log('Delay for 50secs');",
                                                    "//Add sleep here",
                                                    "setTimeout(function(){ ",
                                                    "    console.log('Delay over');",
                                                    "}, 50000);"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        },
                                        {
                                            "listen": "prerequest",
                                            "script": {
                                                "exec": [""],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "auth": {
                                            "type": "noauth"
                                        },
                                        "method": "POST",
                                        "header": [
                                            {
                                                "key": "Accept",
                                                "value": "application/json"
                                            },
                                            {
                                                "key": "X-CorrelationID",
                                                "value": "",
                                                "disabled": true
                                            },
                                            {
                                                "key": "Content-Type",
                                                "value": "application/x-www-form-urlencoded"
                                            }
                                        ],
                                        "body": {
                                            "mode": "urlencoded",
                                            "urlencoded": [
                                                {
                                                    "key": "response_type",
                                                    "value": "token",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "grant_type",
                                                    "value": "client_credentials",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_id",
                                                    "value": "{{uaa_client_id}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_secret",
                                                    "value": "{{uaa_client_secret}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "scope",
                                                    "value": "",
                                                    "type": "text"
                                                }
                                            ]
                                        },
                                        "url": {
                                            "raw": "{{jwtProtocol}}://{{uaa-domain}}/oauth/token",
                                            "protocol": "{{jwtProtocol}}",
                                            "host": ["{{uaa-domain}}"],
                                            "path": ["oauth", "token"]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "Check Meter Lifecycle Data in C4E",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD');\r",
                                            "\r",
                                            "pm.test(\"C4E Meter Lifecycle Data. Successful POST request \" + jiraIssue, function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "})\r",
                                            "  var jsonObject = xml2Json(responseBody);\r",
                                            "  var SerialID = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:serialNumber\"];\r",
                                            "  var mRId = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:mRID\"];\r",
                                            "  var UsagePoint = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePoint\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                            "  var UsagePointLocation = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePointLocation\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                            " \r",
                                            "  console.log(\"********************************\");\r",
                                            "  console.log(\"SerialID:\", SerialID);\r",
                                            "  console.log(\"MRID:\", mRId);\r",
                                            "  console.log(\"UsagePoint:\", UsagePoint);\r",
                                            "  console.log(\"UsagePointLocation:\", UsagePointLocation);\r",
                                            "  console.log(\"MRID_Flag:\", pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\"));\r",
                                            "\r",
                                            "  if (SerialID && mRId) {\r",
                                            "    if(pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\") === true){\r",
                                            "        pm.environment.set(\"InstallationID\",mRId)\r",
                                            "    }else{\r",
                                            "        pm.environment.set(\"InstallationID\",SerialID)\r",
                                            "    }\r",
                                            "    console.log(\"Success: Technical Master Data is created successfully in C4E Via Event Mesh\");\r",
                                            "    postman.setNextRequest(\"ISU - oData action notifyDeviceInstallationReady() on melo PD\");\r",
                                            " } else {\r",
                                            "    console.log(\"Error: Failed to create Technical Master Data in C4E Via Event Mesh\");\r",
                                            "    postman.setNextRequest(\"ActionTMDCreateSingleRegister\");\r",
                                            " }\r",
                                            "   \r",
                                            "  console.log(\"********************************\");"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{jwt_C4E}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "AuthorizationcoreOnly",
                                        "type": "text",
                                        "value": "Bearer",
                                        "disabled": true
                                    },
                                    {
                                        "key": "coreOnly",
                                        "value": "false",
                                        "type": "text",
                                        "disabled": true
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<msg:RequestMessage xmlns:msg=\"http://iec.ch/TC57/2011/schema/message\" xmlns:m=\"http://iec.ch/TC57/CIM-c4e#\">\r\n    <msg:Header>\r\n        <msg:Verb>get</msg:Verb>\r\n        <msg:Noun>MeterLifecycleDataSet</msg:Noun>\r\n    </msg:Header>\r\n    <msg:Request>\r\n    <m:GetMeterLifecycleDataSet>\r\n        <m:UsagePoint>\r\n            <m:Names>\r\n                <m:name>{{InstallationID}}</m:name>\r\n                <m:NameType>\r\n                    <m:name>UtilitiesPointOfDeliveryPartyID</m:name>\r\n                    <m:NameTypeAuthority>\r\n                        <m:name>SAP</m:name>\r\n                    </m:NameTypeAuthority>\r\n                </m:NameType>\r\n            </m:Names>\r\n        </m:UsagePoint>\r\n    </m:GetMeterLifecycleDataSet>\r\n</msg:Request>\r\n</msg:RequestMessage>",
                                    "options": {
                                        "raw": {
                                            "language": "xml"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{c4eEDS}}/api/v1/core",
                                    "host": ["{{c4eEDS}}"],
                                    "path": ["api", "v1", "core"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "ActionTMDCreateSingleRegister",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD')\r",
                                            "pm.test(\"TechnicalMasterData Create. Successful POST request \" + jiraIssue, function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{jwt}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n\"id\": \"{{TMDActionIDSingleRegister}}\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/internal/technicalmasterdata/generate",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "internal",
                                        "technicalmasterdata",
                                        "generate"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Check Meter Lifecycle Data in C4E After Action",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD');\r",
                                            "\r",
                                            "pm.test(\"C4E Meter Lifecycle Data. Successful POST request \" + jiraIssue, function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "})\r",
                                            "  var jsonObject = xml2Json(responseBody);\r",
                                            "  var SerialID = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:serialNumber\"];\r",
                                            "  var mRId = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:mRID\"];\r",
                                            "  var UsagePoint = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePoint\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                            "  var UsagePointLocation = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePointLocation\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                            " \r",
                                            "  console.log(\"********************************\");\r",
                                            "  console.log(\"SerialID:\", SerialID);\r",
                                            "  console.log(\"MRID:\", mRId);\r",
                                            "  console.log(\"UsagePoint:\", UsagePoint);\r",
                                            "  console.log(\"UsagePointLocation:\", UsagePointLocation);\r",
                                            "  console.log(\"MRID_Flag:\", pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\"));\r",
                                            "\r",
                                            "pm.test(\"C4E SerailID .Successful POST request ${jiraIssue}\", function () {\r",
                                            "  pm.expect(jsonObject[\"msg:ResponseMessage\"][\"msg:Payload\"][\"m:MeterLifecycleDataSet\"][\"m:Container\"][\"m:Meter\"][\"m:serialNumber\"]);\r",
                                            "});\r",
                                            "  if (SerialID && mRId) {\r",
                                            "    if(pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\") === true){\r",
                                            "        pm.environment.set(\"InstallationID\",mRId)\r",
                                            "    }else{\r",
                                            "        pm.environment.set(\"InstallationID\",SerialID)\r",
                                            "    }\r",
                                            "    console.log(\"Success: Technical Master Data is created successfully in C4E Via TMD Action\");\r",
                                            " } else {\r",
                                            "    console.log(\"Error: Failed to create Technical Master Data in C4E Via TMD Action\");\r",
                                            "    postman.setNextRequest(0);\r",
                                            " }\r",
                                            "   \r",
                                            "  console.log(\"********************************\");"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{jwt_C4E}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "AuthorizationcoreOnly",
                                        "type": "text",
                                        "value": "Bearer",
                                        "disabled": true
                                    },
                                    {
                                        "key": "coreOnly",
                                        "value": "false",
                                        "type": "text",
                                        "disabled": true
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<msg:RequestMessage xmlns:msg=\"http://iec.ch/TC57/2011/schema/message\" xmlns:m=\"http://iec.ch/TC57/CIM-c4e#\">\r\n    <msg:Header>\r\n        <msg:Verb>get</msg:Verb>\r\n        <msg:Noun>MeterLifecycleDataSet</msg:Noun>\r\n    </msg:Header>\r\n    <msg:Request>\r\n    <m:GetMeterLifecycleDataSet>\r\n        <m:UsagePoint>\r\n            <m:Names>\r\n                <m:name>{{InstallationID}}</m:name>\r\n                <m:NameType>\r\n                    <m:name>UtilitiesPointOfDeliveryPartyID</m:name>\r\n                    <m:NameTypeAuthority>\r\n                        <m:name>SAP</m:name>\r\n                    </m:NameTypeAuthority>\r\n                </m:NameType>\r\n            </m:Names>\r\n        </m:UsagePoint>\r\n    </m:GetMeterLifecycleDataSet>\r\n</msg:Request>\r\n</msg:RequestMessage>",
                                    "options": {
                                        "raw": {
                                            "language": "xml"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{c4eEDS}}/api/v1/core",
                                    "host": ["{{c4eEDS}}"],
                                    "path": ["api", "v1", "core"]
                                }
                            },
                            "response": []
                        }
                    ],
                    "auth": {
                        "type": "bearer",
                        "bearer": [
                            {
                                "key": "token",
                                "value": "{{jwt_C4E}}",
                                "type": "string"
                            }
                        ]
                    },
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [""]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [""]
                            }
                        }
                    ]
                },
                {
                    "name": "Activities @ IN_CREATION - EXTMD_OK",
                    "item": [
                        {
                            "name": "ISU - oData action notifyDeviceInstallationReady() on melo PD",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set Device Installation Ready\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/MCMService.notifyDeviceInstallationReady HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Instance Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get Instance Status\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "status"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Activities @ INSTALLED - DEVICES_CREATED",
                    "item": [
                        {
                            "name": "ISU - Report Commercial setup date",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set Commercial Setup Date\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"commercialSetupDate\": \"{{lv_installation_date}}\"\n}\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "ISU - oData action notifyMarketLocationComplete()",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set Market Location Complete\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}})/MCMService.notifyMarketLocationComplete HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Instance Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get Instance Status\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "status"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "ISU - oData action notifyMarketLocationsComplete()",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set Market Locations Complete\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/MCMService.notifyMarketLocationsComplete HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Instance Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get Instance Status\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "status"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Activities @ INSTALLED - LOCATIONS_CREATED",
                    "item": [
                        {
                            "name": "Check Process Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get Instance Status\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "// var jsonResponse = JSON.parse(responseBody);\r",
                                            "// var instStatusCode = jsonResponse.status.instanceStatus_code;\r",
                                            "// var processStatusCode = jsonResponse.status.processStatus_code;\r",
                                            "// var instanceIdText = jsonResponse.idText;\r",
                                            "// var instanceVersion = jsonResponse.version;\r",
                                            "// tests[\"HTTP GET Instance Status for [\" + instanceIdText + \"(\" + instanceVersion + \")] (Expected: 200 OK): \" + responseCode.code] = responseCode.code === 200;\r",
                                            "// tests[\"CHECK Instance Status (Expected = INSTALLED):  \"  + instStatusCode ] = instStatusCode === \"INSTALLED\";\r",
                                            "// tests[\"CHECK PROCESS Status (Expected = LOCATIONS_CREATED): \"  + processStatusCode ] = processStatusCode === \"LOCATIONS_CREATED\";"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "status"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Activities @ ACTIVE - FINALIZED",
                    "item": [
                        {
                            "name": "Check Instance Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get Instance Status\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "var jsonResponse = JSON.parse(responseBody);\r",
                                            "var instStatusCode = jsonResponse.status.instanceStatus_code;\r",
                                            "var processStatusCode = jsonResponse.status.processStatus_code;\r",
                                            "var instanceIdText = jsonResponse.idText;\r",
                                            "var instanceVersion = jsonResponse.version;\r",
                                            "tests[\"HTTP GET Instance Status for [\" + instanceIdText + \"(\" + instanceVersion + \")] (Expected: 200 OK): \" + responseCode.code] = responseCode.code === 200;\r",
                                            "tests[\"CHECK Instance Status (Expected = ACTIVE):  \"  + instStatusCode ] = instStatusCode === \"ACTIVE\";\r",
                                            "tests[\"CHECK PROCESS Status (Expected = FINALIZED): \"  + processStatusCode ] = processStatusCode === \"FINALIZED\";\r",
                                            "\r",
                                            "postman.setNextRequest(0);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "status"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                }
            ],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [""]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [""]
                    }
                }
            ]
        },
        {
            "name": "Old SingleRegister Batched - Create Instance and Configure",
            "item": [
                {
                    "name": "Service Metadata",
                    "item": [
                        {
                            "name": "GET Service Document - Old",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "pm.test(\"Get Service Document check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Service Metadata - Old",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "    pm.test(\"Get Service Metadata check\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$metadata",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$metadata"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Read MCM Classes & MCM Models",
                    "item": [
                        {
                            "name": "GET All MCM Classes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "    pm.test(\"Get MCM Classes check\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MeasurementConceptClasses?$orderby=idText&$select=idText,name,description",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MeasurementConceptClasses"],
                                    "query": [
                                        {
                                            "key": "$orderby",
                                            "value": "idText",
                                            "description": "Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)"
                                        },
                                        {
                                            "key": "$select",
                                            "value": "idText,name,description",
                                            "description": "Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Model \"B_S_M1 - Standard-Bezug Strom\" with maLos, MClass(Melos, MTasks, MeteringProcedures, Actors)",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "    pm.test(\"Get Model B_S_M1 check\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)?$expand=marketLocations,measurementClass($expand=meteringLocations($expand=meteringTasks($expand=meteringProcedures)),actors)",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": [
                                        "MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)"
                                    ],
                                    "query": [
                                        {
                                            "key": "$skip",
                                            "value": "71282403",
                                            "description": "Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$search",
                                            "value": "aute sit velit ex",
                                            "description": "Search items by search phrases, see [Searching](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionsearch)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$filter",
                                            "value": "aute sit velit ex",
                                            "description": "Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$count",
                                            "value": "true",
                                            "description": "Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$orderby",
                                            "value": "description,conceptType_code",
                                            "description": "Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$select",
                                            "value": "name,status_code",
                                            "description": "Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$expand",
                                            "value": "marketLocations,measurementClass($expand=meteringLocations($expand=meteringTasks($expand=meteringProcedures)),actors)"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Model Formula \"B_S_M1\" /MaLos /Formula /Usages",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "    pm.test(\"Get Model Formula B_S_M1 check\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)?$expand=marketLocations($expand=calculationRules($expand=formula($expand=formulaSteps),usages)),modelOperands",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": [
                                        "MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)"
                                    ],
                                    "query": [
                                        {
                                            "key": "$skip",
                                            "value": "71282403",
                                            "description": "Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$search",
                                            "value": "aute sit velit ex",
                                            "description": "Search items by search phrases, see [Searching](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionsearch)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$filter",
                                            "value": "aute sit velit ex",
                                            "description": "Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$count",
                                            "value": "true",
                                            "description": "Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$orderby",
                                            "value": "description,conceptType_code",
                                            "description": "Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$select",
                                            "value": "name,status_code",
                                            "description": "Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$expand",
                                            "value": "marketLocations($expand=calculationRules($expand=formula($expand=formulaSteps),usages)),modelOperands"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "New Instance from MCM Model \"B_S_M1 Standard Bezug Strom\"",
                    "item": [
                        {
                            "name": "Create Instance with Reference to Model \"B_S_M1\"",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Creation of Instance Check\", function () {",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);",
                                            "});",
                                            "",
                                            "var responseCode = pm.response.code;",
                                            "console.log(responseCode);",
                                            "if ( responseCode ===  200 || responseCode ===  201) {",
                                            "",
                                            "var jsonResponse = JSON.parse(responseBody);",
                                            "var instanceUuid = jsonResponse?.id;",
                                            "var addressId = jsonResponse?.addresses[0]?.id;",
                                            "var meloId = jsonResponse?.meteringLocations[0]?.id;",
                                            "var maloId = jsonResponse?.marketLocations[0]?.id;",
                                            "var changeProcessId = jsonResponse?.changeProcesses[0]?.id;",
                                            "var meloPDId = jsonResponse?.changeProcesses[0]?.processData?.meteringLocationsPD[0]?.id;",
                                            "var meloTaskPDId = jsonResponse?.changeProcesses[0]?.processData?.meteringLocationsPD[0]?.meteringTasksPD[0]?.id;",
                                            "var maloPDId = jsonResponse?.changeProcesses[0]?.processData?.marketLocationsPD[0]?.id;",
                                            "var actorId1 = jsonResponse?.actors[0]?.id;",
                                            "var actorId2 = jsonResponse?.actors[1]?.id;",
                                            "var meloTaskId = jsonResponse?.meteringLocations[0]?.meteringTasks[0]?.id;",
                                            "var maloCalcRuleId = jsonResponse?.marketLocations[0]?.calculationRules[0]?.id;",
                                            "pm.environment.set(\"instanceId\", instanceUuid);",
                                            "pm.environment.set(\"addressId-1\", addressId);",
                                            "pm.environment.set(\"meloId-1\", meloId);",
                                            "pm.environment.set(\"maloId-1\", maloId);",
                                            "pm.environment.set(\"meloPDId-1\", meloPDId);",
                                            "pm.environment.set(\"meloTaskPDId-1\", meloTaskPDId);",
                                            "pm.environment.set(\"maloPDId-1\", maloPDId);",
                                            "pm.environment.set(\"changeProcessId-1\", changeProcessId);",
                                            "pm.environment.set(\"actorId-1\", actorId1);",
                                            "pm.environment.set(\"actorId-2\", actorId2);",
                                            "pm.environment.set(\"meloTaskId\", meloTaskId);",
                                            "pm.environment.set(\"maloCalcRuleId\", maloCalcRuleId);",
                                            "} else {",
                                            "    console.log(\"MCM System is down\");",
                                            "    postman.setNextRequest(0);",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "var lv_timestamp = new Date();\r",
                                            "\r",
                                            "var lv_month = lv_timestamp.getMonth()+1;\r",
                                            "var lv_date =  lv_timestamp.getDate();\r",
                                            "if (lv_month < 10){ lv_month = '0'+lv_month; }\r",
                                            "if (lv_date < 10){ lv_date = '0'+lv_date; }\r",
                                            "var lv_installation_date = \r",
                                            "\r",
                                            "     ( lv_timestamp.getFullYear() +'-'+ \r",
                                            "\r",
                                            "       lv_month +'-'+\r",
                                            "\r",
                                            "       lv_date );\r",
                                            "\r",
                                            "pm.environment.set(\"lv_installation_date\", lv_installation_date);\r",
                                            "//Add sleep here\r",
                                            "// setTimeout(function(){ \r",
                                            "//     console.log('Delay for 10secs');\r",
                                            "// }, 10000);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"description\": \"Instanz Strom Bezug 2108\",\n    \"measurementModel_id\": \"ffffffff-2222-2222-2222-100000000001\",\n    \"leadingGrid_code\": \"SNE956610053427\",\n    \"division_code\": \"EL\",\n    \"orderer_code\": \"9903692562385\",\n    \"addresses\": [\n        {\n            \"country_code\": \"DE\",\n            \"cityID\": \"WALLDORF\",\n            \"cityName\": \"Walldorf\",\n            \"postalCode\": \"69190\",\n            \"streetID\": \"RINGSTRASSE\",\n            \"streetName\": \"Ringstrasse\",\n            \"houseNumber\": \"100\",\n            \"floorNumber\": \"5\",\n            \"supplement\": \"5.Stock App 67\"\n        }\n    ],\n    \"changeProcesses\": [\n        {\n            \"externalOrderId\": \"4711\",\n            \"processData\": {\n                \"customerRequestDate\": \"{{lv_installation_date}}\",\n                \"leadingConnectionOwner\": \"0815\",\n                \"leadingConnectionUser\": \"0815\",\n                \"note\": \"Place any note for the new instance here\"\n            },\n            \"instanceCharacteristics\": [\n                {\n                    \"entityType_code\": \"MCIMarketLocations\",\n                    \"characteristic_code\": \"selectMeteringProcedureType\",\n                    \"modelEntityId\": \"aaaaaaaa-2222-3333-1111-100000000001\",\n                    \"value\": \"SLP\"\n                },\n                {\n                    \"entityType_code\": \"MCICalculationRules\",\n                    \"characteristic_code\": \"selectMarketLocationUsageType\",\n                    \"modelEntityId\": \"ffff1111-2222-3333-1111-100000000001\",\n                    \"value\": \"GRIDUSE\"\n                },\n                {\n                    \"entityType_code\": \"MCICalculationRules\",\n                    \"characteristic_code\": \"selectMarketLocationUsageType\",\n                    \"modelEntityId\": \"ffff1111-2222-3333-1111-100000000001\",\n                    \"value\": \"OUBILL\"\n                },\n                {\n                    \"entityType_code\": \"MCICalculationRules\",\n                    \"characteristic_code\": \"selectMarketLocationUsageType\",\n                    \"modelEntityId\": \"ffff1111-2222-3333-1111-100000000001\",\n                    \"value\": \"SETTLE\"\n                },\n                {\n                    \"entityType_code\": \"MCIMeteringTask\",\n                    \"characteristic_code\": \"selectPlannedMeteringProcedure\",\n                    \"modelEntityId\": \"bbb50001-5555-5555-5555-501010000001\",\n                    \"value\": \"SLP\"\n                }\n            ]\n        }\n    ]\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Instance",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "    pm.test(\"Get MCM Instance check\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Activities@Process Status NEW",
                    "item": [
                        {
                            "name": "DSO - Batched Configuration Activities for Process Status New/Start_New",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/*\r",
                                            "1. DSO -Assign address to Instance / MeLo / Malo\r",
                                            "2. DSO - Metering Location (grid level, lossFactor, disconnectable, transformerRequired)\r",
                                            "3. DSO - Metering Location - Process data\r",
                                            "4. DSO - Metering Tasks - Process data\r",
                                            "5. DSO - Market Location - Process data\r",
                                            "6. DSO - Actors (gridLevel)\r",
                                            "\r",
                                            "*/\r",
                                            "pm.test(\"Check for Configurtion Activities\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"leadingAddress_id\":\"{{addressId-1}}\"}\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"address_id\":\"{{addressId-1}}\"}\n\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/marketLocations({{maloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"address_id\":\"{{addressId-1}}\"}\n\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"gridLevel_code\": \"MV\",\n    \"disconnectable\": false,\n    \"transformerRequired\": false,\n    \"lossTransformer\": \"0\",\n    \"lossLine\": \"0\"\n}\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"classification\": \"ANY\",\n    \"note\": \"Any note on this metering location\",\n    \"volumeCorrector\": false,\n    \"meterOperator\": \"9903692607804\",\n    \"nominalCapacity\": \"42\",\n    \"measuringType_code\": \"MMU\"\n}\n\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/meteringTasksPD({{meloTaskPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"rate_code\": \"ET\",\n    \"periodConsumption\": \"789\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"classification\": \"ANY\",\n    \"connectionUser\": \"0815\",\n    \"connectionOwner\": \"0815\",\n    \"forecastBasis_code\": \"CODE\",\n    \"consumptionDistribution\": \"some\",\n    \"flatrateType_code\": \"CODE\",\n    \"flatrate\": \"some\"\n}\n\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/actors({{actorId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"gridLevel_code\":\"LV\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/actors({{actorId-2}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"gridLevel_code\":\"LV\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}})/meteringTasks({{meloTaskId}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"registerCode\": \"1-1:1.8.0\"}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/marketLocations({{maloId-1}})/calculationRules({{maloCalcRuleId}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"registerCode\": \"1-1:1.9.0\"}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"forecastBasis_code\": \"H0\"}\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Instance Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get MCM Instance Status check\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "// pm.test(\"Check for No Error in Response\", function () {\r",
                                            "//     // pm.expect(pm.response.text()).not.to.include(\"400 Bad Request\");\r",
                                            "// });\r",
                                            "// const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "// if (hasErrors) {\r",
                                            "//     postman.setNextRequest(\"MCM JWT Token-DoubleRegister\");\r",
                                            "// }\r",
                                            "// var responseCode = pm.response.code;\r",
                                            "// if ( responseCode ==  200 || 201 ) {\r",
                                            "// var jsonResponse = JSON.parse(responseBody);\r",
                                            "// var InstallationID = '';\r",
                                            "// // console.log(\"Resp\",jsonResponse);\r",
                                            "// // pm.globals.set(\"InstallationID\", instalId);\r",
                                            "// pm.test(\" Response instanceStatus_code must be NEW\", function () {\r",
                                            "// pm.expect( jsonResponse.status.instanceStatus_code).to.eql(\"NEW\");\r",
                                            "// }\r",
                                            "// );\r",
                                            "// pm.test(\" Response processStatus_code must be START_NEW\", function () {\r",
                                            "// pm.expect( jsonResponse.status.processStatus_code).to.eql(\"START_NEW\" );\r",
                                            "// }\r",
                                            "// );\r",
                                            "// } else {\r",
                                            "//     console.log(\"status after Configuration not as expected(New/Start_New)\");\r",
                                            "// }\r",
                                            "\r",
                                            "\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "status"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Activities@Process Status START_NEW",
                    "item": [
                        {
                            "name": "ISU - Set POD Ids",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set POD IDs Request\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            " var lv_timestamp = new Date();\r",
                                            "\r",
                                            "var lv_timestamp_utc = \r",
                                            "     ( lv_timestamp.getYear() +''+ \r",
                                            "       (lv_timestamp.getMonth()+1)  +''+\r",
                                            "       lv_timestamp.getDate() +''+\r",
                                            "        lv_timestamp.getUTCHours()+''+\r",
                                            "       lv_timestamp.getUTCMinutes()+''+\r",
                                            "       lv_timestamp.getUTCSeconds() );\r",
                                            "var generated_num = lv_timestamp_utc.substring(1);\r",
                                            "var marketLocationId = generated_num;\r",
                                            "var meteringLocationId = \"DE002179434010000000000\"+ marketLocationId;\r",
                                            "// console.log(meteringLocationId);\r",
                                            "pm.environment.set(\"meteringLocationId\", marketLocationId);\r",
                                            "pm.environment.set(\"marketLocationId\", marketLocationId);\r",
                                            "pm.environment.set(\"InstallationID\", marketLocationId);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/marketLocations({{maloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"marketLocationId\": \"{{marketLocationId}}\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"meteringLocationId\": \"{{meteringLocationId}}\"\n}\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "DSO - oData action notifyInitialDataEntryDone()",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Notify Initial Data Entry Done\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/MCMService.notifyInitialDataEntryDone HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Instance Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get MCM Instance Status check\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "status"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Activities@Process Status EXTLOC_OK",
                    "item": [
                        {
                            "name": "ISU - Set Installation Date and Serial ID",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Set Serial ID\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [""],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"installationDate\": \"{{lv_installation_date}}\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"deviceSerialId\": \"{{InstallationID}}\"\n}\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "ISU - oData action notifyMasterDataReadyFor*Location()",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Notify Master Data Ready\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/MCMService.notifyMasterDataReadyForMeteringLocation HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}})/MCMService.notifyMasterDataReadyForMarketLocation HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Complete Instance",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get Complete Instance\", function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "var responseCode = pm.response.code;\r",
                                            "if ( responseCode ==  200 || 201 ) {\r",
                                            "var jsonResponse = JSON.parse(responseBody);\r",
                                            "var InstallationID = '';\r",
                                            "\r",
                                            "pm.test(\" Response meteringLocationId is set to Installation ID\", function () {\r",
                                            "    pm.environment.set(\"TMDActionIDSingleRegister\", jsonResponse?.id);\r",
                                            "    pm.environment.set(\"InstallationID\", jsonResponse?.meteringLocations[0]?.meteringLocationId);\r",
                                            "}\r",
                                            ");\r",
                                            "}\r",
                                            "else{\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "TMD Action",
                    "item": [
                        {
                            "name": "C4E JWT",
                            "item": [
                                {
                                    "name": "C4E JWT",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "",
                                                    "var jsonData = JSON.parse(responseBody);",
                                                    "if(jsonData && jsonData.access_token){",
                                                    "    postman.setEnvironmentVariable(\"jwt_C4E\", jsonData.access_token);",
                                                    "}",
                                                    "",
                                                    "pm.test(\"Get C4E JWT Token\", function () {",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                                    "});",
                                                    ""
                                                ],
                                                "type": "text/javascript"
                                            }
                                        },
                                        {
                                            "listen": "prerequest",
                                            "script": {
                                                "exec": [""],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "auth": {
                                            "type": "noauth"
                                        },
                                        "method": "POST",
                                        "header": [
                                            {
                                                "key": "Accept",
                                                "value": "application/json"
                                            },
                                            {
                                                "key": "X-CorrelationID",
                                                "value": "",
                                                "disabled": true
                                            },
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "body": {
                                            "mode": "urlencoded",
                                            "urlencoded": [
                                                {
                                                    "key": "response_type",
                                                    "value": "token",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "grant_type",
                                                    "value": "client_credentials",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_id",
                                                    "value": "{{clientid_C4E}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_secret",
                                                    "value": "{{clientsecret_C4E}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "scope",
                                                    "value": "",
                                                    "type": "text"
                                                }
                                            ]
                                        },
                                        "url": {
                                            "raw": "{{authurlC4E}}/oauth/token",
                                            "host": ["{{authurlC4E}}"],
                                            "path": ["oauth", "token"]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "Retailer JWT",
                            "item": [
                                {
                                    "name": "Retailer JWT Token",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "var jsonData = JSON.parse(responseBody);",
                                                    "",
                                                    "if(jsonData && jsonData.access_token){",
                                                    "    postman.setEnvironmentVariable(\"jwt\", jsonData.access_token);",
                                                    "}",
                                                    "",
                                                    "pm.test(\"Get JWT\", function () {",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                                    "});",
                                                    "",
                                                    "//Add sleep here",
                                                    "setTimeout(function(){ ",
                                                    "    console.log('Delay for 50secs');",
                                                    "}, 50000);"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        },
                                        {
                                            "listen": "prerequest",
                                            "script": {
                                                "exec": [""],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "auth": {
                                            "type": "noauth"
                                        },
                                        "method": "POST",
                                        "header": [
                                            {
                                                "key": "Accept",
                                                "value": "application/json"
                                            },
                                            {
                                                "key": "X-CorrelationID",
                                                "value": "",
                                                "disabled": true
                                            },
                                            {
                                                "key": "Content-Type",
                                                "value": "application/x-www-form-urlencoded"
                                            }
                                        ],
                                        "body": {
                                            "mode": "urlencoded",
                                            "urlencoded": [
                                                {
                                                    "key": "response_type",
                                                    "value": "token",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "grant_type",
                                                    "value": "client_credentials",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_id",
                                                    "value": "{{uaa_client_id}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_secret",
                                                    "value": "{{uaa_client_secret}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "scope",
                                                    "value": "",
                                                    "type": "text"
                                                }
                                            ]
                                        },
                                        "url": {
                                            "raw": "{{jwtProtocol}}://{{uaa-domain}}/oauth/token",
                                            "protocol": "{{jwtProtocol}}",
                                            "host": ["{{uaa-domain}}"],
                                            "path": ["oauth", "token"]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "Check Meter Lifecycle Data in C4E",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD')\r",
                                            "\r",
                                            "pm.test(\"C4E Meter Lifecycle Data. Successful POST request \" + jiraIssue, function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "})\r",
                                            "  var jsonObject = xml2Json(responseBody);\r",
                                            "  var SerialID = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:serialNumber\"];\r",
                                            "  var mRId = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:mRID\"];\r",
                                            "  var UsagePoint = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePoint\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                            "  var UsagePointLocation = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePointLocation\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                            " \r",
                                            "  console.log(\"********************************\");\r",
                                            "  console.log(\"SerialID:\", SerialID);\r",
                                            "  console.log(\"MRID:\", mRId);\r",
                                            "  console.log(\"UsagePoint:\", UsagePoint);\r",
                                            "  console.log(\"UsagePointLocation:\", UsagePointLocation);\r",
                                            "  console.log(\"MRID_Flag:\", pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\"));\r",
                                            "\r",
                                            "  if (SerialID && mRId) {\r",
                                            "    if(pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\") === true){\r",
                                            "        pm.environment.set(\"InstallationID\",mRId)\r",
                                            "    }else{\r",
                                            "        pm.environment.set(\"InstallationID\",SerialID)\r",
                                            "    }\r",
                                            "    console.log(\"Success: Technical Master Data is created successfully in C4E Via Event Mesh\");\r",
                                            "    postman.setNextRequest(\"ISU - oData action notify*LocationInstalled()\");\r",
                                            " } else {\r",
                                            "    console.log(\"Error: Failed to create Technical Master Data in C4E Via Event Mesh\");\r",
                                            "    postman.setNextRequest(\"ActionTMDCreateSingleRegister - Old\");\r",
                                            " }\r",
                                            "   \r",
                                            "  console.log(\"********************************\");"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{jwt_C4E}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "AuthorizationcoreOnly",
                                        "type": "text",
                                        "value": "Bearer",
                                        "disabled": true
                                    },
                                    {
                                        "key": "coreOnly",
                                        "value": "false",
                                        "type": "text",
                                        "disabled": true
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<msg:RequestMessage xmlns:msg=\"http://iec.ch/TC57/2011/schema/message\" xmlns:m=\"http://iec.ch/TC57/CIM-c4e#\">\r\n    <msg:Header>\r\n        <msg:Verb>get</msg:Verb>\r\n        <msg:Noun>MeterLifecycleDataSet</msg:Noun>\r\n    </msg:Header>\r\n    <msg:Request>\r\n    <m:GetMeterLifecycleDataSet>\r\n        <m:UsagePoint>\r\n            <m:Names>\r\n                <m:name>{{InstallationID}}</m:name>\r\n                <m:NameType>\r\n                    <m:name>UtilitiesPointOfDeliveryPartyID</m:name>\r\n                    <m:NameTypeAuthority>\r\n                        <m:name>SAP</m:name>\r\n                    </m:NameTypeAuthority>\r\n                </m:NameType>\r\n            </m:Names>\r\n        </m:UsagePoint>\r\n    </m:GetMeterLifecycleDataSet>\r\n</msg:Request>\r\n</msg:RequestMessage>",
                                    "options": {
                                        "raw": {
                                            "language": "xml"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{c4eEDS}}/api/v1/core",
                                    "host": ["{{c4eEDS}}"],
                                    "path": ["api", "v1", "core"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "ActionTMDCreateSingleRegister - Old",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD')\r",
                                            "pm.test(\"TechnicalMasterData Create .Successful POST request \" + jiraIssue, function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{jwt}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n\"id\": \"{{TMDActionIDSingleRegister}}\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/internal/technicalmasterdata/generate",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "internal",
                                        "technicalmasterdata",
                                        "generate"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Check Meter Lifecycle Data in C4E After Action",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD');\r",
                                            "pm.test(\"C4E Meter Lifecycle Data. Successful POST request \" + jiraIssue, function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "})\r",
                                            "\r",
                                            "  var jsonObject = xml2Json(responseBody);\r",
                                            "  var SerialID = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:serialNumber\"];\r",
                                            "  var mRId = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:mRID\"];\r",
                                            "  var UsagePoint = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePoint\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                            "  var UsagePointLocation = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePointLocation\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                            " \r",
                                            "  console.log(\"********************************\");\r",
                                            "  console.log(\"SerialID:\", SerialID);\r",
                                            "  console.log(\"MRID:\", mRId);\r",
                                            "  console.log(\"UsagePoint:\", UsagePoint);\r",
                                            "  console.log(\"UsagePointLocation:\", UsagePointLocation);\r",
                                            "  console.log(\"MRID_Flag:\", pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\"));\r",
                                            "\r",
                                            "pm.test(\"C4E SerailID. Successful POST request ${jiraIssue}\", function () {\r",
                                            "  pm.expect(jsonObject[\"msg:ResponseMessage\"][\"msg:Payload\"][\"m:MeterLifecycleDataSet\"][\"m:Container\"][\"m:Meter\"][\"m:serialNumber\"]);\r",
                                            "});\r",
                                            "\r",
                                            "  if (SerialID && mRId) {\r",
                                            "    if(pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\") === true){\r",
                                            "        pm.environment.set(\"InstallationID\",mRId)\r",
                                            "    }else{\r",
                                            "        pm.environment.set(\"InstallationID\",SerialID)\r",
                                            "    }\r",
                                            "    console.log(\"Success: Technical Master Data is created successfully in C4E Via TMD Action\");\r",
                                            "    postman.setNextRequest(\"ISU - oData action notify*LocationInstalled()\");\r",
                                            " } else {\r",
                                            "    console.log(\"Error: Failed to create Technical Master Data in C4E Via TMD Action\");\r",
                                            "    postman.setNextRequest(0);\r",
                                            " }\r",
                                            "   \r",
                                            "  console.log(\"********************************\");"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{jwt_C4E}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "AuthorizationcoreOnly",
                                        "type": "text",
                                        "value": "Bearer",
                                        "disabled": true
                                    },
                                    {
                                        "key": "coreOnly",
                                        "value": "false",
                                        "type": "text",
                                        "disabled": true
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<msg:RequestMessage xmlns:msg=\"http://iec.ch/TC57/2011/schema/message\" xmlns:m=\"http://iec.ch/TC57/CIM-c4e#\">\r\n    <msg:Header>\r\n        <msg:Verb>get</msg:Verb>\r\n        <msg:Noun>MeterLifecycleDataSet</msg:Noun>\r\n    </msg:Header>\r\n    <msg:Request>\r\n    <m:GetMeterLifecycleDataSet>\r\n        <m:UsagePoint>\r\n            <m:Names>\r\n                <m:name>{{InstallationID}}</m:name>\r\n                <m:NameType>\r\n                    <m:name>UtilitiesPointOfDeliveryPartyID</m:name>\r\n                    <m:NameTypeAuthority>\r\n                        <m:name>SAP</m:name>\r\n                    </m:NameTypeAuthority>\r\n                </m:NameType>\r\n            </m:Names>\r\n        </m:UsagePoint>\r\n    </m:GetMeterLifecycleDataSet>\r\n</msg:Request>\r\n</msg:RequestMessage>",
                                    "options": {
                                        "raw": {
                                            "language": "xml"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{c4eEDS}}/api/v1/core",
                                    "host": ["{{c4eEDS}}"],
                                    "path": ["api", "v1", "core"]
                                }
                            },
                            "response": []
                        }
                    ],
                    "auth": {
                        "type": "bearer",
                        "bearer": [
                            {
                                "key": "token",
                                "value": "{{jwt_C4E}}",
                                "type": "string"
                            }
                        ]
                    },
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [""]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [""]
                            }
                        }
                    ]
                },
                {
                    "name": "Activities@Process Status EXTMD_OK",
                    "item": [
                        {
                            "name": "ISU - oData action notify*LocationInstalled()",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Notify LocationInstallled\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/MCMService.notifyMeteringLocationInstalled HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}})/MCMService.notifyMarketLocationInstalled HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "GET Instance Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Get Instance Status NEW/DEV_INST\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "status"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Activities@Process Status DEV_INST",
                    "item": [
                        {
                            "name": "ISU - oData action notify*LocationCompleted()",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Notify Location Completed\", function () {\r",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "});\r",
                                            "\r",
                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                            "\r",
                                            "if (hasErrors) {\r",
                                            "    postman.setNextRequest(0);\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/mixed; boundary=batch_id-1"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/MCMService.notifyMeteringLocationComplete HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}})/MCMService.notifyMarketLocationComplete HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["$batch"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Read Instance",
                    "item": [
                        {
                            "name": "GET Complete Instance",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD')\r",
                                            "pm.test(\"Get Complete Instance from MCM .Successful GET request \" + jiraIssue, function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                            "})\r",
                                            "// var responseCode = pm.response.code;\r",
                                            "// if ( responseCode ==  200 || 201 ) {\r",
                                            "// var jsonResponse = JSON.parse(responseBody);\r",
                                            "\r",
                                            "// pm.test(\" Response instanceStatus_code must be ACTIVE\", function () {\r",
                                            "// // pm.expect( jsonResponse.status.instanceStatus_code).to.eql(\"ACTIVE\");\r",
                                            "// }\r",
                                            "// );\r",
                                            "// pm.test(\" Response processStatus_code must be PLANNED\", function () {\r",
                                            "// // pm.expect( jsonResponse.status.processStatus_code).to.eql(\"PLANNED\" );\r",
                                            "// }\r",
                                            "// );\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings",
                                    "host": ["{{baseUrl}}{{serviceRoot}}"],
                                    "path": ["MCMInstances({{instanceId}})"],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                }
            ],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [""]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [""]
                    }
                }
            ]
        }
    ],
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{jwt_MCM_Tech_Data}}",
                "type": "string"
            }
        ]
    },
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [""]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [""]
            }
        }
    ],
    "variable": [
        {
            "key": "JIRA-Issue-TMD",
            "value": "UTILITIESCLOUDSOLUTION-2693",
            "type": "string"
        }
    ]
}
