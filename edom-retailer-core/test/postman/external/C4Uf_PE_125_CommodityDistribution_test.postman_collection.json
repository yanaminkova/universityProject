{
    "info": {
        "_postman_id": "7b2cebce-4733-4dd4-8cd0-5f22831296a9",
        "name": "C4Uf_PE_125_CommodityDistribution_test.postman_collection.json",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "SetUp",
            "item": [
                {
                    "name": "JWT",
                    "item": [
                        {
                            "name": "{{jwtProtocol}}://{{uaa-domain}}/oauth/token",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "",
                                            "var jsonData = JSON.parse(responseBody);",
                                            "",
                                            "if(jsonData && jsonData.access_token){",
                                            "    postman.setEnvironmentVariable(\"jwt\", jsonData.access_token);",
                                            "}",
                                            "",
                                            "",
                                            "pm.test(\"Successful POST request\", function () {",
                                            "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                            "});",
                                            "",
                                            "// let present_date = new Date().toJSON();",
                                            "// pm.collectionVariables.set('present_date', present_date);",
                                            "",
                                            "// let  present_date;",
                                            "// const moment = require('moment');",
                                            "// pm.collectionVariables.set(\"present_date\", moment().format(\"YYYY-MM-DDTHH:MM:SSZ\"));",
                                            "// console.log(moment().format(\"YYYY-MM-DDTHH:MM:SSZ\"));"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [""],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "noauth"
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "key": "X-CorrelationID",
                                        "value": "",
                                        "disabled": true
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/x-www-form-urlencoded"
                                    }
                                ],
                                "body": {
                                    "mode": "urlencoded",
                                    "urlencoded": [
                                        {
                                            "key": "response_type",
                                            "value": "token",
                                            "type": "text"
                                        },
                                        {
                                            "key": "grant_type",
                                            "value": "client_credentials",
                                            "type": "text"
                                        },
                                        {
                                            "key": "client_id",
                                            "value": "{{uaa_client_id}}",
                                            "type": "text"
                                        },
                                        {
                                            "key": "client_secret",
                                            "value": "{{uaa_client_secret}}",
                                            "type": "text"
                                        },
                                        {
                                            "key": "scope",
                                            "value": "",
                                            "type": "text"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{jwtProtocol}}://{{uaa-domain}}/oauth/token",
                                    "protocol": "{{jwtProtocol}}",
                                    "host": ["{{uaa-domain}}"],
                                    "path": ["oauth", "token"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "FEATURE FLAGS",
                    "item": [
                        {
                            "name": "GET: all feature flags",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"/api/v1/features/export\", function () {",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201,204,400,401,402,403,404,500,501,502,503]);",
                                            "",
                                            "    const responseJSON = pm.response.json();",
                                            "    const { flags } = responseJSON;",
                                            "",
                                            "    const tenantId = pm.environment.get('tenant_id');",
                                            "",
                                            "    const flagsHashMap = flags.reduce((hashMap, flag) => {",
                                            "        const tenantShipment = flag.directShipments",
                                            "            .find(directShipment => directShipment.receivers",
                                            "                .some(receiver => receiver === tenantId)",
                                            "            );",
                                            "        ",
                                            "        let variationIndex = !flag.enabled ",
                                            "            ? flag.offVariationIndex ",
                                            "            : tenantShipment ",
                                            "                ? tenantShipment.variationIndex ",
                                            "                : flag.defaultVariationIndex;",
                                            "        ",
                                            "",
                                            "        hashMap[flag.id] = flag.variations[variationIndex] === 'true';",
                                            "        return hashMap;",
                                            "    }, {});",
                                            "if (flagsHashMap['technical-master-data-service'] == false)",
                                            "    {",
                                            "        pm.environment.set('env_featureFlags', JSON.stringify(flagsHashMap));",
                                            "        pm.environment.set('env_featureFlag', !flagsHashMap['technical-master-data-service'])",
                                            "    } else",
                                            "    {",
                                            "        pm.environment.set('env_featureFlags', JSON.stringify(flagsHashMap));",
                                            "        pm.environment.set('env_featureFlag', !flagsHashMap['technical-master-data-service'])",
                                            "    }",
                                            "    ",
                                            "});",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{feature_flag_uri}}/api/v1/features/export",
                                    "host": ["{{feature_flag_uri}}"],
                                    "path": ["api", "v1", "features", "export"]
                                }
                            },
                            "response": []
                        }
                    ],
                    "auth": {
                        "type": "basic",
                        "basic": [
                            {
                                "key": "password",
                                "value": "{{feature_flag_password}}",
                                "type": "string"
                            },
                            {
                                "key": "username",
                                "value": "{{feature_flag_username}}",
                                "type": "string"
                            }
                        ]
                    },
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [""]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [""]
                            }
                        }
                    ]
                },
                {
                    "name": "CustomerOrder.item.type.code",
                    "item": [
                        {
                            "name": "CREATE ItemTypeCodes USB1",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "//  console.log(pm.environment.get(\"env_featureFlag\"));\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "//     console.log(\"test\");\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let typeCodeUsb1 = 'USB1'; // value to be set in case of 400\r",
                                            "let itemTypeCodeUsb1 = ' ';\r",
                                            "console.log(\"test\",itemTypeCodeUsb1);\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"itemTypeCodeUsb1\", typeCodeUsb1);\r",
                                            "        console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                            " } else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"itemTypeCodeUsb1\", jsonData.code);\r",
                                            " }   \r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Subscription\",\r\n    \"descr\": \"Subscription\",\r\n    \"code\": \"USB1\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemTypeCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE ItemTypeCodes USB2",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let typeCodeUSB2 = 'USB2'; // value to be set in case of 400\r",
                                            "let itemTypeCodeUSB2 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB2\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"itemTypeCodeUSB2\", typeCodeUSB2);\r",
                                            "        console.log(pm.environment.get(\"itemTypeCodeUSB2\"));\r",
                                            " } else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"itemTypeCodeUSB2\", jsonData.code);\r",
                                            " }   \r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Subscription\",\r\n    \"descr\": \"Subscription\",\r\n    \"code\": \"USB2\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemTypeCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE ItemTypeCodes USB3",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let typeCodeUSB3 = 'USB3'; // value to be set in case of 400\r",
                                            "let itemTypeCodeUSB3 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB2\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"itemTypeCodeUSB3\", typeCodeUSB3);\r",
                                            "        console.log(pm.environment.get(\"itemTypeCodeUSB3\"));\r",
                                            " } else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"itemTypeCodeUSB3\", jsonData.code);\r",
                                            " }   \r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"TerminateSubscription\",\r\n    \"descr\": \"Terminate Subscription\",\r\n    \"code\": \"USB3\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemTypeCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE ItemTypeCodes UMT1",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "    \r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let typeCodeUMT1 = 'UMT1'; // value to be set in case of 400\r",
                                            "let itemTypeCodeUMT1 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"itemTypeCodeUMT1\", typeCodeUMT1);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"itemTypeCodeUMT1\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Physical\",\r\n    \"descr\": \"TAN Sell from Stock\",\r\n    \"code\": \"UMT1\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemTypeCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE ItemTypeCodes UMT2",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "    \r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let typeCodeUMT2 = 'UMT2'; // value to be set in case of 400\r",
                                            "let itemTypeCodeUMT2 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"itemTypeCodeUMT2\", typeCodeUMT2);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"itemTypeCodeUMT2\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Physical\",\r\n    \"descr\": \"CBAO (down payment)\",\r\n    \"code\": \"UMT2\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemTypeCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE ItemTypeCodes UMT3",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let typeCodeUMT3 = 'UMT3'; // value to be set in case of 400\r",
                                            "let itemTypeCodeUMT3 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"itemTypeCodeUMT3\", typeCodeUMT3);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"itemTypeCodeUMT3\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Physical\",\r\n    \"descr\": \"TADN (free of charge)\",\r\n    \"code\": \"UMT3\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemTypeCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE ItemTypeCodes UMT4",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "    \r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let typeCodeUMT4 = 'UMT4'; // value to be set in case of 400\r",
                                            "let itemTypeCodeUMT4 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"itemTypeCodeUMT4\", typeCodeUMT4);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"itemTypeCodeUMT4\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Physical\",\r\n    \"descr\": \"CB1 (3rd party)\",\r\n    \"code\": \"UMT4\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemTypeCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE ItemTypeCodes UMT5",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "    \r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let typeCodeUMT5 = 'UMT5'; // value to be set in case of 400\r",
                                            "let itemTypeCodeUMT5 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"itemTypeCodeUMT5\", typeCodeUMT5);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"itemTypeCodeUMT5\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Physical\",\r\n    \"descr\": \"Physical Order\",\r\n    \"code\": \"UMT5\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemTypeCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Sales Processing Status Codes Copy",
                    "item": [
                        {
                            "name": "CREATE Sales Processing Status Code 01",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"01\",\r\n    \"name\": \"Open\",\r\n    \"descr\": \"Open\"\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 02",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"02\",\r\n    \"name\": \"In Process\",\r\n    \"descr\": \"In Process\"\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 03",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"03\",\r\n    \"name\": \"Completed\",\r\n    \"descr\": \"Completed\"\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 04",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"04\",\r\n    \"name\": \"Canceled\",\r\n    \"descr\": \"Canceled\"\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 05",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"05\",\r\n    \"name\": \"Rejected\",\r\n    \"descr\": \"Rejected\"\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 06",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"06\",\r\n    \"name\": \"In Distribution\",\r\n    \"descr\": \"In Distribution\"\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 07",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"07\",\r\n    \"name\": \"Active\",\r\n    \"descr\": \"Active\"\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 08",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"08\",\r\n    \"name\": \"In Error\",\r\n    \"descr\": \"In Error\"\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 00",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"00\",\r\n    \"name\": \"Unknown\",\r\n    \"descr\": \"Unknown\"\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Sales Processing Status Code 09",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let salesProcessingStatus09 = '09'; // value to be set in case of 400\r",
                                            "let inTerminationSalesStatusCode = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB2\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"inTerminationSalesStatusCode\", salesProcessingStatus09);\r",
                                            "        \r",
                                            " } else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"inTerminationSalesStatusCode\", jsonData.code);\r",
                                            " }   "
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"09\",\r\n    \"name\": \"In Termination\",\r\n    \"descr\": \"In Termination\"\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesProcessingStatusCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesProcessingStatusCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "CustomerOrderUtilitiesStatusMapping",
                    "item": [
                        {
                            "name": "CREATE CustomerOrderUtilitiesStatusSourceSystems SD",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [""],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"sourceSystemId\":\"API_SALES_ORDER_SRV\",\r\n    \"destination\": \"S4-DESTINATION\",\r\n    \"path\": \"\",\r\n    \"statusPath\" : \"data/physical/status\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/config/CustomerOrderUtilitiesStatusSourceSystems",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "config",
                                        "CustomerOrderUtilitiesStatusSourceSystems"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE CustomerOrderUtilitiesStatusSourceSystems SB",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [""],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"sourceSystemId\":\"/eu10/sap.billing.sb\",\r\n    \"destination\": \"sb-dest\",\r\n    \"path\": \"\",\r\n    \"statusPath\" : \"data/subscription/status\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/config/CustomerOrderUtilitiesStatusSourceSystems",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "config",
                                        "CustomerOrderUtilitiesStatusSourceSystems"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE CustomerOrderUtilitiesStatusMappingTypeCodes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [""],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\":\"01\",\r\n    \"name\":\"EM\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/config/CustomerOrderUtilitiesStatusMappingTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "config",
                                        "CustomerOrderUtilitiesStatusMappingTypeCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE CustomerOrderUtilitiesStatusMapping - OpenSB",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [""],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"sourceSystem\" : { \"sourceSystemId\" : \"/eu10/sap.billing.sb\" },\r\n    \"sourceSystemStatus\" : \"Active\",\r\n    \"processingStatus\" : {\"code\" : \"01\"},\r\n    \"type\" : {\"code\" : \"01\" }\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/config/CustomerOrderUtilitiesStatusMapping",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "config",
                                        "CustomerOrderUtilitiesStatusMapping"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE CustomerOrderUtilitiesStatusMapping - Open SD",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [""],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"sourceSystem\" : { \"sourceSystemId\" : \"API_SALES_ORDER_SRV\" },\r\n    \"sourceSystemStatus\" : \"A\",\r\n    \"processingStatus\" : {\"code\" : \"01\"},\r\n    \"type\" : {\"code\" : \"01\" }\r\n}\r\n",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/config/CustomerOrderUtilitiesStatusMapping",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "config",
                                        "CustomerOrderUtilitiesStatusMapping"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "BusinessScenarios",
                    "item": [
                        {
                            "name": "CustomerOrder.type.code",
                            "item": [
                                {
                                    "name": "CREATE CustomerOrderTypeCodes UTIL",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let CustOrderTypCodeUTIL = 'UTIL'; // value to be set in case of 400\r",
                                                    "let customerOrderTypeCodeUTIL = ' ';\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.environment.set(\"customerOrderTypeCodeUTIL\", CustOrderTypCodeUTIL);\r",
                                                    "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                                    "    // pm.environment.get(\"variable_key\");\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.environment.set(\"customerOrderTypeCodeUTIL\", jsonData.code);\r",
                                                    "}\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [
                                            {
                                                "key": "Authorization",
                                                "type": "text",
                                                "value": "{{jwt}}"
                                            }
                                        ],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"name\": \"Utilities\",\r\n    \"descr\": \"Utilities\",\r\n    \"code\": \"UTIL\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Get CustomerOrderTypeCodes UTIL",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let flag = false;\r",
                                                    "\r",
                                                    " for(var i=0; i < jsonData.value.length; i++){\r",
                                                    "    //  console.log(jsonData.value[i].code,jsonData.value.length,i);\r",
                                                    "     if (jsonData.value[i].code === (pm.environment.get(\"customerOrderTypeCodeUTIL\"))){\r",
                                                    "        //  console.log(\"Sucessful Read:\",(pm.environment.get(\"customerOrderTypeCodeUTIL\")));\r",
                                                    "        flag = true;\r",
                                                    "    pm.test(\"Check Error in the Response\", function () {\r",
                                                    "    pm.expect( (jsonData.value[i].code) == (pm.environment.get(\"customerOrderTypeCodeUTIL\")) );\r",
                                                    "});\r",
                                                    "      } else {\r",
                                                    "          if ( (i == jsonData.value.length - 1) && (flag == false) )\r",
                                                    "          {\r",
                                                    "          console.log(\"UnSucessful\");\r",
                                                    "          }\r",
                                                    "      }\r",
                                                    " }\r",
                                                    "// }\r",
                                                    " \r",
                                                    "// if ( responseCode == 200 || 201  ) {}\r",
                                                    "//     // console.log(\"test\",jsonData.value[0].code);\r",
                                                    "//     // if succesfull check for the value of the code\r",
                                                    "//     pm.test(\"Error in the Response\", function () {\r",
                                                    "//     pm.expect( (jsonData.value[0].code).to.equal(pm.environment.get(\"customerOrderItemTypeCodeUSB1\")) );\r",
                                                    "// });\r",
                                                    "// } ;\r",
                                                    "//     if (jsonData.code == '{{customerOrderItemTypeCodeUSB1}}') {\r",
                                                    "// console.log(\"Sucessful:CustomerOrderTypeCode: \", jsonData.code);\r",
                                                    "//     } else {\r",
                                                    "//         console.log(\"UnSucessful:CustomerOrderTypeCode: \", jsonData.code);\r",
                                                    "//     }\r",
                                                    "    \r",
                                                    "// }\r",
                                                    ""
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "protocolProfileBehavior": {
                                        "disableBodyPruning": true
                                    },
                                    "request": {
                                        "method": "GET",
                                        "header": [
                                            {
                                                "key": "Authorization",
                                                "type": "text",
                                                "value": "{{jwt}}"
                                            }
                                        ],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderTypeCodes?$filter=code eq '{{customerOrderTypeCodeUTIL}}'",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderTypeCodes"
                                            ],
                                            "query": [
                                                {
                                                    "key": "$filter",
                                                    "value": "code eq '{{customerOrderTypeCodeUTIL}}'"
                                                }
                                            ]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "ExternalDocumentTypeCode",
                            "item": [
                                {
                                    "name": "Create ExternalDocumentTypeCodes create SalesOrder",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let extDocTypCodeSalesOrder = 'SalesOrder'; // value to be set in case of 400\r",
                                                    "let externalDocumentTypeCodeSalesOrder = ' ';\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.environment.set(\"externalDocumentTypeCodeSalesOrder\", extDocTypCodeSalesOrder);\r",
                                                    "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                                    "    // pm.environment.get(\"variable_key\");\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.environment.set(\"externalDocumentTypeCodeSalesOrder\", jsonData.code);\r",
                                                    "}\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n\"code\": \"SalesOrder\",\r\n\"name\": \"SalesOrder\",\r\n\"descr\": \"SalesOrder\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/ExternalDocumentTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "ExternalDocumentTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Create ExternalDocumentTypeCodes create CommoditySubscription",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let extDocTypeCodeSubscription = 'Subscription'; // value to be set in case of 400\r",
                                                    "let externalDocumentTypeCodeSubscription = ' ';\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.environment.set(\"externalDocumentTypeCodeSubscription\", extDocTypeCodeSubscription);\r",
                                                    "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                                    "    // pm.environment.get(\"variable_key\");\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.environment.set(\"externalDocumentTypeCodeSubscription\", jsonData.code);\r",
                                                    "}\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n\"code\": \"CommoditySubscription\", \r\n\"name\": \"CommoditySubscription\",\r\n\"descr\": \"CommoditySubscription\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/ExternalDocumentTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "ExternalDocumentTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Create ExternalDocumentTypeCodes create NonCommoditySubscription",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let extDocTypeCodeSubscription = 'Subscription'; // value to be set in case of 400\r",
                                                    "let externalDocumentTypeCodeSubscription = ' ';\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.environment.set(\"externalDocumentTypeCodeSubscription\", extDocTypeCodeSubscription);\r",
                                                    "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                                    "    // pm.environment.get(\"variable_key\");\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.environment.set(\"externalDocumentTypeCodeSubscription\", jsonData.code);\r",
                                                    "}\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n\"code\": \"NonCommoditySubscription\", \r\n\"name\": \"NonCommoditySubscription\",\r\n\"descr\": \"NonCommoditySubscription\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/ExternalDocumentTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "ExternalDocumentTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Get ExternalDocumentTypeCodes",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let flag = false;\r",
                                                    "\r",
                                                    " for(var i=0; i < jsonData.value.length; i++){\r",
                                                    "    //  console.log(jsonData.value[i].code,jsonData.value.length,i);\r",
                                                    "     if (jsonData.value[i].code === (pm.environment.get(\"externalDocumentTypeCodeSubscription\"))){\r",
                                                    "        //  console.log(\"Sucessful Read:\",(pm.environment.get(\"customerOrderItemTypeCodeTAN\")));\r",
                                                    "        flag = true;\r",
                                                    "    pm.test(\"Check Error in the Response\", function () {\r",
                                                    "    pm.expect( (jsonData.value[i].code) == (pm.environment.get(\"externalDocumentTypeCodeSubscription\")) );\r",
                                                    "});\r",
                                                    "      } else {\r",
                                                    "          if ( (i == jsonData.value.length - 1) && (flag == false) )\r",
                                                    "          {\r",
                                                    "          console.log(\"UnSucessful\");\r",
                                                    "          }\r",
                                                    "      }\r",
                                                    " }\r",
                                                    "// }\r",
                                                    "// if ( responseCode == 200 || 201  ) {}\r",
                                                    "//     // console.log(\"test\",jsonData.value[0].code);\r",
                                                    "//     // if succesfull check for the value of the code\r",
                                                    "//     pm.test(\"Error in the Response\", function () {\r",
                                                    "//     pm.expect( (jsonData.value[0].code).to.equal(pm.environment.get(\"customerOrderItemTypeCodeTAN\")) );\r",
                                                    "// });\r",
                                                    "// } ;\r",
                                                    "//     if (jsonData.code == '{{customerOrderItemTypeCodeTAN}}') {\r",
                                                    "// console.log(\"Sucessful:CustomerOrderTypeCode: \", jsonData.code);\r",
                                                    "//     } else {\r",
                                                    "//         console.log(\"UnSucessful:CustomerOrderTypeCode: \", jsonData.code);\r",
                                                    "//     }\r",
                                                    "    \r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "protocolProfileBehavior": {
                                        "disableBodyPruning": true
                                    },
                                    "request": {
                                        "method": "GET",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n\"code\": \"CommoditySubscription\", \r\n\"name\": \"CommoditySubscription\",\r\n\"descr\": \"CommoditySubscription\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/ExternalDocumentTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "ExternalDocumentTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "CustomerOrder.item.type.code",
                            "item": [
                                {
                                    "name": "CREATE CustomerOrderItemTypeCodes USB2",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let CustOrderItemTypCodeUSB2 = 'USB2'; // value to be set in case of 400\r",
                                                    "let customerOrderItemTypeCodeUSB2 = ' ';\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.environment.set(\"customerOrderItemTypeCodeUSB2\", CustOrderItemTypCodeUSB2);\r",
                                                    "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                                    "    // pm.environment.get(\"variable_key\");\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.environment.set(\"customerOrderItemTypeCodeUSB2\", jsonData.code);\r",
                                                    "}\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [
                                            {
                                                "key": "Authorization",
                                                "type": "text",
                                                "value": "{{jwt}}"
                                            }
                                        ],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"name\": \"Commodity Subscription\",\r\n    \"descr\": null,\r\n    \"code\": \"USB2\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderItemTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Get CustomerOrderItemTypeCodes USB2",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let flag = false;\r",
                                                    "\r",
                                                    " for(var i=0; i < jsonData.value.length; i++){\r",
                                                    "    //  console.log(jsonData.value[i].code,jsonData.value.length,i);\r",
                                                    "     if (jsonData.value[i].code === (pm.environment.get(\"customerOrderItemTypeCodeUSB1\"))){\r",
                                                    "        //  console.log(\"Sucessful Read:\",(pm.environment.get(\"customerOrderItemTypeCodeUSB1\")));\r",
                                                    "        flag = true;\r",
                                                    "    pm.test(\"Check Error in the Response\", function () {\r",
                                                    "    pm.expect( (jsonData.value[i].code) == (pm.environment.get(\"customerOrderItemTypeCodeUSB1\")) );\r",
                                                    "});\r",
                                                    "      } else {\r",
                                                    "          if ( (i == jsonData.value.length - 1) && (flag == false) )\r",
                                                    "          {\r",
                                                    "          console.log(\"UnSucessful\");\r",
                                                    "          }\r",
                                                    "      }\r",
                                                    " }\r",
                                                    " \r",
                                                    "// if ( responseCode == 200 || 201  ) {}\r",
                                                    "//     // console.log(\"test\",jsonData.value[0].code);\r",
                                                    "//     // if succesfull check for the value of the code\r",
                                                    "//     pm.test(\"Error in the Response\", function () {\r",
                                                    "//     pm.expect( (jsonData.value[0].code).to.equal(pm.environment.get(\"customerOrderItemTypeCodeUSB1\")) );\r",
                                                    "// });\r",
                                                    "// } ;\r",
                                                    "//     if (jsonData.code == '{{customerOrderItemTypeCodeUSB1}}') {\r",
                                                    "// console.log(\"Sucessful:CustomerOrderTypeCode: \", jsonData.code);\r",
                                                    "//     } else {\r",
                                                    "//         console.log(\"UnSucessful:CustomerOrderTypeCode: \", jsonData.code);\r",
                                                    "//     }\r",
                                                    "    \r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "protocolProfileBehavior": {
                                        "disableBodyPruning": true
                                    },
                                    "request": {
                                        "method": "GET",
                                        "header": [
                                            {
                                                "key": "Authorization",
                                                "type": "text",
                                                "value": "{{jwt}}"
                                            }
                                        ],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"name\": \"Subscription\",\r\n    \"descr\": null,\r\n    \"code\": \"USB1\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderItemTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "CREATE CustomerOrderItemTypeCodes UMT2",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let CustOrderItemTypCodeUMT1 = 'UMT2'; // value to be set in case of 400\r",
                                                    "let customerOrderItemTypeCodeUMT1 = ' ';\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"UMT1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.environment.set(\"customerOrderItemTypeCodeUMT1\", CustOrderItemTypCodeUMT1);\r",
                                                    "       // console.log(pm.environment.get(\"itemTypeCodeUMT1\"));\r",
                                                    "    // pm.environment.get(\"variable_key\");\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.environment.set(\"customerOrderItemTypeCodeUMT1\", jsonData.code);\r",
                                                    "}\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [
                                            {
                                                "key": "Authorization",
                                                "type": "text",
                                                "value": "{{jwt}}"
                                            }
                                        ],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"name\": \"Physical Downpayment\",\r\n    \"descr\": null,\r\n    \"code\": \"UMT2\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderItemTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Get CustomerOrderItemTypeCodes UMT2",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let flag = false;\r",
                                                    "\r",
                                                    " for(var i=0; i < jsonData.value.length; i++){\r",
                                                    "    //  console.log(jsonData.value[i].code,jsonData.value.length,i);\r",
                                                    "     if (jsonData.value[i].code === (pm.environment.get(\"customerOrderItemTypeCodeUMT1\"))){\r",
                                                    "        //  console.log(\"Sucessful Read:\",(pm.environment.get(\"customerOrderItemTypeCodeUMT1\")));\r",
                                                    "        flag = true;\r",
                                                    "    pm.test(\"Check Error in the Response\", function () {\r",
                                                    "    pm.expect( (jsonData.value[i].code) == (pm.environment.get(\"customerOrderItemTypeCodeUMT1\")) );\r",
                                                    "});\r",
                                                    "      } else {\r",
                                                    "          if ( (i == jsonData.value.length - 1) && (flag == false) )\r",
                                                    "          {\r",
                                                    "          console.log(\"UnSucessful\");\r",
                                                    "          }\r",
                                                    "      }\r",
                                                    " }\r",
                                                    "// }\r",
                                                    "// if ( responseCode == 200 || 201  ) {}\r",
                                                    "//     // console.log(\"test\",jsonData.value[0].code);\r",
                                                    "//     // if succesfull check for the value of the code\r",
                                                    "//     pm.test(\"Error in the Response\", function () {\r",
                                                    "//     pm.expect( (jsonData.value[0].code).to.equal(pm.environment.get(\"customerOrderItemTypeCodeUMT1\")) );\r",
                                                    "// });\r",
                                                    "// } ;\r",
                                                    "//     if (jsonData.code == '{{customerOrderItemTypeCodeUMT1}}') {\r",
                                                    "// console.log(\"Sucessful:CustomerOrderTypeCode: \", jsonData.code);\r",
                                                    "//     } else {\r",
                                                    "//         console.log(\"UnSucessful:CustomerOrderTypeCode: \", jsonData.code);\r",
                                                    "//     }\r",
                                                    "    \r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "protocolProfileBehavior": {
                                        "disableBodyPruning": true
                                    },
                                    "request": {
                                        "method": "GET",
                                        "header": [
                                            {
                                                "key": "Authorization",
                                                "type": "text",
                                                "value": "{{jwt}}"
                                            }
                                        ],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"name\": \"Physical\",\r\n    \"descr\": null,\r\n    \"code\": \"UMT1\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/v1/CustomerOrderItemTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "CustomerOrderItemTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "BusinessAction",
                            "item": [
                                {
                                    "name": "Create Business Action create",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let busActTypeCodeCreate = 'create'; // value to be set in case of 400\r",
                                                    "let businessActionTypeCodeCreate = ' ';\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.environment.set(\"businessActionTypeCodeCreate\", busActTypeCodeCreate);\r",
                                                    "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                                    "    // pm.environment.get(\"variable_key\");\r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.environment.set(\"businessActionTypeCodeCreate\", jsonData.code);\r",
                                                    "}\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n\"code\": \"create\",\r\n\"name\": \"create\",\r\n\"descr\": \"createOrder\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/BusinessActionTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "BusinessActionTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Get Business Action create",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let flag = false;\r",
                                                    "\r",
                                                    " for(var i=0; i < jsonData.value.length; i++){\r",
                                                    "    //  console.log(jsonData.value[i].code,jsonData.value.length,i);\r",
                                                    "     if (jsonData.value[i].code === (pm.environment.get(\"businessActionTypeCodeCreate\"))){\r",
                                                    "        //  console.log(\"Sucessful Read:\",(pm.environment.get(\"customerOrderItemTypeCodeTAN\")));\r",
                                                    "        flag = true;\r",
                                                    "    pm.test(\"Check Error in the Response\", function () {\r",
                                                    "    pm.expect( (jsonData.value[i].code) == (pm.environment.get(\"businessActionTypeCodeCreate\")) );\r",
                                                    "});\r",
                                                    "      } else {\r",
                                                    "          if ( (i == jsonData.value.length - 1) && (flag == false) )\r",
                                                    "          {\r",
                                                    "          console.log(\"UnSucessful\");\r",
                                                    "          }\r",
                                                    "      }\r",
                                                    " }\r",
                                                    "// }\r",
                                                    "// if ( responseCode == 200 || 201  ) {}\r",
                                                    "//     // console.log(\"test\",jsonData.value[0].code);\r",
                                                    "//     // if succesfull check for the value of the code\r",
                                                    "//     pm.test(\"Error in the Response\", function () {\r",
                                                    "//     pm.expect( (jsonData.value[0].code).to.equal(pm.environment.get(\"customerOrderItemTypeCodeTAN\")) );\r",
                                                    "// });\r",
                                                    "// } ;\r",
                                                    "//     if (jsonData.code == '{{customerOrderItemTypeCodeTAN}}') {\r",
                                                    "// console.log(\"Sucessful:CustomerOrderTypeCode: \", jsonData.code);\r",
                                                    "//     } else {\r",
                                                    "//         console.log(\"UnSucessful:CustomerOrderTypeCode: \", jsonData.code);\r",
                                                    "//     }\r",
                                                    "    \r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "protocolProfileBehavior": {
                                        "disableBodyPruning": true
                                    },
                                    "request": {
                                        "method": "GET",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n\"code\": \"create\",\r\n\"name\": \"create\",\r\n\"descr\": \"createSOrder\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/BusinessActionTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "BusinessActionTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Create Business Action terminate",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let busActTypeCodeTerminate = 'terminate'; // value to be set in case of 400\r",
                                                    "let businessActionTypeCodeTerminate = ' ';\r",
                                                    "\r",
                                                    "if (responseCode==400) {\r",
                                                    "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \" busActTypeCodeTerminate\" to global variable\r",
                                                    "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                                    "        pm.environment.set(\"businessActionTypeCodeTerminate\", busActTypeCodeTerminate);\r",
                                                    "      \r",
                                                    "} else if ( responseCode == 200 || 201  ) {\r",
                                                    "    // if succesfull read the response and assign the value of the same to global variable\r",
                                                    "    pm.environment.set(\"businessActionTypeCodeTerminate\", jsonData.code);\r",
                                                    "}\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n\"code\": \"terminate\",\r\n\"name\": \"terminate\",\r\n\"descr\": \"terminateOrder\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/BusinessActionTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "BusinessActionTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Get Business Action terminate",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "/* Check for response for code 200,201 & 400\r",
                                                    "\r",
                                                    "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                                    "   the flow. Just assign the value of the code to the global variable\r",
                                                    "*/\r",
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                    "})\r",
                                                    "\r",
                                                    "var responseCode = pm.response.code;\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "let flag = false;\r",
                                                    "\r",
                                                    " for(var i=0; i < jsonData.value.length; i++){\r",
                                                    "    //  console.log(jsonData.value[i].code,jsonData.value.length,i);\r",
                                                    "     if (jsonData.value[i].code === (pm.environment.get(\"businessActionTypeCodeTerminate\"))){\r",
                                                    "        //  console.log(\"Sucessful Read:\",(pm.environment.get(\"customerOrderItemTypeCodeTAN\")));\r",
                                                    "        flag = true;\r",
                                                    "    pm.test(\"Check Error in the Response\", function () {\r",
                                                    "    pm.expect( (jsonData.value[i].code) == (pm.environment.get(\"businessActionTypeCodeTerminate\")) );\r",
                                                    "});\r",
                                                    "      } else {\r",
                                                    "          if ( (i == jsonData.value.length - 1) && (flag == false) )\r",
                                                    "          {\r",
                                                    "          console.log(\"UnSucessful\");\r",
                                                    "          }\r",
                                                    "      }\r",
                                                    " }\r",
                                                    "// }\r",
                                                    "// if ( responseCode == 200 || 201  ) {}\r",
                                                    "//     // console.log(\"test\",jsonData.value[0].code);\r",
                                                    "//     // if succesfull check for the value of the code\r",
                                                    "//     pm.test(\"Error in the Response\", function () {\r",
                                                    "//     pm.expect( (jsonData.value[0].code).to.equal(pm.environment.get(\"customerOrderItemTypeCodeTAN\")) );\r",
                                                    "// });\r",
                                                    "// } ;\r",
                                                    "//     if (jsonData.code == '{{customerOrderItemTypeCodeTAN}}') {\r",
                                                    "// console.log(\"Sucessful:CustomerOrderTypeCode: \", jsonData.code);\r",
                                                    "//     } else {\r",
                                                    "//         console.log(\"UnSucessful:CustomerOrderTypeCode: \", jsonData.code);\r",
                                                    "//     }\r",
                                                    "    \r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "protocolProfileBehavior": {
                                        "disableBodyPruning": true
                                    },
                                    "request": {
                                        "method": "GET",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n\"code\": \"create\",\r\n\"name\": \"create\",\r\n\"descr\": \"createSOrder\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/BusinessActionTypeCodes",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "BusinessActionTypeCodes"
                                            ]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "CreateBusinessScenariosEntities",
                            "item": [
                                {
                                    "name": "Create Business Scenarios for Non-Commodity Subscription profile",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,204,400]);\r",
                                                    "})\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"sapProvided\": true,\r\n    \"subscriptionProfile\": \"non_commodity\",\r\n    \"customerOrderType\": {\r\n        \"code\": \"UTIL\"\r\n    },\r\n    \"customerOrderItemType\": {\r\n        \"code\": \"USB1\"\r\n    },\r\n    \"externalDocumentType\": {\r\n        \"code\": \"NonCommoditySubscription\"\r\n    },\r\n    \"businessAction\": {\r\n        \"code\": \"create\"\r\n    }\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/UtilitiesBusinessScenarios",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "UtilitiesBusinessScenarios"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Create Business Scenarios for Terminate Non-Commodity Subscription",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,204,400]);\r",
                                                    "})\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"sapProvided\": true,\r\n    \"subscriptionProfile\": \"non_commodity\",\r\n    \"customerOrderType\": {\r\n        \"code\": \"UTIL\"\r\n    },\r\n    \"customerOrderItemType\": {\r\n        \"code\": \"USB3\"\r\n    },\r\n    \"externalDocumentType\": {\r\n        \"code\": \"NonCommoditySubscription\"\r\n    },\r\n    \"businessAction\": {\r\n        \"code\": \"terminate\"\r\n    }\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/UtilitiesBusinessScenarios",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "UtilitiesBusinessScenarios"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Create Business Scenarios for Commodity Subscription profile",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,204,400]);\r",
                                                    "})\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"sapProvided\": true,\r\n    \"subscriptionProfile\": \"commodity\",\r\n    \"customerOrderType\": {\r\n        \"code\": \"UTIL\"\r\n    },\r\n    \"customerOrderItemType\": {\r\n        \"code\": \"USB2\"\r\n    },\r\n    \"externalDocumentType\": {\r\n        \"code\": \"CommoditySubscription\"\r\n    },\r\n    \"businessAction\": {\r\n        \"code\": \"create\"\r\n    }\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/UtilitiesBusinessScenarios",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "UtilitiesBusinessScenarios"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Create Business Scenarios for Commodity UMT1",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,204,400]);\r",
                                                    "})\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "POST",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"sapProvided\": true,\r\n    \"customerOrderType\": {\r\n        \"code\": \"UTIL\"\r\n    },\r\n    \"customerOrderItemType\": {\r\n        \"code\": \"UMT1\"\r\n    },\r\n    \"externalDocumentType\": {\r\n        \"code\": \"SalesOrder\"\r\n    },\r\n    \"businessAction\": {\r\n        \"code\": \"create\"\r\n    },\r\n    \"externalDocumentHeaderType\": \"OR\",\r\n    \"externalDocumentItemType\": \"TAN\"\r\n}",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/UtilitiesBusinessScenarios",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "UtilitiesBusinessScenarios"
                                            ]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "Get Business Scenarios",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                                    "pm.test(\"Business Scenarios response check\", function () {\r",
                                                    "  pm.expect(pm.response.code).to.be.oneOf([200,201,204,400]);\r",
                                                    "})\r",
                                                    "// }"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "protocolProfileBehavior": {
                                        "disableBodyPruning": true
                                    },
                                    "request": {
                                        "method": "GET",
                                        "header": [],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "",
                                            "options": {
                                                "raw": {
                                                    "language": "json"
                                                }
                                            }
                                        },
                                        "url": {
                                            "raw": "{{url}}/api/distribution/v1/config/UtilitiesBusinessScenarios",
                                            "host": ["{{url}}"],
                                            "path": [
                                                "api",
                                                "distribution",
                                                "v1",
                                                "config",
                                                "UtilitiesBusinessScenarios"
                                            ]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "SalesOrganization",
                    "item": [
                        {
                            "name": "CREATE SalesOrganization  U100",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            " var salesOrgU100 = ' ';\r",
                                            "\r",
                                            "\r",
                                            "if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"salesOrgU100\", jsonData.id);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"displayId\": \"U100\",\r\n    \"name\": \"SAP AG\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesOrganization",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "SalesOrganization"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE SalesOrganization 1010",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            " var salesOrg1010 = ' ';\r",
                                            "\r",
                                            "\r",
                                            "if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"salesOrg1010\", jsonData.id);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"displayId\": \"1010\",\r\n    \"name\": \"SAP AG Dereg.\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesOrganization",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "SalesOrganization"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "division.code",
                    "item": [
                        {
                            "name": "CREATE DivisionCodes 01",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let divCode01 = '01'; // value to be set in case of 400\r",
                                            "let divisionCode01 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"divisionCode01\", divCode01);\r",
                                            "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                            "    // pm.environment.get(\"variable_key\");\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"divisionCode01\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Electricity\",\r\n    \"descr\": null,\r\n    \"code\": \"01\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/DivisionCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "DivisionCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE DivisionCodes 00",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let divCode00 = '00'; // value to be set in case of 400\r",
                                            "let divisionCode00 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"divisionCode00\", divCode00);\r",
                                            "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                            "    // pm.environment.get(\"variable_key\");\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"divisionCode00\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Division 00\",\r\n    \"descr\": null,\r\n    \"code\": \"00\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/DivisionCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "DivisionCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "budgetBillingType",
                    "item": [
                        {
                            "name": "Budget Billing Type SU01",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let BudgetBillingType_SU01 = 'SU01'; // value to be set in case of 400\r",
                                            "// let BudgetBillingType_SU01 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"BudgetBillingType_SU01\", BudgetBillingType_SU01);\r",
                                            "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                            "    // pm.environment.get(\"variable_key\");\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"BudgetBillingType_SU01\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n\"code\": \"SU01\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemUtilitiesBudgetBillingTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemUtilitiesBudgetBillingTypeCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "deviceTypePricing",
                    "item": [
                        {
                            "name": "Smart Meter-Device Type",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let DeviceTypeCode_01 = '01'; // value to be set in case of 400\r",
                                            "// let DeviceTypeCode_01 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"DeviceTypeCode_01\", DeviceTypeCode_01);\r",
                                            "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                            "    // pm.environment.get(\"variable_key\");\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"DeviceTypeCode_01\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json;IEEE754Compatible=true",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"code\": \"01\",\r\n    \"name\": \"smart_meter\",\r\n    \"descr\": \"smart_meter\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemUtilitiesDeviceTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemUtilitiesDeviceTypeCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "quantityUnit",
                    "item": [
                        {
                            "name": "UnitOfMeasuresCode Hour",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let Codeh = 'h'; // value to be set in case of 400\r",
                                            "let unitOfMeasureCodeh = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"unitOfMeasureCodeh\", Codeh);\r",
                                            "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                            "    // pm.environment.get(\"variable_key\"a\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"unitOfMeasureCodeh\", jsonData.code);\r",
                                            "} \r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Hour\",\r\n    \"descr\": \"Duration\",\r\n    \"code\": \"h\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/UnitOfMeasuresCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "UnitOfMeasuresCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "UnitOfMeasuresCodes PC",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let CodePC = 'PC'; // value to be set in case of 400\r",
                                            "let unitOfMeasureCodePC = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"unitOfMeasureCodePC\", CodePC);\r",
                                            "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                            "    // pm.environment.get(\"variable_key\"a\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"unitOfMeasureCodePC\", jsonData.code);\r",
                                            "} \r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Piece\",\r\n    \"descr\": \"qunt\",\r\n    \"code\": \"PC\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/UnitOfMeasuresCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "UnitOfMeasuresCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "UnitOfMeasuresCodes EA",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let CodeEA = 'EA'; // value to be set in case of 400\r",
                                            "let unitOfMeasureCodeEA = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"unitOfMeasureCodeEA\", CodeEA);\r",
                                            "       // console.log(pm.environment.get(\"itemTypeCodeUsb1\"));\r",
                                            "    // pm.environment.get(\"variable_key\"a\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"unitOfMeasureCodeEA\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Each\",\r\n    \"descr\": null,\r\n    \"code\": \"EA\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/UnitOfMeasuresCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "UnitOfMeasuresCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Payment Term",
                    "item": [
                        {
                            "name": "CREATE PaymentTermCodes 0001",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let payTermCode0001 = '0001'; // value to be set in case of 400\r",
                                            "let paymentTermCodes0001 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"paymentTermCodes0001\", payTermCode0001);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"paymentTermCodes0001\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Payment Term 1\",\r\n    \"descr\": null,\r\n    \"code\": \"0001\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/PaymentTermCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "PaymentTermCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "conditionType",
                    "item": [
                        {
                            "name": "CREATE CustomerOrderConditionTypeCodes YK07",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let ordCondTypYK07 = 'YK07'; // value to be set in case of 400\r",
                                            "let customerOrderConditionTypeCodeYK07 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderConditionTypeCodeYK07\", ordCondTypYK07);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderConditionTypeCodeYK07\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"YK07 price\",\r\n    \"descr\": null,\r\n    \"code\": \"YK07\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/ConditionTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "ConditionTypeCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE CustomerOrderConditionTypeCodes DRN1",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let ordCondTypDRN1 = 'DRN1'; // value to be set in case of 400\r",
                                            "let customerOrderConditionTypeCodeDRN1 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderConditionTypeCodeDRN1\", ordCondTypDRN1);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderConditionTypeCodeDRN1\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"DRN1 price\",\r\n    \"descr\": null,\r\n    \"code\": \"DRN1\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/ConditionTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "ConditionTypeCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE CustomerOrderConditionTypeCodes DRG1",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let ordCondTypDRG1 = 'DRG1'; // value to be set in case of 400\r",
                                            "let customerOrderConditionTypeCodeDRG1 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderConditionTypeCodeDRG1\", ordCondTypDRG1);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderConditionTypeCodeDRG1\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"DRG1 price\",\r\n    \"descr\": null,\r\n    \"code\": \"DRG1\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/ConditionTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "ConditionTypeCodes"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE CustomerOrderConditionTypeCodes PPR0",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let ordCondTypPPR0 = 'PPR0'; // value to be set in case of 400\r",
                                            "let customerOrderConditionTypeCodePPR0 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderConditionTypeCodePPR0\", ordCondTypPPR0);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderConditionTypeCodePPR0\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"product price\",\r\n    \"descr\": null,\r\n    \"code\": \"PPR0\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/ConditionTypeCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "ConditionTypeCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "currency",
                    "item": [
                        {
                            "name": "CREATE CustomerOrderCurrencyCodes EUR",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let custOrdCurrCodeEUR = 'EUR'; // value to be set in case of 400\r",
                                            "let customerOrderCurrencyCodeEUR = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderCurrencyCodeEUR\", custOrdCurrCodeEUR);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderCurrencyCodeEUR\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"changeType\": \"\",\r\n    \"code\": \"EUR\",\r\n    \"minorUnit\": 0\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CurrencyCodes",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "CurrencyCodes"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "CustomerOrderItemUtilitiesSubsequentDocumentCodes",
                    "item": [
                        {
                            "name": "CREATE SubsequentDocumentCodes UMT1",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let custOrdItmUtilSubseqDocCodeUMT1 = 'UMT1'; // value to be set in case of 400\r",
                                            "let customerOrderItemUtilitiesSubsequentDocumnetCodeUMT1 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUMT1\", custOrdItmUtilSubseqDocCodeUMT1);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUMT1\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Physical\",\r\n    \"descr\": \"SalesOrder TAN\",\r\n    \"code\": \"UMT1\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemUtilitiesSubsequentDocumentCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemUtilitiesSubsequentDocumentCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE SubsequentDocumentCodes UMT2",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let custOrdItmUtilSubseqDocCodeUMT2 = 'UMT2'; // value to be set in case of 400\r",
                                            "let customerOrderItemUtilitiesSubsequentDocumnetCodeUMT2 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUMT2\", custOrdItmUtilSubseqDocCodeUMT2);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUMT2\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Physical\",\r\n    \"descr\": \"SalesOrder CBAO\",\r\n    \"code\": \"UMT2\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemUtilitiesSubsequentDocumentCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemUtilitiesSubsequentDocumentCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE SubsequentDocumentCodes UMT3",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let custOrdItmUtilSubseqDocCodeUMT3 = 'UMT3'; // value to be set in case of 400\r",
                                            "let customerOrderItemUtilitiesSubsequentDocumnetCodeUMT3 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUMT3\", custOrdItmUtilSubseqDocCodeUMT3);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUMT3\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Physical\",\r\n    \"descr\": \"SalesOrder CB1\",\r\n    \"code\": \"UMT3\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemUtilitiesSubsequentDocumentCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemUtilitiesSubsequentDocumentCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE SubsequentDocumentCodes UMT4",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let custOrdItmUtilSubseqDocCodeUMT4 = 'UMT4'; // value to be set in case of 400\r",
                                            "let customerOrderItemUtilitiesSubsequentDocumnetCodeUMT4 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUMT4\", custOrdItmUtilSubseqDocCodeUMT4);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUMT4\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Physical\",\r\n    \"descr\": \"SalesOrder TADN\",\r\n    \"code\": \"UMT4\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemUtilitiesSubsequentDocumentCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemUtilitiesSubsequentDocumentCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE SubsequentDocumentCodes UMT5",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let custOrdItmUtilSubseqDocCodeUMT5 = 'UMT5'; // value to be set in case of 400\r",
                                            "let customerOrderItemUtilitiesSubsequentDocumnetCodeUMT5 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUMT5\", custOrdItmUtilSubseqDocCodeUMT5);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUMT5\", jsonData.code);\r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Physical\",\r\n    \"descr\": \"Physical SalesOrder\",\r\n    \"code\": \"UMT5\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemUtilitiesSubsequentDocumentCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemUtilitiesSubsequentDocumentCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE SubsequentDocumentCodes USB1",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let custOrdItmUtilSubseqDocCodeUsb1 = 'USB1'; // value to be set in case of 400\r",
                                            "let customerOrderItemUtilitiesSubsequentDocumnetCodeUsb1 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUsb1\", custOrdItmUtilSubseqDocCodeUsb1);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUsb1\", jsonData.code); \r",
                                            "}   \r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"NonCommodity Subscription\",\r\n    \"descr\": \"NonCommodity Subscription\",\r\n    \"code\": \"USB1\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemUtilitiesSubsequentDocumentCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemUtilitiesSubsequentDocumentCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE SubsequentDocumentCodes USB2",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let custOrdItmUtilSubseqDocCodeUsb2 = 'USB2'; // value to be set in case of 400\r",
                                            "let customerOrderItemUtilitiesSubsequentDocumnetCodeUSB2 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB2\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUSB2\", custOrdItmUtilSubseqDocCodeUsb2);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUSB2\", jsonData.code); \r",
                                            "}   \r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Commodity Subscription\",\r\n    \"descr\": \"Commodity Subscription\",\r\n    \"code\": \"USB2\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemUtilitiesSubsequentDocumentCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemUtilitiesSubsequentDocumentCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE SubsequentDocumentCodes USB3",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let custOrdItmUtilSubseqDocCodeUSB3 = 'USB3'; // value to be set in case of 400\r",
                                            "let customerOrderItemUtilitiesSubsequentDocumnetCodeUSB3 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB3\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUSB3\", custOrdItmUtilSubseqDocCodeUSB3);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderItemUtilitiesSubsequentDocumnetCodeUSB3\", jsonData.code); \r",
                                            "}   \r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Terminated Non-Commodity Subscription\",\r\n    \"descr\": \"Terminated Non-Commodity Subscription\",\r\n    \"code\": \"USB3\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrderItemUtilitiesSubsequentDocumentCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrderItemUtilitiesSubsequentDocumentCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "PartnerRoleCode",
                    "item": [
                        {
                            "name": "CREATE SalesPartnerRoleCodes SH",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let partnersRoleCodeSH = 'SH'; // value to be set in case of 400\r",
                                            "let salesPartnerRoleCodeSH  = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"salesPartnerRoleCodeSH\", partnersRoleCodeSH);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"salesPartnerRoleCodeSH\", jsonData.code);    \r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"ShippingTo\",\r\n    \"descr\": null,\r\n    \"code\": \"SH\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesPartnerRoleCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesPartnerRoleCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Cancellation Reason Codes",
                    "item": [
                        {
                            "name": "CREATE SalesCancellationReasonCodes 01",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Other Reason\",\r\n    \"descr\": \"Other Reason\",\r\n    \"code\": \"01\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesCancellationReasonCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesCancellationReasonCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE SalesCancellationReasonCodes 02",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let salesCancelReason02 = '02'; // value to be set in case of 400\r",
                                            "let tooExpensiveSalesCancelReason = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB2\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"tooExpensiveSalesCancelReason\", salesCancelReason02);\r",
                                            "        \r",
                                            " } else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"tooExpensiveSalesCancelReason\", jsonData.code);\r",
                                            " }   "
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Too Expensive\",\r\n    \"descr\": \"Too Expensive\",\r\n    \"code\": \"02\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesCancellationReasonCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesCancellationReasonCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE SalesCancellationReasonCodes 03",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Bad Service\",\r\n    \"descr\": \"Bad Service\",\r\n    \"code\": \"03\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesCancellationReasonCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesCancellationReasonCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATESalesCancellationReasonCodes 04",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Not Paid\",\r\n    \"descr\": \"Not Paid\",\r\n    \"code\": \"04\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesCancellationReasonCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesCancellationReasonCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE SalesCancellationReasonCodes 05",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// pm.test(\"Create CustomerOrder. Successful POST request\", function () {\r",
                                            "//      pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "// })\r",
                                            "\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Service Discontinued\",\r\n    \"descr\": \"Service Discontinued\",\r\n    \"code\": \"05\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/SalesCancellationReasonCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "SalesCancellationReasonCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "distributionChannel",
                    "item": [
                        {
                            "name": "CREATE CustomerOrderDistributionChannelCodes U1",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let custOrdDistChannelCodeU1 = 'U1'; // value to be set in case of 400\r",
                                            "let customerOrderDistributionChannelCodeU1 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderDistributionChannelCodeU1\", custOrdDistChannelCodeU1);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderDistributionChannelCodeU1\", jsonData.code);    \r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Channel U1\",\r\n    \"descr\": null,\r\n    \"code\": \"U1\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/DistributionChannelCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "DistributionChannelCodes"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE CustomerOrderDistributionChannelCodes 10",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let custOrdDistChannelCode10 = '10'; // value to be set in case of 400\r",
                                            "let customerOrderDistributionChannelCode10 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderDistributionChannelCode10\", custOrdDistChannelCode10);\r",
                                            "} else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderDistributionChannelCode10\", jsonData.code);    \r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"Channel 10\",\r\n    \"descr\": null,\r\n    \"code\": \"10\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/DistributionChannelCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "DistributionChannelCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Shipping condition",
                    "item": [
                        {
                            "name": "CREATE CustomerOrderShippingConditionCodes 02",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let custOrdShipCondCode02 = '02'; // value to be set in case of 400\r",
                                            "let customerOrderShippingConditionCode02 = ' ';\r",
                                            "\r",
                                            "if (responseCode==400) {\r",
                                            "    // if 400 then check if message \"Entity already exists\" in the response and assign the value of code \"USB1\" to global variable\r",
                                            "        pm.expect(pm.response.json().error.message == \"Entity already exists\" );\r",
                                            "        pm.environment.set(\"customerOrderShippingConditionCode02\", \r",
                                            "                            custOrdShipCondCode02);\r",
                                            "        } else if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"customerOrderShippingConditionCode02\", jsonData.code);    \r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"name\": \"standard\",\r\n    \"descr\": null,\r\n    \"code\": \"02\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/ShippingConditionCodes",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "ShippingConditionCodes"
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "Products",
                    "item": [
                        {
                            "name": "CREATE Product CommodityELEC_SR_00",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "// let PTEST_NONC = '02'; // value to be set in case of 400\r",
                                            "let ELEC_SR_00 = ' ';\r",
                                            "\r",
                                            " if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"ELEC_SR_00\", jsonData.id);    \r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n\"id\": \"{{$guid}}\",\r\n\"displayId\": \"ELEC_SR_00\",\r\n\"name\": \"ELEC_SR_00\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/Product",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "Product"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Product CommodityELEC_SR_01",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "// let PTEST_NONC = '02'; // value to be set in case of 400\r",
                                            "let ELEC_SR_01 = ' ';\r",
                                            "\r",
                                            " if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"ELEC_SR_01\", jsonData.id);    \r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n\"id\": \"{{$guid}}\",\r\n\"displayId\": \"ELEC_SR_01\",\r\n\"name\": \"ELEC_SR_01\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/Product",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "Product"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Product CommodityPCS_E_T_S_Y_01",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "// let PTEST_NONC = '02'; // value to be set in case of 400\r",
                                            "let PCS_E_T_S_Y_01 = ' ';\r",
                                            "\r",
                                            " if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"PCS_E_T_S_Y_01\", jsonData.id);    \r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n\"id\": \"{{$guid}}\",\r\n\"displayId\": \"PCS_E_T_S_Y_01\",\r\n\"name\": \"PCS_E_T_S_Y_01\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/Product",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "Product"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Product CommodityPCS_E_T_S_M_01",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "// let PTEST_NONC = '02'; // value to be set in case of 400\r",
                                            "let PCS_E_T_S_M_01 = ' ';\r",
                                            "\r",
                                            " if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"PCS_E_T_S_M_01\", jsonData.id);    \r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n\"id\": \"{{$guid}}\",\r\n\"displayId\": \"PCS_E_T_S_M_01\",\r\n\"name\": \"PCS_E_T_S_M_01\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/Product",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "Product"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Product Commodity",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "// let PTEST_NONC = '02'; // value to be set in case of 400\r",
                                            "let C4U_2108_Electricity_Single_Rate_Product = ' ';\r",
                                            "\r",
                                            " if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"C4U_2108_Electricity_Single_Rate_Product\", jsonData.id);    \r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n\"id\": \"{{$guid}}\",\r\n\"displayId\": \"C4U_2108_Electricity_Single_Rate_Product\",\r\n\"name\": \"C4U_2108_Electricity_Single_Rate_Product\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/Product",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "Product"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE Product Commodity DoubleRegister",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                            "})\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            "// let PTEST_NONC = '02'; // value to be set in case of 400\r",
                                            "let C4U_2108_Electricity_Double_Rate_Product = ' ';\r",
                                            "\r",
                                            " if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"C4U_2108_Electricity_Double_Rate_Product\", jsonData.id);    \r",
                                            "}\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n\"id\": \"{{$guid}}\",\r\n\"displayId\": \"C4U_2108_Electricity_Double_Rate_Product\",\r\n\"name\": \"C4U_2108_Electricity_Double_Rate_Product\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/Product",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "Product"]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "BP & BA",
                    "item": [
                        {
                            "name": "SB JWT",
                            "item": [
                                {
                                    "name": "SB JWT Token",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "",
                                                    "var jsonData = JSON.parse(responseBody);",
                                                    "if(jsonData && jsonData.access_token){",
                                                    "    postman.setEnvironmentVariable(\"sb_jwt\", jsonData.access_token);",
                                                    "}",
                                                    "",
                                                    "pm.test(\"Successful POST request\", function () {",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                                    "});",
                                                    ""
                                                ],
                                                "type": "text/javascript"
                                            }
                                        },
                                        {
                                            "listen": "prerequest",
                                            "script": {
                                                "exec": [""],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "auth": {
                                            "type": "noauth"
                                        },
                                        "method": "POST",
                                        "header": [
                                            {
                                                "key": "Accept",
                                                "value": "application/json"
                                            },
                                            {
                                                "key": "X-CorrelationID",
                                                "value": "",
                                                "disabled": true
                                            },
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "body": {
                                            "mode": "urlencoded",
                                            "urlencoded": [
                                                {
                                                    "key": "response_type",
                                                    "value": "token",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "grant_type",
                                                    "value": "client_credentials",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_id",
                                                    "value": "{{uaa_sb_client_id}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_secret",
                                                    "value": "{{uaa_sb_client_secret}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "scope",
                                                    "value": "",
                                                    "type": "text"
                                                }
                                            ]
                                        },
                                        "url": {
                                            "raw": "{{jwtProtocol}}://{{uaa-domain}}/oauth/token",
                                            "protocol": "{{jwtProtocol}}",
                                            "host": ["{{uaa-domain}}"],
                                            "path": ["oauth", "token"]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "Create BP w/ All fields",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "/* Check for response for code 200,201 & 400\r",
                                            "\r",
                                            "   if the respoopnse code is 400 that means the value is existing and so need not break \r",
                                            "   the flow. Just assign the value of the code to the global variable\r",
                                            "*/\r",
                                            "//if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,204]);\r",
                                            "})\r",
                                            "\r",
                                            "var jsonData = pm.response.json();\r",
                                            "let bpDisplayID = ' '; \r",
                                            "\r",
                                            "if(pm.response.status == 200 || pm.response.code == 201 ){\r",
                                            "        pm.environment.set(\"env_businessPartnerGUId\", jsonData?.id);\r",
                                            "    }\r",
                                            "  \r",
                                            "\r",
                                            "// setTimeout(function(){ \r",
                                            "//         console.log('Delay for 10secs');\r",
                                            "//     }, 10000);\r",
                                            "//}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "var partnerId = '';\r",
                                            "let partId = Math.floor(100000 + Math.random() * 1000000000);\r",
                                            "pm.globals.set(\"partnerId\", partId);\r",
                                            "// Display ID\r",
                                            " var BPdisplID = '';\r",
                                            "var displID= Math.floor(1000000000 + Math.random() * 9000000)\r",
                                            "BPdisplID = String(displID).substring(2);\r",
                                            "pm.globals.set(\"BPdisplID\", BPdisplID);\r",
                                            "var fname;\r",
                                            "fname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                                            "pm.globals.set(\"fname\",fname);\r",
                                            "var lname;\r",
                                            "lname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                                            "pm.globals.set(\"lname\",lname);\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{ \r\n    \"displayId\":\"{{BPdisplID}}\",\r\n    \"businessPartnerType\": \"person\",\r\n    \"person\": {\r\n        \"nameDetails\": {\r\n            \"firstName\": \"{{fname}}\",\r\n            \"lastName\": \"{{lname}}\",\r\n            \"academicTitle\": {\r\n                \"code\": \"0004\"\r\n            }\r\n        },\r\n        \"birthDate\": \"1990-12-31\",\r\n        \"gender\": {\r\n            \"code\": \"0\"\r\n        },\r\n        \"language\": {\r\n            \"code\": \"en\"\r\n        },\r\n        \"correspondenceLanguage\": {\r\n            \"code\": \"en\"\r\n        },\r\n        \"nationality\": {\r\n            \"code\": \"US\"\r\n        }\r\n    },\r\n    \"bankAccounts\": [\r\n        {\r\n            \"id\": \"0001\",\r\n            \"bankAccountName\": \"bankAccountName1\",\r\n            \"bankControlKey\": \"01\",\r\n            \"validFrom\": \"2020-01-01\",\r\n            \"validTo\": \"2021-12-31\",\r\n            \"bankAccountHolderName\": \"bankAccountHolderName1\",\r\n            \"IBAN\": \"DE46230300000001990033\",\r\n            \"bankAccount\": \"2110011234\",\r\n            \"bankNumber\": \"23030000\",\r\n            \"bankAccountReference\": \"bankAccRef1\",\r\n            \"bankCountry\": {\r\n                \"code\": \"DE\"\r\n            }\r\n        }\r\n    ],\r\n    \"taxNumbers\": [\r\n        {\r\n            \"taxNumber\": \"DE204797706\",\r\n            \"taxNumberType\": {\r\n                \"code\": \"DE0\"\r\n            }\r\n        }\r\n    ],\r\n    \"roles\": [\r\n        {\r\n            \"validFrom\": \"2020-01-01\",\r\n            \"validTo\": \"9999-12-31\",\r\n            \"role\": {\r\n                \"code\": \"MKK\"\r\n            }\r\n        },\r\n        {\r\n            \"validFrom\": \"2021-01-01\",\r\n            \"validTo\": \"9999-12-31\",\r\n            \"role\": {\r\n                \"code\": \"FLCU01\"\r\n            }\r\n        },\r\n        {\r\n            \"validFrom\": \"2021-01-01\",\r\n            \"validTo\": \"9999-12-31\",\r\n            \"role\": {\r\n                \"code\": \"UDM000\"\r\n            }\r\n        },\r\n        {\r\n            \"validFrom\": \"2021-01-01\",\r\n            \"validTo\": \"9999-12-31\",\r\n            \"role\": {\r\n                \"code\": \"FLCU00\"\r\n            }\r\n        },\r\n        {\r\n            \"validFrom\": \"2021-01-01\",\r\n            \"validTo\": \"9999-12-31\",\r\n            \"role\": {\r\n                \"code\": \"UKM000\"\r\n            }\r\n        }\r\n    ],\r\n    \"isBlocked\": false,\r\n    \"addressData\": [\r\n        {\r\n            \"usages\": [\r\n                {\r\n                    \"isStandard\": false,\r\n                    \"validFrom\": \"2020-12-31\",\r\n                    \"validTo\": \"9999-12-31\",\r\n                    \"usage\": {\r\n                        \"code\": \"XXDEFAULT\"\r\n                    }\r\n                }\r\n            ],\r\n            \"emailAddresses\": [\r\n                {\r\n                    \"address\": \"zack.haynes@email.com\"\r\n                }\r\n            ],\r\n            \"phoneNumbers\": [\r\n                {\r\n                    \"isMobile\": true,\r\n                    \"number\": \"1234567890\",\r\n                    \"numberExtension\": \"123\",\r\n                    \"country\": {\r\n                        \"code\": \"US\"\r\n                    }\r\n                }\r\n            ],\r\n            \"validFrom\": \"2020-12-31\",\r\n            \"validTo\": \"9999-12-31\",\r\n            \"postalAddressType\": \"personPostalAddress\",\r\n            \"personPostalAddress\": {\r\n                \"street\": {\r\n                    \"name\": \"Römerstrabe\"\r\n                },\r\n                \"houseNumber\": \"1230\",\r\n                \"town\": {\r\n                    \"name\": \"Budenheim\"\r\n                },\r\n                \"postCode\": \"55257\",\r\n                \"streetSuffix1\": \"suffix1 v1\",\r\n                \"streetSuffix2\": \"suffix2 v1\",\r\n                \"companyPostalCode\": \"55257\",\r\n                \"primaryRegion\": {\r\n                    \"code\": \"RP\"\r\n                },\r\n                \"country\": {\r\n                    \"code\": \"DE\"\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"customerInformation\": {\r\n        \"salesArrangements\": [\r\n            {\r\n                \"salesAreaRef\": {\r\n                    \"salesOrganizationDisplayId\": \"1010\",\r\n                    \"distributionChannel\": \"10\",\r\n                    \"division\": \"01\"\r\n                },\r\n                \"functions\": [\r\n                    {\r\n                        \"functionName\": \"Sold-to Party\",\r\n                        \"functionPartnerType\": \"functionPartnerCustomer\",\r\n                        \"functionCode\": {\r\n                            \"code\": \"AG\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"functionName\": \"Bill-to Party\",\r\n                        \"functionPartnerType\": \"functionPartnerCustomer\",\r\n                        \"functionCode\": {\r\n                            \"code\": \"RE\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"functionName\": \"Ship-to Party\",\r\n                        \"functionPartnerType\": \"functionPartnerCustomer\",\r\n                        \"functionCode\": {\r\n                            \"code\": \"WE\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"functionName\": \"Payer\",\r\n                        \"functionPartnerType\": \"functionPartnerCustomer\",\r\n                        \"functionCode\": {\r\n                            \"code\": \"RG\"\r\n                        }\r\n                    }\r\n                ],\r\n                \"incotermsTransferLocationName\": \"FH\",\r\n                \"deliveryPriority\": {\r\n                    \"code\": \"02\"\r\n                },\r\n                \"currency\": {\r\n                    \"code\": \"EUR\"\r\n                },\r\n                \"salesArrangementGroup\": {\r\n                    \"code\": \"01\"\r\n                },\r\n                \"salesArrangementPriceGroup\": {\r\n                    \"code\": \"C1\"\r\n                },\r\n                \"incotermsClassification\": {\r\n                    \"code\": \"FH\"\r\n                }\r\n            },\r\n            {\r\n                \"salesAreaRef\": {\r\n                    \"salesOrganizationDisplayId\": \"1010\",\r\n                    \"distributionChannel\": \"10\",\r\n                    \"division\": \"00\"\r\n                },\r\n                \"functions\": [\r\n                    {\r\n                        \"functionName\": \"Sold-to Party\",\r\n                        \"functionPartnerType\": \"functionPartnerCustomer\",\r\n                        \"functionCode\": {\r\n                            \"code\": \"AG\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"functionName\": \"Bill-to Party\",\r\n                        \"functionPartnerType\": \"functionPartnerCustomer\",\r\n                        \"functionCode\": {\r\n                            \"code\": \"RE\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"functionName\": \"Ship-to Party\",\r\n                        \"functionPartnerType\": \"functionPartnerCustomer\",\r\n                        \"functionCode\": {\r\n                            \"code\": \"WE\"\r\n                        }\r\n                    },\r\n                    {\r\n                        \"functionName\": \"Payer\",\r\n                        \"functionPartnerType\": \"functionPartnerCustomer\",\r\n                        \"functionCode\": {\r\n                            \"code\": \"RG\"\r\n                        }\r\n                    }\r\n                ],\r\n                \"incotermsTransferLocationName\": \"FH\",\r\n                \"deliveryPriority\": {\r\n                    \"code\": \"02\"\r\n                },\r\n                \"currency\": {\r\n                    \"code\": \"EUR\"\r\n                },\r\n                \"salesArrangementGroup\": {\r\n                    \"code\": \"01\"\r\n                },\r\n                \"salesArrangementPriceGroup\": {\r\n                    \"code\": \"C1\"\r\n                },\r\n                \"incotermsClassification\": {\r\n                    \"code\": \"FH\"\r\n                }\r\n            }\r\n        ],\r\n        \"taxClassifications\": [\r\n            {\r\n                \"country\": {\r\n                    \"code\": \"DE\"\r\n                },\r\n                \"taxCategory\": {\r\n                    \"code\": \"TTX1\"\r\n                },\r\n                \"taxClassification\": {\r\n                    \"code\": \"1\"\r\n                }\r\n            }\r\n        ],\r\n        \"vatLiability\": true,\r\n        \"customerAccountGroup\": {\r\n            \"code\": \"FICA\"\r\n        }\r\n    }\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/businessPartner/v1/BusinessPartner",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "businessPartner",
                                        "v1",
                                        "BusinessPartner"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Read BP from S4HC",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "    // pm.test(`Create ${pm.globals.get('entity')}. Successful POST request UTILITIESCLOUDSOLUTION-2920`, function () {\r",
                                            "if( pm.response.code == 200 || pm.response.code == 201 ) {\r",
                                            "    var jsonData = pm.response.json();\r",
                                            "    var bp = jsonData?.d?.results[0]?.BusinessPartner;\r",
                                            "     postman.setEnvironmentVariable(\"bp\",bp);\r",
                                            "    console.log(\"bp\",bp);\r",
                                            "    if(jsonData && bp) {\r",
                                            "        postman.setNextRequest(\"Read Customer from SB system\");\r",
                                            "    } else {\r",
                                            "        postman.setNextRequest(\"Read existing BP from S4HC\");\r",
                                            "    }\r",
                                            "} else if (pm.response.code == 401) {\r",
                                            "    console.log(\"***************   Please Note         ****************\",\r",
                                            "    \"Could not read BP from S4 . Kindly verify s4 credentials. Skipping Complete Ditribution Requests\",\r",
                                            "    \"***************   Please Note         ****************\")\r",
                                            "    postman.setNextRequest(0);\r",
                                            "} else {\r",
                                            "    postman.setNextRequest(\"Read existing BP from S4HC\");  \r",
                                            "}  \r",
                                            "// setTimeout(function(){ \r",
                                            "//         console.log('Delay for 50secs');\r",
                                            "    \r",
                                            "//     }, 50000);\r",
                                            "    console.log(\"s4bp\",pm.environment.get(\"bp\"));\r",
                                            "    // }\r",
                                            "    // );\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "// setTimeout(function(){ \r",
                                            "//         console.log('Delay for 6.5min');\r",
                                            "//     }, 400000);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "basic",
                                    "basic": [
                                        {
                                            "key": "username",
                                            "value": "{{s4hc_username}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "password",
                                            "value": "{{s4hc_password}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{s4hc_url}}/sap/opu/odata/sap/API_BUSINESS_PARTNER//A_BusinessPartner?$format=json&$filter=BusinessPartnerUUID eq guid'{{env_businessPartnerGUId}}'",
                                    "host": ["{{s4hc_url}}"],
                                    "path": [
                                        "sap",
                                        "opu",
                                        "odata",
                                        "sap",
                                        "API_BUSINESS_PARTNER",
                                        "",
                                        "A_BusinessPartner"
                                    ],
                                    "query": [
                                        {
                                            "key": "$format",
                                            "value": "json"
                                        },
                                        {
                                            "key": "$filter",
                                            "value": "BusinessPartnerUUID eq guid'{{env_businessPartnerGUId}}'"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Read existing BP from S4HC",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "    // pm.test(`Create ${pm.globals.get('entity')}. Successful POST request UTILITIESCLOUDSOLUTION-2920`, function () {\r",
                                            "        var jsonData = pm.response.json()\r",
                                            "        var partnerIdSubscriptionSingleReg = ' ';\r",
                                            "\r",
                                            "        if ( (pm.response.code == 200 || pm.response.code == 201) && jsonData?.d?.results[0]){\r",
                                            "            var env_businessPartnerGUId = pm.environment.get(\"env_businessPartnerGUId\");\r",
                                            "            pm.environment.set(\"env_businessPartnerGUId\", env_businessPartnerGUId);\r",
                                            "          } else if (pm.response.code == 401 ) {\r",
                                            "            console.log(\"***************   Please Note         ****************\",\r",
                                            "    \"Could not read BP from S4 . Kindly verify s4 credentials. Skipping Complete Ditribution Requests\",\r",
                                            "    \"***************   Please Note         ****************\");\r",
                                            "        } else if (pm.response.code == 404) {\r",
                                            "console.log(\"BP/Customer not found in Subscription System.Please Connect with BP team for Resolution. Aborting the Newman run\");\r",
                                            "        } else {\r",
                                            "            console.log(\"*****\" + \"Failed to connect to S4 HANA Cloud. Will impact BP replication. Check the s4 hc system status\" +  \"*******\");\r",
                                            "        } \r",
                                            "    // });\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "    // pm.test(`Create ${pm.globals.get('entity')}. Successful POST request UTILITIESCLOUDSOLUTION-2920`, function () {\r",
                                            "if (pm.environment.get(\"url\").includes('test')) {\r",
                                            "    console.log(\"test\")\r",
                                            "    pm.environment.set(\"env_businessPartnerGUId\", \"eb02f5da-6695-49b1-a119-ee801da21825\");\r",
                                            "    pm.environment.set(\"bp\", \"1020582\");\r",
                                            "    postman.setNextRequest(\"CREATE BillingAccount (API)\");\r",
                                            "  \r",
                                            "}  else if (pm.environment.get(\"url\").includes('dev')) {\r",
                                            "    pm.environment.set(\"env_businessPartnerGUId\", \"6f2603b1-4914-49e3-95e8-69eafa1165e7\");\r",
                                            "    pm.environment.set(\"bp\", \"2290122\");\r",
                                            "    postman.setNextRequest(\"CREATE BillingAccount (API)\");\r",
                                            "} \r",
                                            "// });"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "basic",
                                    "basic": [
                                        {
                                            "key": "password",
                                            "value": "{{s4hc_password}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "username",
                                            "value": "{{s4hc_username}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{s4hc_url}}/sap/opu/odata/sap/API_BUSINESS_PARTNER//A_BusinessPartner?$format=json&$filter=BusinessPartnerUUID eq guid'{{env_businessPartnerGUId}}'",
                                    "host": ["{{s4hc_url}}"],
                                    "path": [
                                        "sap",
                                        "opu",
                                        "odata",
                                        "sap",
                                        "API_BUSINESS_PARTNER",
                                        "",
                                        "A_BusinessPartner"
                                    ],
                                    "query": [
                                        {
                                            "key": "$format",
                                            "value": "json"
                                        },
                                        {
                                            "key": "$filter",
                                            "value": "BusinessPartnerUUID eq guid'{{env_businessPartnerGUId}}'"
                                        },
                                        {
                                            "key": "$filter",
                                            "value": "BusinessPartnerUUID eq guid'4f6f80c6-bb53-46d0-9d2a-2791560d2ba9'",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Read Customer from SB system",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"response check\", function () {\r",
                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404]);\r",
                                            "})\r",
                                            "\r",
                                            "var jsonData = pm.response.json()\r",
                                            " //var customer = jsonData.customerNumber;\r",
                                            "// pm.expect(customer).to.eql(\"{{bpDisplayID}}\");\r",
                                            "if(pm.response.code === 200 ) {\r",
                                            "\r",
                                            "postman.setNextRequest(\"CREATE BillingAccount (API)\");  \r",
                                            "} \r",
                                            "else {\r",
                                            "if (pm.environment.get(\"url\").includes('test')) {\r",
                                            "    console.log(\"test\")\r",
                                            "    console.log(\"*********************************\")\r",
                                            "    console.log(\"BP/Customer is not replicated tro Subscription System. Please Contact BP team to resolve the issue.Using the hardcoded BP and BA for the request\");\r",
                                            "postman.setEnvironmentVariable(\"CommonBillingAccount\", 000000036818);\r",
                                            "  pm.environment.set(\"env_businessPartnerGUId\", \"eb02f5da-6695-49b1-a119-ee801da21825\");\r",
                                            "    pm.environment.set(\"bp\", \"1020582\");\r",
                                            " postman.setNextRequest(\"CREATE BillingAccount (API)\");\r",
                                            "}  else if (pm.environment.get(\"url\").includes('dev')) {\r",
                                            "    console.log(\"*********************************\")\r",
                                            " console.log(\"BP/Customer is not replicated tro Subscription System. Please Contact BP team to resolve the issue.Using the hardcoded BP and BA for the request\");\r",
                                            " pm.environment.set(\"env_businessPartnerGUId\", \"6f2603b1-4914-49e3-95e8-69eafa1165e7\");\r",
                                            "    pm.environment.set(\"bp\", \"2290122\");\r",
                                            " postman.setEnvironmentVariable(\"CommonBillingAccount\", 000000017336);\r",
                                            " postman.setNextRequest(\"CREATE BillingAccount (API)\");\r",
                                            "} \r",
                                            "\r",
                                            "\r",
                                            " \r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "// setTimeout(function(){ \r",
                                            "//         console.log('Delay for 6.5min');\r",
                                            "//     }, 400000);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{sb_jwt}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{sb_url}}/api/business-partner/v3/customers/{{bp}}",
                                    "host": ["{{sb_url}}"],
                                    "path": [
                                        "api",
                                        "business-partner",
                                        "v3",
                                        "customers",
                                        "{{bp}}"
                                    ],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "organization($expand=nameDetails)",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE BillingAccount (API)",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// if (JSON.parse(pm.environment.get('env_featureFlags'))['billing-accounts'] === true) {    \r",
                                            "    pm.test(\"CREATE BillingAccount (API). Successful POST request\", function () {\r",
                                            "        pm.expect(pm.response.code).to.be.oneOf([200,201,204,400]);\r",
                                            "    })\r",
                                            "if( pm.response.code == 200 || pm.response.code == 201 ) {\r",
                                            "    var jsonData = JSON.parse(responseBody);\r",
                                            "    var CommonBillingAccount = jsonData.displayId;\r",
                                            "    postman.setEnvironmentVariable(\"CommonBillingAccount\", CommonBillingAccount );\r",
                                            "    console.log(\"Contract Account\",CommonBillingAccount)\r",
                                            "}\r",
                                            "    if(pm.response.status == 400){\r",
                                            "if (pm.environment.get(\"url\").includes('test')) {\r",
                                            "    console.log(\"test\")\r",
                                            "    console.log(\"*********************************\")\r",
                                            "    console.log(\"BP/Customer is not replicated tro Subscription System. Please Contact BP team to resolve the issue.Using the hardcoded BP and BA for the request\");\r",
                                            "postman.setEnvironmentVariable(\"CommonBillingAccount\", 000000036818 );\r",
                                            "pm.environment.set(\"env_businessPartnerGUId\", \"eb02f5da-6695-49b1-a119-ee801da21825\");\r",
                                            " pm.environment.set(\"bp\",1020582);\r",
                                            " postman.setNextRequest(\"CustomerOrdersUsageNonCom\");\r",
                                            "}  else if (pm.environment.get(\"url\").includes('dev')) {\r",
                                            "    console.log(\"*********************************\")\r",
                                            " console.log(\"BP/Customer is not replicated tro Subscription System. Please Contact BP team to resolve the issue.Using the hardcoded BP and BA for the request\");\r",
                                            " pm.environment.set(\"bp\",2289721);\r",
                                            " pm.environment.set(\"env_businessPartnerGUId\", \"6f2603b1-4914-49e3-95e8-69eafa1165e7\");\r",
                                            " postman.setEnvironmentVariable(\"CommonBillingAccount\", 000000017336);\r",
                                            " postman.setNextRequest(\"CustomerOrdersUsageNonCom\");\r",
                                            "}\r",
                                            "\r",
                                            "    postman.setNextRequest(\"CustomerOrdersUsageNonCom\");\r",
                                            "// }\r",
                                            "}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "setTimeout(function(){}, 5000);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{jwt}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n\r\n    \"displayId\": \"{{$randomBankAccount}}\",\r\n\r\n    \"category\": {\r\n\r\n        \"code\": \"Y1\"\r\n\r\n    },\r\n\r\n    \"partner\": {\r\n\r\n        \"businessPartner\": {\r\n\r\n            \"id\": \"{{env_businessPartnerGUId}}\"\r\n\r\n        },\r\n\r\n        \"accountManagementData\": {\r\n\r\n            \"name\": \"CA Test-{{$randomInt}}\",\r\n\r\n            \"billingAccountRelationship\": {\r\n\r\n                \"code\": \"Y1\"\r\n\r\n            },\r\n\r\n            \"toleranceGroup\": {\r\n\r\n                \"code\": \"Y001\"\r\n\r\n            },\r\n\r\n            \"clearingCategory\": null,\r\n\r\n            \"paymentCondition\": {\r\n\r\n                \"code\": \"YN01\"\r\n\r\n            },\r\n\r\n            \"accountDeterminationCode\": {\r\n\r\n                \"code\": \"Y1\"\r\n\r\n            }\r\n\r\n        },\r\n\r\n        \"paymentControl\": {\r\n\r\n            \"companyCodeGroup\": \"1010\",\r\n\r\n            \"standardCompanyCode\": \"1010\"\r\n\r\n        },\r\n\r\n        \"taxControl\": {\r\n\r\n            \"supplyingCountry\": {\r\n\r\n                \"code\": \"CA\"\r\n\r\n            }\r\n\r\n        },\r\n\r\n        \"dunningControl\": {\r\n\r\n            \"dunningProcedure\": {\r\n\r\n                \"code\": \"01\"\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/{{env_apiBa}}/BillingAccount",
                                    "host": ["{{url}}"],
                                    "path": ["{{env_apiBa}}", "BillingAccount"],
                                    "query": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json;IEEE754Compatible=true",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                }
            ],
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [""]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [""]
                    }
                }
            ]
        },
        {
            "name": "Commodity Subscription Order-SingleRegister",
            "item": [
                {
                    "name": "MCM2TMD2C4E",
                    "item": [
                        {
                            "name": "FEATURE FLAGS",
                            "item": [
                                {
                                    "name": "GET: all feature flags",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"/api/v1/features/export\", function () {",
                                                    "    pm.expect(pm.response.code).to.be.oneOf([200,201,204,400,401,402,403,404,500,501,502,503]);",
                                                    "",
                                                    "    const responseJSON = pm.response.json();",
                                                    "    const { flags } = responseJSON;",
                                                    "",
                                                    "    const tenantId = pm.environment.get('tenant_id');",
                                                    "",
                                                    "    const flagsHashMap = flags.reduce((hashMap, flag) => {",
                                                    "        const tenantShipment = flag.directShipments",
                                                    "            .find(directShipment => directShipment.receivers",
                                                    "                .some(receiver => receiver === tenantId)",
                                                    "            );",
                                                    "        ",
                                                    "        let variationIndex = !flag.enabled ",
                                                    "            ? flag.offVariationIndex ",
                                                    "            : tenantShipment ",
                                                    "                ? tenantShipment.variationIndex ",
                                                    "                : flag.defaultVariationIndex;",
                                                    "        ",
                                                    "",
                                                    "        hashMap[flag.id] = flag.variations[variationIndex] === 'true';",
                                                    "        return hashMap;",
                                                    "    }, {});",
                                                    "",
                                                    "    console.log(flagsHashMap['technical-master-data-service-1.5']);",
                                                    "",
                                                    "    pm.environment.set('env_featureFlag_TMD_1.5', flagsHashMap['technical-master-data-service-1.5']);",
                                                    "",
                                                    "    console.log(pm.environment.get('env_featureFlag_TMD_1.5'));",
                                                    "});",
                                                    "",
                                                    "",
                                                    ""
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "method": "GET",
                                        "header": [],
                                        "url": {
                                            "raw": "{{feature_flag_uri}}/api/v1/features/export",
                                            "host": ["{{feature_flag_uri}}"],
                                            "path": [
                                                "api",
                                                "v1",
                                                "features",
                                                "export"
                                            ]
                                        }
                                    },
                                    "response": []
                                }
                            ],
                            "auth": {
                                "type": "basic",
                                "basic": [
                                    {
                                        "key": "password",
                                        "value": "{{feature_flag_password}}",
                                        "type": "string"
                                    },
                                    {
                                        "key": "username",
                                        "value": "{{feature_flag_username}}",
                                        "type": "string"
                                    }
                                ]
                            },
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "type": "text/javascript",
                                        "exec": [""]
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "type": "text/javascript",
                                        "exec": [""]
                                    }
                                }
                            ]
                        },
                        {
                            "name": "MCM JWT Token",
                            "item": [
                                {
                                    "name": "MCM JWT Token",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "",
                                                    "var jsonData = JSON.parse(responseBody);",
                                                    "if(jsonData && jsonData.access_token){",
                                                    "    postman.setEnvironmentVariable(\"jwt_MCM_Tech_Data\", jsonData.access_token);",
                                                    "}",
                                                    "",
                                                    "pm.test(\"Successful POST request\", function () {",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                                    "});",
                                                    "",
                                                    "if (pm.environment.get('env_featureFlag_TMD_1.5')) {",
                                                    "    postman.setNextRequest(\"GET Service Document\");",
                                                    "}  else {",
                                                    "    postman.setNextRequest(\"GET Service Document - Old\");",
                                                    "} ",
                                                    ""
                                                ],
                                                "type": "text/javascript"
                                            }
                                        },
                                        {
                                            "listen": "prerequest",
                                            "script": {
                                                "exec": [""],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "auth": {
                                            "type": "noauth"
                                        },
                                        "method": "POST",
                                        "header": [
                                            {
                                                "key": "Accept",
                                                "value": "application/json"
                                            },
                                            {
                                                "key": "X-CorrelationID",
                                                "value": "",
                                                "disabled": true
                                            },
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "body": {
                                            "mode": "urlencoded",
                                            "urlencoded": [
                                                {
                                                    "key": "response_type",
                                                    "value": "token",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "grant_type",
                                                    "value": "client_credentials",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_id",
                                                    "value": "{{clientid_MCM}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_secret",
                                                    "value": "{{clientsecret_MCM}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "scope",
                                                    "value": "",
                                                    "type": "text"
                                                }
                                            ]
                                        },
                                        "url": {
                                            "raw": "{{authurl}}/oauth/token",
                                            "host": ["{{authurl}}"],
                                            "path": ["oauth", "token"]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "SingleRegister Batched - Create Instance and Configure",
                            "item": [
                                {
                                    "name": "Service Metadata",
                                    "item": [
                                        {
                                            "name": "GET Service Document",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "pm.test(\"Get Service Document check\", function () {\r",
                                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Service Metadata",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "    pm.test(\"Get Service Metadata check\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$metadata",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$metadata"]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Read MCM Classes & MCM Models",
                                    "item": [
                                        {
                                            "name": "GET All MCM Classes",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "    pm.test(\"Get MCM Classes check\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                            "});\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MeasurementConceptClasses?$orderby=idText&$select=idText,name,description",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MeasurementConceptClasses"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$orderby",
                                                            "value": "idText",
                                                            "description": "Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)"
                                                        },
                                                        {
                                                            "key": "$select",
                                                            "value": "idText,name,description",
                                                            "description": "Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Model \"B_S_M1 - Standard-Bezug Strom\" with maLos, MClass(Melos, MTasks, MeteringProcedures, Actors) Copy",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "    pm.test(\"Get Model B_S_M1 check\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)?$expand=marketLocations,measurementClass($expand=meteringLocations($expand=meteringTasks($expand=meteringProcedures)),actors)",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$skip",
                                                            "value": "71282403",
                                                            "description": "Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$search",
                                                            "value": "aute sit velit ex",
                                                            "description": "Search items by search phrases, see [Searching](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionsearch)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$filter",
                                                            "value": "aute sit velit ex",
                                                            "description": "Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$count",
                                                            "value": "true",
                                                            "description": "Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$orderby",
                                                            "value": "description,conceptType_code",
                                                            "description": "Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$select",
                                                            "value": "name,status_code",
                                                            "description": "Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$expand",
                                                            "value": "marketLocations,measurementClass($expand=meteringLocations($expand=meteringTasks($expand=meteringProcedures)),actors)"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Model Formula \"B_S_M1\" /MaLos /Formula /Usages",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "    pm.test(\"Get Model Formula B_S_M1 check\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)?$expand=marketLocations($expand=calculationRules($expand=formula($expand=formulaSteps),usages)),modelOperands",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$skip",
                                                            "value": "71282403",
                                                            "description": "Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$search",
                                                            "value": "aute sit velit ex",
                                                            "description": "Search items by search phrases, see [Searching](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionsearch)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$filter",
                                                            "value": "aute sit velit ex",
                                                            "description": "Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$count",
                                                            "value": "true",
                                                            "description": "Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$orderby",
                                                            "value": "description,conceptType_code",
                                                            "description": "Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$select",
                                                            "value": "name,status_code",
                                                            "description": "Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$expand",
                                                            "value": "marketLocations($expand=calculationRules($expand=formula($expand=formulaSteps),usages)),modelOperands"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "New Instance from MCM Model \"B_S_M1 Standard Bezug Strom\"",
                                    "item": [
                                        {
                                            "name": "Create Instance with Reference to Model \"B_S_M1\"",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Creation of Instance Check\", function () {",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);",
                                                            "});",
                                                            "",
                                                            "var responseCode = pm.response.code;",
                                                            "if ( responseCode ===  200 || responseCode ===  201){",
                                                            "",
                                                            "var jsonResponse = JSON.parse(responseBody);",
                                                            "var instanceUuid = jsonResponse?.id;",
                                                            "var addressId = jsonResponse?.addresses[0]?.id;",
                                                            "var meloId = jsonResponse?.meteringLocations[0]?.id;",
                                                            "var maloId = jsonResponse?.marketLocations[0]?.id;",
                                                            "var changeProcessId = jsonResponse?.changeProcesses[0]?.id;",
                                                            "var meloPDId = jsonResponse?.changeProcesses[0]?.processData?.meteringLocationsPD[0]?.id;",
                                                            "var meloTaskPDId = jsonResponse?.changeProcesses[0]?.processData?.meteringLocationsPD[0]?.meteringTasksPD[0]?.id;",
                                                            "var maloPDId = jsonResponse?.changeProcesses[0]?.processData?.marketLocationsPD[0]?.id;",
                                                            "var actorId1 = jsonResponse?.actors[0]?.id;",
                                                            "var actorId2 = jsonResponse?.actors[1]?.id;",
                                                            "var meloTaskId = jsonResponse?.meteringLocations[0]?.meteringTasks[0]?.id;",
                                                            "var maloCalcRuleId = jsonResponse?.marketLocations[0]?.calculationRules[0]?.id;",
                                                            "pm.environment.set(\"instanceId\", instanceUuid);",
                                                            "pm.environment.set(\"addressId-1\", addressId);",
                                                            "pm.environment.set(\"meloId-1\", meloId);",
                                                            "pm.environment.set(\"maloId-1\", maloId);",
                                                            "pm.environment.set(\"meloPDId-1\", meloPDId);",
                                                            "pm.environment.set(\"meloTaskPDId-1\", meloTaskPDId);",
                                                            "pm.environment.set(\"maloPDId-1\", maloPDId);",
                                                            "pm.environment.set(\"changeProcessId-1\", changeProcessId);",
                                                            "pm.environment.set(\"actorId-1\", actorId1);",
                                                            "pm.environment.set(\"actorId-2\", actorId2);",
                                                            "pm.environment.set(\"meloTaskId\", meloTaskId);",
                                                            "pm.environment.set(\"maloCalcRuleId\", maloCalcRuleId);",
                                                            "} else {",
                                                            "    console.log(\"MCM System is down\");",
                                                            "    postman.setNextRequest(0);",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                },
                                                {
                                                    "listen": "prerequest",
                                                    "script": {
                                                        "exec": [
                                                            "var lv_timestamp = new Date();\r",
                                                            "\r",
                                                            "var lv_month = lv_timestamp.getMonth()+1;\r",
                                                            "var lv_date =  lv_timestamp.getDate();\r",
                                                            "if (lv_month < 10){ lv_month = '0'+lv_month; }\r",
                                                            "if (lv_date < 10){ lv_date = '0'+lv_date; }\r",
                                                            "var lv_installation_date = \r",
                                                            "\r",
                                                            "     ( lv_timestamp.getFullYear() +'-'+ \r",
                                                            "\r",
                                                            "       lv_month +'-'+\r",
                                                            "\r",
                                                            "       lv_date );\r",
                                                            "\r",
                                                            "var lv_installation_date = \"2021-08-22\";\r",
                                                            "\r",
                                                            "pm.environment.set(\"lv_installation_date\", lv_installation_date);\r",
                                                            "//Add sleep here\r",
                                                            "/*setTimeout(function(){ \r",
                                                            "\r",
                                                            "            console.log('Delay for 10secs');\r",
                                                            "                }, 10000);\r",
                                                            "})*/"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "application/json"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "{\n    \"description\": \"Instanz Strom Bezug 2108\",\n    \"measurementModel_id\": \"ffffffff-2222-2222-2222-100000000001\",\n    \"leadingGrid_code\": \"SNE956610053427\",\n    \"division_code\": \"EL\",\n    \"orderer_code\": \"9903692562385\",\n    \"addresses\": [\n        {\n            \"country_code\": \"DE\",\n            \"cityID\": \"WALLDORF\",\n            \"cityName\": \"Walldorf\",\n            \"postalCode\": \"69190\",\n            \"streetID\": \"RINGSTRASSE\",\n            \"streetName\": \"Ringstrasse\",\n            \"houseNumber\": \"100\",\n            \"floorNumber\": \"5\",\n            \"supplement\": \"5.Stock App 67\"\n        }\n    ],\n    \"changeProcesses\": [\n        {\n            \"externalOrderId\": \"4711\",\n            \"processData\": {\n                \"customerRequestDate\": \"{{lv_installation_date}}\",\n                \"leadingConnectionOwner\": \"0815\",\n                \"leadingConnectionUser\": \"0815\",\n                \"note\": \"Place any note for the new instance here\"\n            },\n            \"instanceCharacteristics\": [\n                {\n                    \"entityType_code\": \"MCIMarketLocations\",\n                    \"characteristic_code\": \"selectMeteringProcedureType\",\n                    \"modelEntityId\": \"aaaaaaaa-2222-3333-1111-100000000001\",\n                    \"value\": \"SLP\"\n                },\n                {\n                    \"entityType_code\": \"MCICalculationRules\",\n                    \"characteristic_code\": \"selectMarketLocationUsageType\",\n                    \"modelEntityId\": \"ffff1111-2222-3333-1111-100000000001\",\n                    \"value\": \"GRIDUSE\"\n                },\n                {\n                    \"entityType_code\": \"MCICalculationRules\",\n                    \"characteristic_code\": \"selectMarketLocationUsageType\",\n                    \"modelEntityId\": \"ffff1111-2222-3333-1111-100000000001\",\n                    \"value\": \"OUBILL\"\n                },\n                {\n                    \"entityType_code\": \"MCICalculationRules\",\n                    \"characteristic_code\": \"selectMarketLocationUsageType\",\n                    \"modelEntityId\": \"ffff1111-2222-3333-1111-100000000001\",\n                    \"value\": \"SETTLE\"\n                },\n                {\n                    \"entityType_code\": \"MCIMeteringTask\",\n                    \"characteristic_code\": \"selectPlannedMeteringProcedure\",\n                    \"modelEntityId\": \"bbb50001-5555-5555-5555-501010000001\",\n                    \"value\": \"SLP\"\n                }\n            ]\n        }\n    ]\n}"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["MCMInstances"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Instance",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "    pm.test(\"Get Instance check\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities @ INITIAL - CREATE",
                                    "item": [
                                        {
                                            "name": "DSO - Batched Configuration Activities for Process Status INITIAL/CREATE",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "/*\r",
                                                            "1. DSO -Assign address to Instance / MeLo / Malo\r",
                                                            "2. DSO - Metering Location (grid level, lossFactor, disconnectable, transformerRequired)\r",
                                                            "3. DSO - Metering Location - Process data\r",
                                                            "4. DSO - Metering Tasks - Process data\r",
                                                            "5. DSO - Market Location - Process data\r",
                                                            "6. DSO - Actors (gridLevel)\r",
                                                            "\r",
                                                            "*/\r",
                                                            "pm.test(\"Check for Configurtion Activities\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"leadingAddress_id\":\"{{addressId-1}}\"}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"address_id\":\"{{addressId-1}}\"}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/marketLocations({{maloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"address_id\":\"{{addressId-1}}\"}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"gridLevel_code\": \"MV\",\n    \"disconnectable\": false,\n    \"transformerRequired\": false,\n    \"lossTransformer\": \"0\",\n    \"lossLine\": \"0\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"classification\": \"ANY\",\n    \"note\": \"Any note on this metering location\",\n    \"volumeCorrector\": false,\n    \"meterOperator\": \"9903692607804\",\n    \"nominalCapacity\": \"42\",\n    \"measuringType_code\": \"MMU\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/meteringTasksPD({{meloTaskPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"rate_code\": \"ET\",\n    \"periodConsumption\": \"789\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"classification\": \"ANY\",\n    \"connectionUser\": \"0815\",\n    \"connectionOwner\": \"0815\",\n    \"forecastBasis_code\": \"CODE\",\n    \"consumptionDistribution\": \"some\",\n    \"flatrateType_code\": \"CODE\",\n    \"flatrate\": \"some\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/actors({{actorId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"gridLevel_code\":\"LV\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/actors({{actorId-2}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"gridLevel_code\":\"LV\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/marketLocations({{maloId-1}})/calculationRules({{maloCalcRuleId}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"registerCode\": \"1-1:1.9.0\"}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"forecastBasis_code\": \"H0\"}\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "DSO - oData action notifyInitialDataEntryReady()",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Notify Initial Data Entry Ready\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/MCMService.notifyInitialDataEntryReady HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Instance Status",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get Instance Status check\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "// pm.test(\"Check for No Error in Response\", function () {\r",
                                                            "//     // pm.expect(pm.response.text()).not.to.include(\"400 Bad Request\");\r",
                                                            "// });\r",
                                                            "// const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "// if (hasErrors) {\r",
                                                            "//     postman.setNextRequest(\"MCM JWT Token-DoubleRegister\");\r",
                                                            "// }\r",
                                                            "// var responseCode = pm.response.code;\r",
                                                            "// if ( responseCode ==  200 || 201 ) {\r",
                                                            "// var jsonResponse = JSON.parse(responseBody);\r",
                                                            "// var InstallationID = '';\r",
                                                            "// // console.log(\"Resp\",jsonResponse);\r",
                                                            "// // pm.globals.set(\"InstallationID\", instalId);\r",
                                                            "// pm.test(\" Response instanceStatus_code must be NEW\", function () {\r",
                                                            "// pm.expect( jsonResponse.status.instanceStatus_code).to.eql(\"NEW\");\r",
                                                            "// }\r",
                                                            "// );\r",
                                                            "// pm.test(\" Response processStatus_code must be START_NEW\", function () {\r",
                                                            "// pm.expect( jsonResponse.status.processStatus_code).to.eql(\"START_NEW\" );\r",
                                                            "// }\r",
                                                            "// );\r",
                                                            "// } else {\r",
                                                            "//     console.log(\"status after Configuration not as expected(New/Start_New)\");\r",
                                                            "// }\r",
                                                            "\r",
                                                            "\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "status"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities @ IN_CREATION - STARTED",
                                    "item": [
                                        {
                                            "name": "ISU - Set POD Id on MaLo",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set POD ID on MaLo Request\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                },
                                                {
                                                    "listen": "prerequest",
                                                    "script": {
                                                        "exec": [
                                                            " var lv_timestamp = new Date();\r",
                                                            "\r",
                                                            "var lv_timestamp_utc = \r",
                                                            "     ( lv_timestamp.getYear() +''+ \r",
                                                            "       (lv_timestamp.getMonth()+1)  +''+\r",
                                                            "       lv_timestamp.getDate() +''+\r",
                                                            "        lv_timestamp.getUTCHours()+''+\r",
                                                            "       lv_timestamp.getUTCMinutes()+''+\r",
                                                            "       lv_timestamp.getUTCSeconds() );\r",
                                                            "var generated_num = lv_timestamp_utc.substring(1);\r",
                                                            "var marketLocationId = generated_num;\r",
                                                            "var meteringLocationId = \"DE002179434010000000000\"+ marketLocationId;\r",
                                                            "// console.log(meteringLocationId);\r",
                                                            "pm.environment.set(\"meteringLocationId\", marketLocationId);\r",
                                                            "pm.environment.set(\"marketLocationId\", marketLocationId);\r",
                                                            "pm.environment.set(\"InstallationID\", marketLocationId);"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/marketLocations({{maloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"marketLocationId\": \"{{marketLocationId}}\"\n}\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "ISU - oData action notifyMarketLocationIdentifierReady()",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Notify Market Location Identifier Ready\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}})/MCMService.notifyMarketLocationIdentifierReady HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "ISU - Set POD Id on MeLo",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set POD ID on MeLo Request\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                },
                                                {
                                                    "listen": "prerequest",
                                                    "script": {
                                                        "exec": [""],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"meteringLocationId\": \"{{meteringLocationId}}\"\n}\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "ISU - oData action notifyMeteringLocationIdentifierReady()",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set Metering Location Identifier Ready\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/MCMService.notifyMeteringLocationIdentifierReady HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "ISU - oData action notifyLocationIdentifiersReady()",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set Location Identifiers Ready\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/MCMService.notifyLocationIdentifiersReady HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Instance Status",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get Instance Status\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "status"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities @ IN_CREATION - IDENTIFIERS_OK",
                                    "item": [
                                        {
                                            "name": "DSO - oData action notifyFinalDataEntryReady()",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set Final Data Entry Ready\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/MCMService.notifyFinalDataEntryReady HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Instance Status",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get Instance Status\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "status"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities @ IN_CREATION - EXTLOC_OK",
                                    "item": [
                                        {
                                            "name": "ISU - Set Installation Date and Serial ID",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set Serial ID\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                },
                                                {
                                                    "listen": "prerequest",
                                                    "script": {
                                                        "exec": [""],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"installationDate\": \"{{lv_installation_date}}\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"deviceSerialId\": \"{{InstallationID}}\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}})/meteringTasks({{meloTaskId}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"registerCode\": \"1-1:1.8.0\"}\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "ISU - oData action notifyMasterDataReadyFor*Location()",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set Master Data Ready\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/MCMService.notifyMasterDataReadyForMeteringLocation HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}})/MCMService.notifyMasterDataReadyForMarketLocation HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Complete Instance",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get Complete Instance\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "var responseCode = pm.response.code;\r",
                                                            "if ( responseCode ==  200 || 201 ) {\r",
                                                            "var jsonResponse = JSON.parse(responseBody);\r",
                                                            "var InstallationID = '';\r",
                                                            "\r",
                                                            "pm.test(\" Response meteringLocationId is set to Installation ID\", function () {\r",
                                                            "    pm.environment.set(\"TMDActionIDSingleRegister\", jsonResponse?.id);\r",
                                                            "    pm.environment.set(\"InstallationID\", jsonResponse?.meteringLocations[0]?.meteringLocationId);\r",
                                                            "}\r",
                                                            ");\r",
                                                            "}\r",
                                                            "else{\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "TMD Action",
                                    "item": [
                                        {
                                            "name": "C4E JWT",
                                            "item": [
                                                {
                                                    "name": "C4E JWT",
                                                    "event": [
                                                        {
                                                            "listen": "test",
                                                            "script": {
                                                                "exec": [
                                                                    "var jsonData = JSON.parse(responseBody);",
                                                                    "if(jsonData && jsonData.access_token){",
                                                                    "    postman.setEnvironmentVariable(\"jwt_C4E\", jsonData.access_token);",
                                                                    "}",
                                                                    "",
                                                                    "pm.test(\"Get C4E JWT token\", function () {",
                                                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                                                    "});"
                                                                ],
                                                                "type": "text/javascript"
                                                            }
                                                        },
                                                        {
                                                            "listen": "prerequest",
                                                            "script": {
                                                                "exec": [""],
                                                                "type": "text/javascript"
                                                            }
                                                        }
                                                    ],
                                                    "request": {
                                                        "auth": {
                                                            "type": "noauth"
                                                        },
                                                        "method": "POST",
                                                        "header": [
                                                            {
                                                                "key": "Accept",
                                                                "value": "application/json"
                                                            },
                                                            {
                                                                "key": "X-CorrelationID",
                                                                "value": "",
                                                                "disabled": true
                                                            },
                                                            {
                                                                "key": "Content-Type",
                                                                "value": "application/json"
                                                            }
                                                        ],
                                                        "body": {
                                                            "mode": "urlencoded",
                                                            "urlencoded": [
                                                                {
                                                                    "key": "response_type",
                                                                    "value": "token",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "grant_type",
                                                                    "value": "client_credentials",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "client_id",
                                                                    "value": "{{clientid_C4E}}",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "client_secret",
                                                                    "value": "{{clientsecret_C4E}}",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "scope",
                                                                    "value": "",
                                                                    "type": "text"
                                                                }
                                                            ]
                                                        },
                                                        "url": {
                                                            "raw": "{{authurlC4E}}/oauth/token",
                                                            "host": [
                                                                "{{authurlC4E}}"
                                                            ],
                                                            "path": [
                                                                "oauth",
                                                                "token"
                                                            ]
                                                        }
                                                    },
                                                    "response": []
                                                }
                                            ]
                                        },
                                        {
                                            "name": "Retailer JWT",
                                            "item": [
                                                {
                                                    "name": "Retailer JWT Token",
                                                    "event": [
                                                        {
                                                            "listen": "test",
                                                            "script": {
                                                                "exec": [
                                                                    "var jsonData = JSON.parse(responseBody);",
                                                                    "",
                                                                    "if(jsonData && jsonData.access_token){",
                                                                    "    postman.setEnvironmentVariable(\"jwt\", jsonData.access_token);",
                                                                    "}",
                                                                    "",
                                                                    "pm.test(\"Get Retailer JWT\", function () {",
                                                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                                                    "});",
                                                                    "console.log('Delay for 50secs');",
                                                                    "//Add sleep here",
                                                                    "setTimeout(function(){ ",
                                                                    "    console.log('Delay over');",
                                                                    "}, 50000);"
                                                                ],
                                                                "type": "text/javascript"
                                                            }
                                                        },
                                                        {
                                                            "listen": "prerequest",
                                                            "script": {
                                                                "exec": [""],
                                                                "type": "text/javascript"
                                                            }
                                                        }
                                                    ],
                                                    "request": {
                                                        "auth": {
                                                            "type": "noauth"
                                                        },
                                                        "method": "POST",
                                                        "header": [
                                                            {
                                                                "key": "Accept",
                                                                "value": "application/json"
                                                            },
                                                            {
                                                                "key": "X-CorrelationID",
                                                                "value": "",
                                                                "disabled": true
                                                            },
                                                            {
                                                                "key": "Content-Type",
                                                                "value": "application/x-www-form-urlencoded"
                                                            }
                                                        ],
                                                        "body": {
                                                            "mode": "urlencoded",
                                                            "urlencoded": [
                                                                {
                                                                    "key": "response_type",
                                                                    "value": "token",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "grant_type",
                                                                    "value": "client_credentials",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "client_id",
                                                                    "value": "{{uaa_client_id}}",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "client_secret",
                                                                    "value": "{{uaa_client_secret}}",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "scope",
                                                                    "value": "",
                                                                    "type": "text"
                                                                }
                                                            ]
                                                        },
                                                        "url": {
                                                            "raw": "{{jwtProtocol}}://{{uaa-domain}}/oauth/token",
                                                            "protocol": "{{jwtProtocol}}",
                                                            "host": [
                                                                "{{uaa-domain}}"
                                                            ],
                                                            "path": [
                                                                "oauth",
                                                                "token"
                                                            ]
                                                        }
                                                    },
                                                    "response": []
                                                }
                                            ]
                                        },
                                        {
                                            "name": "Check Meter Lifecycle Data in C4E",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD');\r",
                                                            "\r",
                                                            "pm.test(\"C4E Meter Lifecycle Data. Successful POST request \" + jiraIssue, function () {\r",
                                                            "  pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                                            "})\r",
                                                            "  var jsonObject = xml2Json(responseBody);\r",
                                                            "  var SerialID = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:serialNumber\"];\r",
                                                            "  var mRId = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:mRID\"];\r",
                                                            "  var UsagePoint = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePoint\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                                            "  var UsagePointLocation = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePointLocation\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                                            " \r",
                                                            "  console.log(\"********************************\");\r",
                                                            "  console.log(\"SerialID:\", SerialID);\r",
                                                            "  console.log(\"MRID:\", mRId);\r",
                                                            "  console.log(\"UsagePoint:\", UsagePoint);\r",
                                                            "  console.log(\"UsagePointLocation:\", UsagePointLocation);\r",
                                                            "  console.log(\"MRID_Flag:\", pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\"));\r",
                                                            "\r",
                                                            "  if (SerialID && mRId) {\r",
                                                            "       pm.environment.set(\"InstallationID\",SerialID);\r",
                                                            "       pm.environment.set(\"mRId\",mRId);\r",
                                                            "    // if(pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\") === true){\r",
                                                            "    //     pm.environment.set(\"InstallationID\",mRId)\r",
                                                            "    // }else{\r",
                                                            "    //     pm.environment.set(\"InstallationID\",SerialID)\r",
                                                            "    // }\r",
                                                            "    console.log(\"Success: Technical Master Data is created successfully in C4E Via Event Mesh\");\r",
                                                            "    postman.setNextRequest(\"ISU - oData action notifyDeviceInstallationReady() on melo PD\");\r",
                                                            " } else {\r",
                                                            "    console.log(\"Error: Failed to create Technical Master Data in C4E Via Event Mesh\");\r",
                                                            "    postman.setNextRequest(\"ActionTMDCreateSingleRegister\");\r",
                                                            " }\r",
                                                            "   \r",
                                                            "  console.log(\"********************************\");"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "auth": {
                                                    "type": "bearer",
                                                    "bearer": [
                                                        {
                                                            "key": "token",
                                                            "value": "{{jwt_C4E}}",
                                                            "type": "string"
                                                        }
                                                    ]
                                                },
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "AuthorizationcoreOnly",
                                                        "type": "text",
                                                        "value": "Bearer",
                                                        "disabled": true
                                                    },
                                                    {
                                                        "key": "coreOnly",
                                                        "value": "false",
                                                        "type": "text",
                                                        "disabled": true
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<msg:RequestMessage xmlns:msg=\"http://iec.ch/TC57/2011/schema/message\" xmlns:m=\"http://iec.ch/TC57/CIM-c4e#\">\r\n    <msg:Header>\r\n        <msg:Verb>get</msg:Verb>\r\n        <msg:Noun>MeterLifecycleDataSet</msg:Noun>\r\n    </msg:Header>\r\n    <msg:Request>\r\n    <m:GetMeterLifecycleDataSet>\r\n        <m:UsagePoint>\r\n            <m:Names>\r\n                <m:name>{{InstallationID}}</m:name>\r\n                <m:NameType>\r\n                    <m:name>UtilitiesPointOfDeliveryPartyID</m:name>\r\n                    <m:NameTypeAuthority>\r\n                        <m:name>SAP</m:name>\r\n                    </m:NameTypeAuthority>\r\n                </m:NameType>\r\n            </m:Names>\r\n        </m:UsagePoint>\r\n    </m:GetMeterLifecycleDataSet>\r\n</msg:Request>\r\n</msg:RequestMessage>",
                                                    "options": {
                                                        "raw": {
                                                            "language": "xml"
                                                        }
                                                    }
                                                },
                                                "url": {
                                                    "raw": "{{c4eEDS}}/api/v1/core",
                                                    "host": ["{{c4eEDS}}"],
                                                    "path": [
                                                        "api",
                                                        "v1",
                                                        "core"
                                                    ]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "ActionTMDCreateSingleRegister",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD')\r",
                                                            "pm.test(\"TechnicalMasterData Create. Successful POST request \" + jiraIssue, function () {\r",
                                                            "  pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                                            "})"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "auth": {
                                                    "type": "bearer",
                                                    "bearer": [
                                                        {
                                                            "key": "token",
                                                            "value": "{{jwt}}",
                                                            "type": "string"
                                                        }
                                                    ]
                                                },
                                                "method": "POST",
                                                "header": [],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "{\r\n\"id\": \"{{TMDActionIDSingleRegister}}\"\r\n}",
                                                    "options": {
                                                        "raw": {
                                                            "language": "json"
                                                        }
                                                    }
                                                },
                                                "url": {
                                                    "raw": "{{url}}/api/internal/technicalmasterdata/generate",
                                                    "host": ["{{url}}"],
                                                    "path": [
                                                        "api",
                                                        "internal",
                                                        "technicalmasterdata",
                                                        "generate"
                                                    ]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "Check Meter Lifecycle Data in C4E After Action",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD');\r",
                                                            "\r",
                                                            "pm.test(\"C4E Meter Lifecycle Data. Successful POST request \" + jiraIssue, function () {\r",
                                                            "  pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                                            "})\r",
                                                            "  var jsonObject = xml2Json(responseBody);\r",
                                                            "  var SerialID = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:serialNumber\"];\r",
                                                            "  var mRId = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:mRID\"];\r",
                                                            "  var UsagePoint = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePoint\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                                            "  var UsagePointLocation = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePointLocation\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                                            " \r",
                                                            "  console.log(\"********************************\");\r",
                                                            "  console.log(\"SerialID:\", SerialID);\r",
                                                            "  console.log(\"MRID:\", mRId);\r",
                                                            "  console.log(\"UsagePoint:\", UsagePoint);\r",
                                                            "  console.log(\"UsagePointLocation:\", UsagePointLocation);\r",
                                                            "  console.log(\"MRID_Flag:\", pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\"));\r",
                                                            "\r",
                                                            "pm.test(\"C4E SerailID .Successful POST request ${jiraIssue}\", function () {\r",
                                                            "  pm.expect(jsonObject[\"msg:ResponseMessage\"][\"msg:Payload\"][\"m:MeterLifecycleDataSet\"][\"m:Container\"][\"m:Meter\"][\"m:serialNumber\"]);\r",
                                                            "});\r",
                                                            "  if (SerialID && mRId) {\r",
                                                            "      pm.environment.set(\"InstallationID\",SerialID);\r",
                                                            "      pm.environment.set(\"mRId\",mRId);\r",
                                                            "    // if(pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\") === true){\r",
                                                            "    //     pm.environment.set(\"InstallationID\",mRId)\r",
                                                            "    // }else{\r",
                                                            "    //     pm.environment.set(\"InstallationID\",SerialID)\r",
                                                            "    // }\r",
                                                            "    console.log(\"Success: Technical Master Data is created successfully in C4E Via TMD Action\");\r",
                                                            " } else {\r",
                                                            "    console.log(\"Error: Failed to create Technical Master Data in C4E Via TMD Action\");\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            " }\r",
                                                            "   \r",
                                                            "  console.log(\"********************************\");"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "auth": {
                                                    "type": "bearer",
                                                    "bearer": [
                                                        {
                                                            "key": "token",
                                                            "value": "{{jwt_C4E}}",
                                                            "type": "string"
                                                        }
                                                    ]
                                                },
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "AuthorizationcoreOnly",
                                                        "type": "text",
                                                        "value": "Bearer",
                                                        "disabled": true
                                                    },
                                                    {
                                                        "key": "coreOnly",
                                                        "value": "false",
                                                        "type": "text",
                                                        "disabled": true
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<msg:RequestMessage xmlns:msg=\"http://iec.ch/TC57/2011/schema/message\" xmlns:m=\"http://iec.ch/TC57/CIM-c4e#\">\r\n    <msg:Header>\r\n        <msg:Verb>get</msg:Verb>\r\n        <msg:Noun>MeterLifecycleDataSet</msg:Noun>\r\n    </msg:Header>\r\n    <msg:Request>\r\n    <m:GetMeterLifecycleDataSet>\r\n        <m:UsagePoint>\r\n            <m:Names>\r\n                <m:name>{{InstallationID}}</m:name>\r\n                <m:NameType>\r\n                    <m:name>UtilitiesPointOfDeliveryPartyID</m:name>\r\n                    <m:NameTypeAuthority>\r\n                        <m:name>SAP</m:name>\r\n                    </m:NameTypeAuthority>\r\n                </m:NameType>\r\n            </m:Names>\r\n        </m:UsagePoint>\r\n    </m:GetMeterLifecycleDataSet>\r\n</msg:Request>\r\n</msg:RequestMessage>",
                                                    "options": {
                                                        "raw": {
                                                            "language": "xml"
                                                        }
                                                    }
                                                },
                                                "url": {
                                                    "raw": "{{c4eEDS}}/api/v1/core",
                                                    "host": ["{{c4eEDS}}"],
                                                    "path": [
                                                        "api",
                                                        "v1",
                                                        "core"
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ],
                                    "auth": {
                                        "type": "bearer",
                                        "bearer": [
                                            {
                                                "key": "token",
                                                "value": "{{jwt_C4E}}",
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "event": [
                                        {
                                            "listen": "prerequest",
                                            "script": {
                                                "type": "text/javascript",
                                                "exec": [""]
                                            }
                                        },
                                        {
                                            "listen": "test",
                                            "script": {
                                                "type": "text/javascript",
                                                "exec": [""]
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities @ IN_CREATION - EXTMD_OK",
                                    "item": [
                                        {
                                            "name": "ISU - oData action notifyDeviceInstallationReady() on melo PD",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set Device Installation Ready\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/MCMService.notifyDeviceInstallationReady HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Instance Status",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get Instance Status\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "status"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities @ INSTALLED - DEVICES_CREATED",
                                    "item": [
                                        {
                                            "name": "ISU - Report Commercial setup date",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set Commercial Setup Date\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"commercialSetupDate\": \"{{lv_installation_date}}\"\n}\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "ISU - oData action notifyMarketLocationComplete()",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set Market Location Complete\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}})/MCMService.notifyMarketLocationComplete HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Instance Status",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get Instance Status\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "status"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "ISU - oData action notifyMarketLocationsComplete()",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set Market Locations Complete\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/MCMService.notifyMarketLocationsComplete HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Instance Status",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get Instance Status\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "status"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities @ INSTALLED - LOCATIONS_CREATED",
                                    "item": [
                                        {
                                            "name": "Check Process Status",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get Instance Status\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "// var jsonResponse = JSON.parse(responseBody);\r",
                                                            "// var instStatusCode = jsonResponse.status.instanceStatus_code;\r",
                                                            "// var processStatusCode = jsonResponse.status.processStatus_code;\r",
                                                            "// var instanceIdText = jsonResponse.idText;\r",
                                                            "// var instanceVersion = jsonResponse.version;\r",
                                                            "// tests[\"HTTP GET Instance Status for [\" + instanceIdText + \"(\" + instanceVersion + \")] (Expected: 200 OK): \" + responseCode.code] = responseCode.code === 200;\r",
                                                            "// tests[\"CHECK Instance Status (Expected = INSTALLED):  \"  + instStatusCode ] = instStatusCode === \"INSTALLED\";\r",
                                                            "// tests[\"CHECK PROCESS Status (Expected = LOCATIONS_CREATED): \"  + processStatusCode ] = processStatusCode === \"LOCATIONS_CREATED\";"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "status"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities @ ACTIVE - FINALIZED",
                                    "item": [
                                        {
                                            "name": "Check Instance Status",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get Instance Status\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "var jsonResponse = JSON.parse(responseBody);\r",
                                                            "var instStatusCode = jsonResponse.status.instanceStatus_code;\r",
                                                            "var processStatusCode = jsonResponse.status.processStatus_code;\r",
                                                            "var instanceIdText = jsonResponse.idText;\r",
                                                            "var instanceVersion = jsonResponse.version;\r",
                                                            "tests[\"HTTP GET Instance Status for [\" + instanceIdText + \"(\" + instanceVersion + \")] (Expected: 200 OK): \" + responseCode.code] = responseCode.code === 200;\r",
                                                            "tests[\"CHECK Instance Status (Expected = ACTIVE):  \"  + instStatusCode ] = instStatusCode === \"ACTIVE\";\r",
                                                            "tests[\"CHECK PROCESS Status (Expected = FINALIZED): \"  + processStatusCode ] = processStatusCode === \"FINALIZED\";\r",
                                                            "\r",
                                                            "postman.setNextRequest(\"SB JWT Token\");"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "status"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                }
                            ],
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "type": "text/javascript",
                                        "exec": [""]
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "type": "text/javascript",
                                        "exec": [""]
                                    }
                                }
                            ]
                        },
                        {
                            "name": "Old SingleRegister Batched - Create Instance and Configure",
                            "item": [
                                {
                                    "name": "Service Metadata",
                                    "item": [
                                        {
                                            "name": "GET Service Document - Old",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "pm.test(\"Get Service Document check\", function () {\r",
                                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Service Metadata - Old",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "    pm.test(\"Get Service Metadata check\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$metadata",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$metadata"]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Read MCM Classes & MCM Models",
                                    "item": [
                                        {
                                            "name": "GET All MCM Classes",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "    pm.test(\"Get MCM Classes check\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MeasurementConceptClasses?$orderby=idText&$select=idText,name,description",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MeasurementConceptClasses"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$orderby",
                                                            "value": "idText",
                                                            "description": "Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)"
                                                        },
                                                        {
                                                            "key": "$select",
                                                            "value": "idText,name,description",
                                                            "description": "Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Model \"B_S_M1 - Standard-Bezug Strom\" with maLos, MClass(Melos, MTasks, MeteringProcedures, Actors)",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "    pm.test(\"Get Model B_S_M1 check\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)?$expand=marketLocations,measurementClass($expand=meteringLocations($expand=meteringTasks($expand=meteringProcedures)),actors)",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$skip",
                                                            "value": "71282403",
                                                            "description": "Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$search",
                                                            "value": "aute sit velit ex",
                                                            "description": "Search items by search phrases, see [Searching](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionsearch)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$filter",
                                                            "value": "aute sit velit ex",
                                                            "description": "Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$count",
                                                            "value": "true",
                                                            "description": "Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$orderby",
                                                            "value": "description,conceptType_code",
                                                            "description": "Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$select",
                                                            "value": "name,status_code",
                                                            "description": "Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$expand",
                                                            "value": "marketLocations,measurementClass($expand=meteringLocations($expand=meteringTasks($expand=meteringProcedures)),actors)"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Model Formula \"B_S_M1\" /MaLos /Formula /Usages",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "    pm.test(\"Get Model Formula B_S_M1 check\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)?$expand=marketLocations($expand=calculationRules($expand=formula($expand=formulaSteps),usages)),modelOperands",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MeasurementConceptModels(ffffffff-2222-2222-2222-100000000001)"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$skip",
                                                            "value": "71282403",
                                                            "description": "Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$search",
                                                            "value": "aute sit velit ex",
                                                            "description": "Search items by search phrases, see [Searching](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionsearch)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$filter",
                                                            "value": "aute sit velit ex",
                                                            "description": "Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$count",
                                                            "value": "true",
                                                            "description": "Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$orderby",
                                                            "value": "description,conceptType_code",
                                                            "description": "Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$select",
                                                            "value": "name,status_code",
                                                            "description": "Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect)",
                                                            "disabled": true
                                                        },
                                                        {
                                                            "key": "$expand",
                                                            "value": "marketLocations($expand=calculationRules($expand=formula($expand=formulaSteps),usages)),modelOperands"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "New Instance from MCM Model \"B_S_M1 Standard Bezug Strom\"",
                                    "item": [
                                        {
                                            "name": "Create Instance with Reference to Model \"B_S_M1\"",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Creation of Instance Check\", function () {",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);",
                                                            "});",
                                                            "",
                                                            "var responseCode = pm.response.code;",
                                                            "console.log(responseCode);",
                                                            "if ( responseCode ===  200 || responseCode ===  201) {",
                                                            "",
                                                            "var jsonResponse = JSON.parse(responseBody);",
                                                            "var instanceUuid = jsonResponse?.id;",
                                                            "var addressId = jsonResponse?.addresses[0]?.id;",
                                                            "var meloId = jsonResponse?.meteringLocations[0]?.id;",
                                                            "var maloId = jsonResponse?.marketLocations[0]?.id;",
                                                            "var changeProcessId = jsonResponse?.changeProcesses[0]?.id;",
                                                            "var meloPDId = jsonResponse?.changeProcesses[0]?.processData?.meteringLocationsPD[0]?.id;",
                                                            "var meloTaskPDId = jsonResponse?.changeProcesses[0]?.processData?.meteringLocationsPD[0]?.meteringTasksPD[0]?.id;",
                                                            "var maloPDId = jsonResponse?.changeProcesses[0]?.processData?.marketLocationsPD[0]?.id;",
                                                            "var actorId1 = jsonResponse?.actors[0]?.id;",
                                                            "var actorId2 = jsonResponse?.actors[1]?.id;",
                                                            "var meloTaskId = jsonResponse?.meteringLocations[0]?.meteringTasks[0]?.id;",
                                                            "var maloCalcRuleId = jsonResponse?.marketLocations[0]?.calculationRules[0]?.id;",
                                                            "pm.environment.set(\"instanceId\", instanceUuid);",
                                                            "pm.environment.set(\"addressId-1\", addressId);",
                                                            "pm.environment.set(\"meloId-1\", meloId);",
                                                            "pm.environment.set(\"maloId-1\", maloId);",
                                                            "pm.environment.set(\"meloPDId-1\", meloPDId);",
                                                            "pm.environment.set(\"meloTaskPDId-1\", meloTaskPDId);",
                                                            "pm.environment.set(\"maloPDId-1\", maloPDId);",
                                                            "pm.environment.set(\"changeProcessId-1\", changeProcessId);",
                                                            "pm.environment.set(\"actorId-1\", actorId1);",
                                                            "pm.environment.set(\"actorId-2\", actorId2);",
                                                            "pm.environment.set(\"meloTaskId\", meloTaskId);",
                                                            "pm.environment.set(\"maloCalcRuleId\", maloCalcRuleId);",
                                                            "} else {",
                                                            "    console.log(\"MCM System is down\");",
                                                            "    postman.setNextRequest(0);",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                },
                                                {
                                                    "listen": "prerequest",
                                                    "script": {
                                                        "exec": [
                                                            "var lv_timestamp = new Date();\r",
                                                            "\r",
                                                            "var lv_month = lv_timestamp.getMonth()+1;\r",
                                                            "var lv_date =  lv_timestamp.getDate();\r",
                                                            "if (lv_month < 10){ lv_month = '0'+lv_month; }\r",
                                                            "if (lv_date < 10){ lv_date = '0'+lv_date; }\r",
                                                            "var lv_installation_date = \r",
                                                            "\r",
                                                            "     ( lv_timestamp.getFullYear() +'-'+ \r",
                                                            "\r",
                                                            "       lv_month +'-'+\r",
                                                            "\r",
                                                            "       lv_date );\r",
                                                            "\r",
                                                            "pm.environment.set(\"lv_installation_date\", lv_installation_date);\r",
                                                            "//Add sleep here\r",
                                                            "// setTimeout(function(){ \r",
                                                            "//     console.log('Delay for 10secs');\r",
                                                            "// }, 10000);"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "application/json"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "{\n    \"description\": \"Instanz Strom Bezug 2108\",\n    \"measurementModel_id\": \"ffffffff-2222-2222-2222-100000000001\",\n    \"leadingGrid_code\": \"SNE956610053427\",\n    \"division_code\": \"EL\",\n    \"orderer_code\": \"9903692562385\",\n    \"addresses\": [\n        {\n            \"country_code\": \"DE\",\n            \"cityID\": \"WALLDORF\",\n            \"cityName\": \"Walldorf\",\n            \"postalCode\": \"69190\",\n            \"streetID\": \"RINGSTRASSE\",\n            \"streetName\": \"Ringstrasse\",\n            \"houseNumber\": \"100\",\n            \"floorNumber\": \"5\",\n            \"supplement\": \"5.Stock App 67\"\n        }\n    ],\n    \"changeProcesses\": [\n        {\n            \"externalOrderId\": \"4711\",\n            \"processData\": {\n                \"customerRequestDate\": \"{{lv_installation_date}}\",\n                \"leadingConnectionOwner\": \"0815\",\n                \"leadingConnectionUser\": \"0815\",\n                \"note\": \"Place any note for the new instance here\"\n            },\n            \"instanceCharacteristics\": [\n                {\n                    \"entityType_code\": \"MCIMarketLocations\",\n                    \"characteristic_code\": \"selectMeteringProcedureType\",\n                    \"modelEntityId\": \"aaaaaaaa-2222-3333-1111-100000000001\",\n                    \"value\": \"SLP\"\n                },\n                {\n                    \"entityType_code\": \"MCICalculationRules\",\n                    \"characteristic_code\": \"selectMarketLocationUsageType\",\n                    \"modelEntityId\": \"ffff1111-2222-3333-1111-100000000001\",\n                    \"value\": \"GRIDUSE\"\n                },\n                {\n                    \"entityType_code\": \"MCICalculationRules\",\n                    \"characteristic_code\": \"selectMarketLocationUsageType\",\n                    \"modelEntityId\": \"ffff1111-2222-3333-1111-100000000001\",\n                    \"value\": \"OUBILL\"\n                },\n                {\n                    \"entityType_code\": \"MCICalculationRules\",\n                    \"characteristic_code\": \"selectMarketLocationUsageType\",\n                    \"modelEntityId\": \"ffff1111-2222-3333-1111-100000000001\",\n                    \"value\": \"SETTLE\"\n                },\n                {\n                    \"entityType_code\": \"MCIMeteringTask\",\n                    \"characteristic_code\": \"selectPlannedMeteringProcedure\",\n                    \"modelEntityId\": \"bbb50001-5555-5555-5555-501010000001\",\n                    \"value\": \"SLP\"\n                }\n            ]\n        }\n    ]\n}"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["MCMInstances"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Instance",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "    pm.test(\"Get MCM Instance check\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                            "});"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities@Process Status NEW",
                                    "item": [
                                        {
                                            "name": "DSO - Batched Configuration Activities for Process Status New/Start_New",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "/*\r",
                                                            "1. DSO -Assign address to Instance / MeLo / Malo\r",
                                                            "2. DSO - Metering Location (grid level, lossFactor, disconnectable, transformerRequired)\r",
                                                            "3. DSO - Metering Location - Process data\r",
                                                            "4. DSO - Metering Tasks - Process data\r",
                                                            "5. DSO - Market Location - Process data\r",
                                                            "6. DSO - Actors (gridLevel)\r",
                                                            "\r",
                                                            "*/\r",
                                                            "pm.test(\"Check for Configurtion Activities\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"leadingAddress_id\":\"{{addressId-1}}\"}\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"address_id\":\"{{addressId-1}}\"}\n\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/marketLocations({{maloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"address_id\":\"{{addressId-1}}\"}\n\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"gridLevel_code\": \"MV\",\n    \"disconnectable\": false,\n    \"transformerRequired\": false,\n    \"lossTransformer\": \"0\",\n    \"lossLine\": \"0\"\n}\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"classification\": \"ANY\",\n    \"note\": \"Any note on this metering location\",\n    \"volumeCorrector\": false,\n    \"meterOperator\": \"9903692607804\",\n    \"nominalCapacity\": \"42\",\n    \"measuringType_code\": \"MMU\"\n}\n\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/meteringTasksPD({{meloTaskPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"rate_code\": \"ET\",\n    \"periodConsumption\": \"789\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"classification\": \"ANY\",\n    \"connectionUser\": \"0815\",\n    \"connectionOwner\": \"0815\",\n    \"forecastBasis_code\": \"CODE\",\n    \"consumptionDistribution\": \"some\",\n    \"flatrateType_code\": \"CODE\",\n    \"flatrate\": \"some\"\n}\n\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/actors({{actorId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"gridLevel_code\":\"LV\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/actors({{actorId-2}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"gridLevel_code\":\"LV\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}})/meteringTasks({{meloTaskId}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"registerCode\": \"1-1:1.8.0\"}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/marketLocations({{maloId-1}})/calculationRules({{maloCalcRuleId}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"registerCode\": \"1-1:1.9.0\"}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\"forecastBasis_code\": \"H0\"}\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Instance Status",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get MCM Instance Status check\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "// pm.test(\"Check for No Error in Response\", function () {\r",
                                                            "//     // pm.expect(pm.response.text()).not.to.include(\"400 Bad Request\");\r",
                                                            "// });\r",
                                                            "// const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "// if (hasErrors) {\r",
                                                            "//     postman.setNextRequest(\"MCM JWT Token-DoubleRegister\");\r",
                                                            "// }\r",
                                                            "// var responseCode = pm.response.code;\r",
                                                            "// if ( responseCode ==  200 || 201 ) {\r",
                                                            "// var jsonResponse = JSON.parse(responseBody);\r",
                                                            "// var InstallationID = '';\r",
                                                            "// // console.log(\"Resp\",jsonResponse);\r",
                                                            "// // pm.globals.set(\"InstallationID\", instalId);\r",
                                                            "// pm.test(\" Response instanceStatus_code must be NEW\", function () {\r",
                                                            "// pm.expect( jsonResponse.status.instanceStatus_code).to.eql(\"NEW\");\r",
                                                            "// }\r",
                                                            "// );\r",
                                                            "// pm.test(\" Response processStatus_code must be START_NEW\", function () {\r",
                                                            "// pm.expect( jsonResponse.status.processStatus_code).to.eql(\"START_NEW\" );\r",
                                                            "// }\r",
                                                            "// );\r",
                                                            "// } else {\r",
                                                            "//     console.log(\"status after Configuration not as expected(New/Start_New)\");\r",
                                                            "// }\r",
                                                            "\r",
                                                            "\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "status"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities@Process Status START_NEW",
                                    "item": [
                                        {
                                            "name": "ISU - Set POD Ids",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set POD IDs Request\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                },
                                                {
                                                    "listen": "prerequest",
                                                    "script": {
                                                        "exec": [
                                                            " var lv_timestamp = new Date();\r",
                                                            "\r",
                                                            "var lv_timestamp_utc = \r",
                                                            "     ( lv_timestamp.getYear() +''+ \r",
                                                            "       (lv_timestamp.getMonth()+1)  +''+\r",
                                                            "       lv_timestamp.getDate() +''+\r",
                                                            "        lv_timestamp.getUTCHours()+''+\r",
                                                            "       lv_timestamp.getUTCMinutes()+''+\r",
                                                            "       lv_timestamp.getUTCSeconds() );\r",
                                                            "var generated_num = lv_timestamp_utc.substring(1);\r",
                                                            "var marketLocationId = generated_num;\r",
                                                            "var meteringLocationId = \"DE002179434010000000000\"+ marketLocationId;\r",
                                                            "// console.log(meteringLocationId);\r",
                                                            "pm.environment.set(\"meteringLocationId\", marketLocationId);\r",
                                                            "pm.environment.set(\"marketLocationId\", marketLocationId);\r",
                                                            "pm.environment.set(\"InstallationID\", marketLocationId);"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/marketLocations({{maloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"marketLocationId\": \"{{marketLocationId}}\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"meteringLocationId\": \"{{meteringLocationId}}\"\n}\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "DSO - oData action notifyInitialDataEntryDone()",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Notify Initial Data Entry Done\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/MCMService.notifyInitialDataEntryDone HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Instance Status",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get MCM Instance Status check\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "status"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities@Process Status EXTLOC_OK",
                                    "item": [
                                        {
                                            "name": "ISU - Set Installation Date and Serial ID",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Set Serial ID\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                },
                                                {
                                                    "listen": "prerequest",
                                                    "script": {
                                                        "exec": [""],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"installationDate\": \"{{lv_installation_date}}\"\n}\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPATCH MCMInstances({{instanceId}})/meteringLocations({{meloId-1}}) HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n{\n    \"deviceSerialId\": \"{{InstallationID}}\"\n}\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "ISU - oData action notifyMasterDataReadyFor*Location()",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Notify Master Data Ready\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/MCMService.notifyMasterDataReadyForMeteringLocation HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}})/MCMService.notifyMasterDataReadyForMarketLocation HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Complete Instance",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get Complete Instance\", function () {\r",
                                                            "    pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "var responseCode = pm.response.code;\r",
                                                            "if ( responseCode ==  200 || 201 ) {\r",
                                                            "var jsonResponse = JSON.parse(responseBody);\r",
                                                            "var InstallationID = '';\r",
                                                            "\r",
                                                            "pm.test(\" Response meteringLocationId is set to Installation ID\", function () {\r",
                                                            "    pm.environment.set(\"TMDActionIDSingleRegister\", jsonResponse?.id);\r",
                                                            "    pm.environment.set(\"InstallationID\", jsonResponse?.meteringLocations[0]?.meteringLocationId);\r",
                                                            "}\r",
                                                            ");\r",
                                                            "}\r",
                                                            "else{\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "TMD Action",
                                    "item": [
                                        {
                                            "name": "C4E JWT",
                                            "item": [
                                                {
                                                    "name": "C4E JWT",
                                                    "event": [
                                                        {
                                                            "listen": "test",
                                                            "script": {
                                                                "exec": [
                                                                    "",
                                                                    "var jsonData = JSON.parse(responseBody);",
                                                                    "if(jsonData && jsonData.access_token){",
                                                                    "    postman.setEnvironmentVariable(\"jwt_C4E\", jsonData.access_token);",
                                                                    "}",
                                                                    "",
                                                                    "pm.test(\"Get C4E JWT Token\", function () {",
                                                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                                                    "});",
                                                                    ""
                                                                ],
                                                                "type": "text/javascript"
                                                            }
                                                        },
                                                        {
                                                            "listen": "prerequest",
                                                            "script": {
                                                                "exec": [""],
                                                                "type": "text/javascript"
                                                            }
                                                        }
                                                    ],
                                                    "request": {
                                                        "auth": {
                                                            "type": "noauth"
                                                        },
                                                        "method": "POST",
                                                        "header": [
                                                            {
                                                                "key": "Accept",
                                                                "value": "application/json"
                                                            },
                                                            {
                                                                "key": "X-CorrelationID",
                                                                "value": "",
                                                                "disabled": true
                                                            },
                                                            {
                                                                "key": "Content-Type",
                                                                "value": "application/json"
                                                            }
                                                        ],
                                                        "body": {
                                                            "mode": "urlencoded",
                                                            "urlencoded": [
                                                                {
                                                                    "key": "response_type",
                                                                    "value": "token",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "grant_type",
                                                                    "value": "client_credentials",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "client_id",
                                                                    "value": "{{clientid_C4E}}",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "client_secret",
                                                                    "value": "{{clientsecret_C4E}}",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "scope",
                                                                    "value": "",
                                                                    "type": "text"
                                                                }
                                                            ]
                                                        },
                                                        "url": {
                                                            "raw": "{{authurlC4E}}/oauth/token",
                                                            "host": [
                                                                "{{authurlC4E}}"
                                                            ],
                                                            "path": [
                                                                "oauth",
                                                                "token"
                                                            ]
                                                        }
                                                    },
                                                    "response": []
                                                }
                                            ]
                                        },
                                        {
                                            "name": "Retailer JWT",
                                            "item": [
                                                {
                                                    "name": "Retailer JWT Token",
                                                    "event": [
                                                        {
                                                            "listen": "test",
                                                            "script": {
                                                                "exec": [
                                                                    "var jsonData = JSON.parse(responseBody);",
                                                                    "",
                                                                    "if(jsonData && jsonData.access_token){",
                                                                    "    postman.setEnvironmentVariable(\"jwt\", jsonData.access_token);",
                                                                    "}",
                                                                    "",
                                                                    "pm.test(\"Get JWT\", function () {",
                                                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                                                    "});",
                                                                    "",
                                                                    "//Add sleep here",
                                                                    "setTimeout(function(){ ",
                                                                    "    console.log('Delay for 50secs');",
                                                                    "}, 50000);"
                                                                ],
                                                                "type": "text/javascript"
                                                            }
                                                        },
                                                        {
                                                            "listen": "prerequest",
                                                            "script": {
                                                                "exec": [""],
                                                                "type": "text/javascript"
                                                            }
                                                        }
                                                    ],
                                                    "request": {
                                                        "auth": {
                                                            "type": "noauth"
                                                        },
                                                        "method": "POST",
                                                        "header": [
                                                            {
                                                                "key": "Accept",
                                                                "value": "application/json"
                                                            },
                                                            {
                                                                "key": "X-CorrelationID",
                                                                "value": "",
                                                                "disabled": true
                                                            },
                                                            {
                                                                "key": "Content-Type",
                                                                "value": "application/x-www-form-urlencoded"
                                                            }
                                                        ],
                                                        "body": {
                                                            "mode": "urlencoded",
                                                            "urlencoded": [
                                                                {
                                                                    "key": "response_type",
                                                                    "value": "token",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "grant_type",
                                                                    "value": "client_credentials",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "client_id",
                                                                    "value": "{{uaa_client_id}}",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "client_secret",
                                                                    "value": "{{uaa_client_secret}}",
                                                                    "type": "text"
                                                                },
                                                                {
                                                                    "key": "scope",
                                                                    "value": "",
                                                                    "type": "text"
                                                                }
                                                            ]
                                                        },
                                                        "url": {
                                                            "raw": "{{jwtProtocol}}://{{uaa-domain}}/oauth/token",
                                                            "protocol": "{{jwtProtocol}}",
                                                            "host": [
                                                                "{{uaa-domain}}"
                                                            ],
                                                            "path": [
                                                                "oauth",
                                                                "token"
                                                            ]
                                                        }
                                                    },
                                                    "response": []
                                                }
                                            ]
                                        },
                                        {
                                            "name": "Check Meter Lifecycle Data in C4E",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD')\r",
                                                            "\r",
                                                            "pm.test(\"C4E Meter Lifecycle Data. Successful POST request \" + jiraIssue, function () {\r",
                                                            "  pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                                            "})\r",
                                                            "  var jsonObject = xml2Json(responseBody);\r",
                                                            "  var SerialID = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:serialNumber\"];\r",
                                                            "  var mRId = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:mRID\"];\r",
                                                            "  var UsagePoint = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePoint\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                                            "  var UsagePointLocation = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePointLocation\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                                            " \r",
                                                            "  console.log(\"********************************\");\r",
                                                            "  console.log(\"SerialID:\", SerialID);\r",
                                                            "  console.log(\"MRID:\", mRId);\r",
                                                            "  console.log(\"UsagePoint:\", UsagePoint);\r",
                                                            "  console.log(\"UsagePointLocation:\", UsagePointLocation);\r",
                                                            "  console.log(\"MRID_Flag:\", pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\"));\r",
                                                            "\r",
                                                            "  if (SerialID && mRId) {\r",
                                                            "      pm.environment.set(\"InstallationID\",SerialID);\r",
                                                            "      pm.environment.set(\"mRId\",mRId);\r",
                                                            "    // if(pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\") === true){\r",
                                                            "    //     pm.environment.set(\"InstallationID\",mRId)\r",
                                                            "    // }else{\r",
                                                            "    //     pm.environment.set(\"InstallationID\",SerialID)\r",
                                                            "    // }\r",
                                                            "    console.log(\"Success: Technical Master Data is created successfully in C4E Via Event Mesh\");\r",
                                                            "    postman.setNextRequest(\"ISU - oData action notify*LocationInstalled()\");\r",
                                                            " } else {\r",
                                                            "    console.log(\"Error: Failed to create Technical Master Data in C4E Via Event Mesh\");\r",
                                                            "    postman.setNextRequest(\"ActionTMDCreateSingleRegister - Old\");\r",
                                                            " }\r",
                                                            "   \r",
                                                            "  console.log(\"********************************\");"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "auth": {
                                                    "type": "bearer",
                                                    "bearer": [
                                                        {
                                                            "key": "token",
                                                            "value": "{{jwt_C4E}}",
                                                            "type": "string"
                                                        }
                                                    ]
                                                },
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "AuthorizationcoreOnly",
                                                        "type": "text",
                                                        "value": "Bearer",
                                                        "disabled": true
                                                    },
                                                    {
                                                        "key": "coreOnly",
                                                        "value": "false",
                                                        "type": "text",
                                                        "disabled": true
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<msg:RequestMessage xmlns:msg=\"http://iec.ch/TC57/2011/schema/message\" xmlns:m=\"http://iec.ch/TC57/CIM-c4e#\">\r\n    <msg:Header>\r\n        <msg:Verb>get</msg:Verb>\r\n        <msg:Noun>MeterLifecycleDataSet</msg:Noun>\r\n    </msg:Header>\r\n    <msg:Request>\r\n    <m:GetMeterLifecycleDataSet>\r\n        <m:UsagePoint>\r\n            <m:Names>\r\n                <m:name>{{InstallationID}}</m:name>\r\n                <m:NameType>\r\n                    <m:name>UtilitiesPointOfDeliveryPartyID</m:name>\r\n                    <m:NameTypeAuthority>\r\n                        <m:name>SAP</m:name>\r\n                    </m:NameTypeAuthority>\r\n                </m:NameType>\r\n            </m:Names>\r\n        </m:UsagePoint>\r\n    </m:GetMeterLifecycleDataSet>\r\n</msg:Request>\r\n</msg:RequestMessage>",
                                                    "options": {
                                                        "raw": {
                                                            "language": "xml"
                                                        }
                                                    }
                                                },
                                                "url": {
                                                    "raw": "{{c4eEDS}}/api/v1/core",
                                                    "host": ["{{c4eEDS}}"],
                                                    "path": [
                                                        "api",
                                                        "v1",
                                                        "core"
                                                    ]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "ActionTMDCreateSingleRegister - Old",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "// Check for response for code 200 &201 \r",
                                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD')\r",
                                                            "pm.test(\"TechnicalMasterData Create .Successful POST request \" + jiraIssue, function () {\r",
                                                            "  pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                                            "})"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "auth": {
                                                    "type": "bearer",
                                                    "bearer": [
                                                        {
                                                            "key": "token",
                                                            "value": "{{jwt}}",
                                                            "type": "string"
                                                        }
                                                    ]
                                                },
                                                "method": "POST",
                                                "header": [],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "{\r\n\"id\": \"{{TMDActionIDSingleRegister}}\"\r\n}",
                                                    "options": {
                                                        "raw": {
                                                            "language": "json"
                                                        }
                                                    }
                                                },
                                                "url": {
                                                    "raw": "{{url}}/api/internal/technicalmasterdata/generate",
                                                    "host": ["{{url}}"],
                                                    "path": [
                                                        "api",
                                                        "internal",
                                                        "technicalmasterdata",
                                                        "generate"
                                                    ]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "Check Meter Lifecycle Data in C4E After Action",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD');\r",
                                                            "pm.test(\"C4E Meter Lifecycle Data. Successful POST request \" + jiraIssue, function () {\r",
                                                            "  pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                                            "})\r",
                                                            "\r",
                                                            "  var jsonObject = xml2Json(responseBody);\r",
                                                            "  var SerialID = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:serialNumber\"];\r",
                                                            "  var mRId = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:Container\"]?.[\"m:Meter\"]?.[\"m:mRID\"];\r",
                                                            "  var UsagePoint = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePoint\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                                            "  var UsagePointLocation = jsonObject[\"msg:ResponseMessage\"]?.[\"msg:Payload\"]?.[\"m:MeterLifecycleDataSet\"]?.[\"m:UsagePointLocation\"]?.[\"m:Names\"]?.[\"m:name\"];\r",
                                                            " \r",
                                                            "  console.log(\"********************************\");\r",
                                                            "  console.log(\"SerialID:\", SerialID);\r",
                                                            "  console.log(\"MRID:\", mRId);\r",
                                                            "  console.log(\"UsagePoint:\", UsagePoint);\r",
                                                            "  console.log(\"UsagePointLocation:\", UsagePointLocation);\r",
                                                            "  console.log(\"MRID_Flag:\", pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\"));\r",
                                                            "\r",
                                                            "pm.test(\"C4E SerailID. Successful POST request ${jiraIssue}\", function () {\r",
                                                            "  pm.expect(jsonObject[\"msg:ResponseMessage\"][\"msg:Payload\"][\"m:MeterLifecycleDataSet\"][\"m:Container\"][\"m:Meter\"][\"m:serialNumber\"]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "  if (SerialID && mRId) {\r",
                                                            "      pm.environment.set(\"InstallationID\",SerialID);\r",
                                                            "      pm.environment.set(\"mRId\",mRId);\r",
                                                            "    // if(pm.environment.get(\"MRID_Flag_TechnicalMasterData_Creation\") === true){\r",
                                                            "    //     pm.environment.set(\"InstallationID\",mRId)\r",
                                                            "    // }else{\r",
                                                            "    //     pm.environment.set(\"InstallationID\",SerialID)\r",
                                                            "    // }\r",
                                                            "    console.log(\"Success: Technical Master Data is created successfully in C4E Via TMD Action\");\r",
                                                            "    postman.setNextRequest(\"ISU - oData action notify*LocationInstalled()\");\r",
                                                            " } else {\r",
                                                            "    console.log(\"Error: Failed to create Technical Master Data in C4E Via TMD Action\");\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            " }\r",
                                                            "   \r",
                                                            "  console.log(\"********************************\");"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "auth": {
                                                    "type": "bearer",
                                                    "bearer": [
                                                        {
                                                            "key": "token",
                                                            "value": "{{jwt_C4E}}",
                                                            "type": "string"
                                                        }
                                                    ]
                                                },
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "AuthorizationcoreOnly",
                                                        "type": "text",
                                                        "value": "Bearer",
                                                        "disabled": true
                                                    },
                                                    {
                                                        "key": "coreOnly",
                                                        "value": "false",
                                                        "type": "text",
                                                        "disabled": true
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<msg:RequestMessage xmlns:msg=\"http://iec.ch/TC57/2011/schema/message\" xmlns:m=\"http://iec.ch/TC57/CIM-c4e#\">\r\n    <msg:Header>\r\n        <msg:Verb>get</msg:Verb>\r\n        <msg:Noun>MeterLifecycleDataSet</msg:Noun>\r\n    </msg:Header>\r\n    <msg:Request>\r\n    <m:GetMeterLifecycleDataSet>\r\n        <m:UsagePoint>\r\n            <m:Names>\r\n                <m:name>{{InstallationID}}</m:name>\r\n                <m:NameType>\r\n                    <m:name>UtilitiesPointOfDeliveryPartyID</m:name>\r\n                    <m:NameTypeAuthority>\r\n                        <m:name>SAP</m:name>\r\n                    </m:NameTypeAuthority>\r\n                </m:NameType>\r\n            </m:Names>\r\n        </m:UsagePoint>\r\n    </m:GetMeterLifecycleDataSet>\r\n</msg:Request>\r\n</msg:RequestMessage>",
                                                    "options": {
                                                        "raw": {
                                                            "language": "xml"
                                                        }
                                                    }
                                                },
                                                "url": {
                                                    "raw": "{{c4eEDS}}/api/v1/core",
                                                    "host": ["{{c4eEDS}}"],
                                                    "path": [
                                                        "api",
                                                        "v1",
                                                        "core"
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ],
                                    "auth": {
                                        "type": "bearer",
                                        "bearer": [
                                            {
                                                "key": "token",
                                                "value": "{{jwt_C4E}}",
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "event": [
                                        {
                                            "listen": "prerequest",
                                            "script": {
                                                "type": "text/javascript",
                                                "exec": [""]
                                            }
                                        },
                                        {
                                            "listen": "test",
                                            "script": {
                                                "type": "text/javascript",
                                                "exec": [""]
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities@Process Status EXTMD_OK",
                                    "item": [
                                        {
                                            "name": "ISU - oData action notify*LocationInstalled()",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Notify LocationInstallled\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/MCMService.notifyMeteringLocationInstalled HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}})/MCMService.notifyMarketLocationInstalled HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        },
                                        {
                                            "name": "GET Instance Status",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Get Instance Status NEW/DEV_INST\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            ""
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=status",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "status"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Activities@Process Status DEV_INST",
                                    "item": [
                                        {
                                            "name": "ISU - oData action notify*LocationCompleted()",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "pm.test(\"Notify Location Completed\", function () {\r",
                                                            "     pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "});\r",
                                                            "\r",
                                                            "const hasErrors = pm.response.text().includes(\"400 Bad Request\");\r",
                                                            "\r",
                                                            "if (hasErrors) {\r",
                                                            "    postman.setNextRequest(0);\r",
                                                            "}"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "POST",
                                                "header": [
                                                    {
                                                        "key": "Content-Type",
                                                        "value": "multipart/mixed; boundary=batch_id-1"
                                                    }
                                                ],
                                                "body": {
                                                    "mode": "raw",
                                                    "raw": "--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/meteringLocationsPD({{meloPDId-1}})/MCMService.notifyMeteringLocationComplete HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1\nContent-Type:application/http\nContent-Transfer-Encoding:binary\n\nPOST MCMInstances({{instanceId}})/changeProcesses({{changeProcessId-1}})/processData/marketLocationsPD({{maloPDId-1}})/MCMService.notifyMarketLocationComplete HTTP/1.1\nAccept:application/json;odata.metadata=minimal;IEEE754Compatible=true\nContent-Type:application/json;charset=UTF-8;IEEE754Compatible=true\n\n--batch_id-1--\n"
                                                },
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/$batch",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": ["$batch"]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                },
                                {
                                    "name": "Read Instance",
                                    "item": [
                                        {
                                            "name": "GET Complete Instance",
                                            "event": [
                                                {
                                                    "listen": "test",
                                                    "script": {
                                                        "exec": [
                                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-TMD')\r",
                                                            "pm.test(\"Get Complete Instance from MCM .Successful GET request \" + jiraIssue, function () {\r",
                                                            "  pm.expect(pm.response.code).to.be.oneOf([200,201,400,401,402,403,404,500,501,502,503]);\r",
                                                            "})\r",
                                                            "postman.setNextRequest(\"SB JWT Token\");\r",
                                                            "// var responseCode = pm.response.code;\r",
                                                            "// if ( responseCode ==  200 || 201 ) {\r",
                                                            "// var jsonResponse = JSON.parse(responseBody);\r",
                                                            "\r",
                                                            "// pm.test(\" Response instanceStatus_code must be ACTIVE\", function () {\r",
                                                            "// // pm.expect( jsonResponse.status.instanceStatus_code).to.eql(\"ACTIVE\");\r",
                                                            "// }\r",
                                                            "// );\r",
                                                            "// pm.test(\" Response processStatus_code must be PLANNED\", function () {\r",
                                                            "// // pm.expect( jsonResponse.status.processStatus_code).to.eql(\"PLANNED\" );\r",
                                                            "// }\r",
                                                            "// );\r",
                                                            "// }"
                                                        ],
                                                        "type": "text/javascript"
                                                    }
                                                }
                                            ],
                                            "request": {
                                                "method": "GET",
                                                "header": [],
                                                "url": {
                                                    "raw": "{{baseUrl}}{{serviceRoot}}/MCMInstances({{instanceId}})?$expand=changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings",
                                                    "host": [
                                                        "{{baseUrl}}{{serviceRoot}}"
                                                    ],
                                                    "path": [
                                                        "MCMInstances({{instanceId}})"
                                                    ],
                                                    "query": [
                                                        {
                                                            "key": "$expand",
                                                            "value": "changeProcesses($expand=processData($expand=meteringLocationsPD($expand=meteringTasksPD),marketLocationsPD,actorsPD)),status,meteringLocations($expand=meteringTasks),actors,marketLocations($expand=calculationRules($expand=steps,usages)),operandMappings"
                                                        }
                                                    ]
                                                }
                                            },
                                            "response": []
                                        }
                                    ]
                                }
                            ],
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "type": "text/javascript",
                                        "exec": [""]
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "type": "text/javascript",
                                        "exec": [""]
                                    }
                                }
                            ]
                        }
                    ],
                    "auth": {
                        "type": "bearer",
                        "bearer": [
                            {
                                "key": "token",
                                "value": "{{jwt_MCM_Tech_Data}}",
                                "type": "string"
                            }
                        ]
                    },
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [""]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [""]
                            }
                        }
                    ]
                },
                {
                    "name": "CustomerOrder and Distribute Commodity",
                    "item": [
                        {
                            "name": "SB JWT",
                            "item": [
                                {
                                    "name": "SB JWT Token",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "",
                                                    "var jsonData = JSON.parse(responseBody);",
                                                    "if(jsonData && jsonData.access_token){",
                                                    "    postman.setEnvironmentVariable(\"sb_jwt\", jsonData.access_token);",
                                                    "}",
                                                    "",
                                                    "pm.test(\"Successful POST request\", function () {",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                                                    "});",
                                                    ""
                                                ],
                                                "type": "text/javascript"
                                            }
                                        },
                                        {
                                            "listen": "prerequest",
                                            "script": {
                                                "exec": [""],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "request": {
                                        "auth": {
                                            "type": "noauth"
                                        },
                                        "method": "POST",
                                        "header": [
                                            {
                                                "key": "Accept",
                                                "value": "application/json"
                                            },
                                            {
                                                "key": "X-CorrelationID",
                                                "value": "",
                                                "disabled": true
                                            },
                                            {
                                                "key": "Content-Type",
                                                "value": "application/json"
                                            }
                                        ],
                                        "body": {
                                            "mode": "urlencoded",
                                            "urlencoded": [
                                                {
                                                    "key": "response_type",
                                                    "value": "token",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "grant_type",
                                                    "value": "client_credentials",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_id",
                                                    "value": "{{uaa_sb_client_id}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "client_secret",
                                                    "value": "{{uaa_sb_client_secret}}",
                                                    "type": "text"
                                                },
                                                {
                                                    "key": "scope",
                                                    "value": "",
                                                    "type": "text"
                                                }
                                            ]
                                        },
                                        "url": {
                                            "raw": "{{jwtProtocol}}://{{uaa-domain}}/oauth/token",
                                            "protocol": "{{jwtProtocol}}",
                                            "host": ["{{uaa-domain}}"],
                                            "path": ["oauth", "token"]
                                        }
                                    },
                                    "response": []
                                },
                                {
                                    "name": "CheckSubscriptionConfigs",
                                    "event": [
                                        {
                                            "listen": "test",
                                            "script": {
                                                "exec": [
                                                    "pm.test(\"Successful Get request\", function () {\r",
                                                    "     pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                                                    "});\r",
                                                    "pm.test(\"Item1:Subsequent Document Not null\", function () {\r",
                                                    "var jsonData = pm.response.json();\r",
                                                    "// console.log(jsonData);\r",
                                                    "// console.log(\"jsondata\",jsonData.value.subscriptionProfiles[0].id);\r",
                                                    "var value = jsonData.value.subscriptionProfiles;\r",
                                                    "for (var i = 0;i<value.length;i++) {\r",
                                                    "if(value[i].id == \"commodity\") {\r",
                                                    "    if(value[i].requireContractAccount == true) {\r",
                                                    "        console.log(\"requireContractAccount :true\");\r",
                                                    "    } else {\r",
                                                    "        console.log(\"********************************************************************\");\r",
                                                    "        console.log(\"requireContractAccount :false Please set the Require Contract Account in Subscritpion System to True while creating the Comodity Order\");\r",
                                                    "        console.log(\"********************************************************************\");\r",
                                                    "        postman.setNextRequest(0);\r",
                                                    "    }\r",
                                                    "}\r",
                                                    "}\r",
                                                    "// if(jsonData.value.subscriptionProfiles.hasOwnProperty(\"commodity\")) {\r",
                                                    "//     console.log(\"found Commodity\");\r",
                                                    "//         // test if the ImageCenterX value in the object is equal to 0.5\r",
                                                    "//         // pm.test(\"Test diameter for RectilinearIR\", function () {\r",
                                                    "//         //     let intrinsicCalibrationParams = cam.RectilinearIR.IntrinsicCalibration;\r",
                                                    "//         //     pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5);\r",
                                                    "//         // });\r",
                                                    "//     } else {console.log(\"Not found\")}\r",
                                                    "//  var NCSubscriptionDocumentId = '';\r",
                                                    "// var NonCommsubscriptionId = jsonData1?.items[0]?.utilitiesAspect?.subsequentDocument?.displayId\r",
                                                    "// pm.environment.set(\"NonCommsubscriptionId\", NonCommsubscriptionId);\r",
                                                    "// console.log('Non Commodity Subscription ID',NonCommsubscriptionId);\r",
                                                    " \r",
                                                    "// if(jsonData1?.items[0]?.utilitiesAspect?.subsequentDocument?.id == null){\r",
                                                    "//     postman.setNextRequest(\"NonComDistributeOrder\")\r",
                                                    "\r",
                                                    "// } else{\r",
                                                    "   \r",
                                                    "//     pm.expect(jsonData1.items[0].utilitiesAspect.subsequentDocument.id);\r",
                                                    "//     pm.environment.set(\"NonCommsubscriptionId\", jsonData1.items[0].utilitiesAspect.subsequentDocument.displayId); \r",
                                                    "//    postman.setNextRequest(\"Non Commodity Subscription\");\r",
                                                    "// }\r",
                                                    "\r",
                                                    "});"
                                                ],
                                                "type": "text/javascript"
                                            }
                                        }
                                    ],
                                    "protocolProfileBehavior": {
                                        "disableBodyPruning": true
                                    },
                                    "request": {
                                        "auth": {
                                            "type": "bearer",
                                            "bearer": [
                                                {
                                                    "key": "token",
                                                    "value": "{{sb_jwt}}",
                                                    "type": "string"
                                                }
                                            ]
                                        },
                                        "method": "GET",
                                        "header": [
                                            {
                                                "key": "Authorization",
                                                "type": "text",
                                                "value": "Bearer {{sb_rev}}"
                                            },
                                            {
                                                "key": "Content-Type",
                                                "type": "text",
                                                "value": "application/json"
                                            }
                                        ],
                                        "body": {
                                            "mode": "raw",
                                            "raw": "{\r\n    \"validFrom\": \"2021-06-01\",\r\n    \"validUntil\": null,\r\n    \"billingCycle\": \"calendar-monthly\",\r\n    \"subscriptionProfile\": {\r\n        \"id\": \"commodity\"\r\n    },\r\n    \"customer\": {\r\n        \"id\": \"03793252\"\r\n    },\r\n    \"market\": {\r\n        \"id\": \"electricity\"\r\n    },\r\n    \"contractTerm\": {\r\n        \"startDate\": \"2021-06-01\",\r\n        \"period\": 12,\r\n        \"endDate\": null\r\n    },\r\n    \"externalObjectReferences\": [\r\n        {\r\n            \"externalIdTypeCode\": \"sap.edom.retailer-customer-order.displayId\",\r\n            \"externalId\": \"1000313747\",\r\n            \"externalSystemId\": \"anyCommerce\"\r\n        }\r\n    ],\r\n    \"snapshots\": [\r\n        {\r\n            \"effectiveDate\": \"2021-06-01\",\r\n            \"items\": [\r\n                {\r\n                    \"itemId\": \"000001\",\r\n                    \"subscriptionType\": null,\r\n                    \"lineNumber\": \"000001\",\r\n                    \"contractAccount\": \"010000013102\",\r\n                    \"externalObjectReferences\": [\r\n                        {\r\n                            \"externalIdTypeCode\": \"sap.edom.retailer-customer-order.itemId\",\r\n                            \"externalId\": \"000001\",\r\n                            \"externalSystemId\": \"anyCommerce\"\r\n                        }\r\n                    ],\r\n                    \"product\": {\r\n                        \"code\": \"C4U_2108_Electricity_Single_Rate_Product\"\r\n                    },\r\n                    \"technicalResources\": [\r\n                        {\r\n                            \"id\": \"b6a18fa9-782f-4065-8779-bd93c060bfce\",\r\n                            \"type\": \"ELECTRICITY_CONSUMPTION_2108\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
                                        },
                                        "url": {
                                            "raw": "{{sb_url}}/api/business-config/v1/config/Global/SubscriptionSettings/v1",
                                            "host": ["{{sb_url}}"],
                                            "path": [
                                                "api",
                                                "business-config",
                                                "v1",
                                                "config",
                                                "Global",
                                                "SubscriptionSettings",
                                                "v1"
                                            ]
                                        }
                                    },
                                    "response": []
                                }
                            ]
                        },
                        {
                            "name": "READ BP by UUID2GetAddressData",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const jiraIssue = pm.collectionVariables.get('jira-issue-bp-base')\r",
                                            "\r",
                                            "pm.test(`Read Business Partner with UUID. Successful GET request ${jiraIssue}`, function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
                                            "});\r",
                                            "\r",
                                            "var jsonData = pm.response.json();\r",
                                            "var addressData = jsonData.addressData[0].id;\r",
                                            "if( addressData ){\r",
                                            "         pm.environment.set(\"env_addressDataId\", jsonData?.addressData[0]?.id);\r",
                                            "    } else {\r",
                                            "        console.log(\"Address Data Not found. Aborting the process here\");\r",
                                            "        postman.setNextRequest(0);\r",
                                            "    }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [""],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/{{api-bp}}/BusinessPartner({{env_businessPartnerGUId}})?$expand=person($expand=nameDetails),organization($expand=nameDetails),bankAccounts,taxNumbers($expand=taxNumberType),addressData($expand=usages,personPostalAddress,organizationPostalAddress,emailAddresses,phoneNumbers),roles($expand=role),customerInformation($expand=salesArrangements($expand=functions),taxClassifications),serviceProviderInformation",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "{{api-bp}}",
                                        "BusinessPartner({{env_businessPartnerGUId}})"
                                    ],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "organization($expand=nameDetails)",
                                            "disabled": true
                                        },
                                        {
                                            "key": "$expand",
                                            "value": "person($expand=nameDetails),organization($expand=nameDetails),bankAccounts,taxNumbers($expand=taxNumberType),addressData($expand=usages,personPostalAddress,organizationPostalAddress,emailAddresses,phoneNumbers),roles($expand=role),customerInformation($expand=salesArrangements($expand=functions),taxClassifications),serviceProviderInformation"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE CustomerOrders (API) - SB Commodity",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "//if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-Distribution')    \r",
                                            "pm.test(`Customer Order. Successful POST request ${jiraIssue}`, function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "});\r",
                                            "\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            " var distributeOrderId = ' ';\r",
                                            "\r",
                                            "\r",
                                            "if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"distributeOrderId\", jsonData?.id);\r",
                                            "}\r",
                                            "//Add sleep here\r",
                                            "setTimeout(function(){ \r",
                                            "\r",
                                            "        console.log('Delay for 10secs');\r",
                                            "    }, 10000);\r",
                                            "\r",
                                            "//}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "//partner ID\r",
                                            "var partnerId = '';\r",
                                            "let partId = Math.floor(100000 + Math.random() * 1000000000);\r",
                                            "pm.globals.set(\"partnerId\", partId);\r",
                                            "// Display ID\r",
                                            " var dispID = '';\r",
                                            "let displID = Math.floor(1000000000 + Math.random() * 9000000)\r",
                                            "pm.globals.set(\"dispID\", displID);\r",
                                            "\r",
                                            "var moment = require('moment');\r",
                                            "var old_date = moment().subtract(1, 'month').format(\"YYYY-MM-DD\");\r",
                                            "var one_month_old_date =  old_date+\"Z\";\r",
                                            "pm.collectionVariables.set(\"one_month_old_date\", one_month_old_date);\r",
                                            "\r",
                                            "\r",
                                            "// Generate Unique Installation ID [PREFIX][Timestamp in ms]\r",
                                            "// const INSTALLATION_PREFIX = '1000'\r",
                                            "// let instalId = INSTALLATION_PREFIX + new Date().getTime();\r",
                                            "// pm.environment.set(\"InstallationID\", instalId);\r",
                                            "\r",
                                            "\r",
                                            "\r",
                                            "// console.log(\"partnerId\", partId);\r",
                                            "// console.log(\"Display ID\", dispID)\r",
                                            "\r",
                                            "// *************************************************************************\r",
                                            "\r",
                                            "// function uuid() {\r",
                                            "//   function s4() {\r",
                                            "//     return Math.floor((1 + Math.random()) * 0x10000)\r",
                                            "//       .toString(16)\r",
                                            "//       .substring(1);\r",
                                            "//   }\r",
                                            "//   return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r",
                                            "//     s4() + '-' + s4() + s4() + s4();\r",
                                            "// }\r",
                                            "\r",
                                            "// function lastName() {\r",
                                            "//    var result           = '';\r",
                                            "//    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                                            "//    var charactersLength = characters.length;\r",
                                            "//    for ( var i = 0; i < 10; i++ ) {\r",
                                            "//       result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
                                            "//    }\r",
                                            "//    return result;\r",
                                            "// }\r",
                                            "\r",
                                            "// Setup the Customer Order\r",
                                            "// let pLastName = lastName();\r",
                                            "// let pSapAddressUUID = uuid();\r",
                                            "// let custId = Math.floor(1000 + Math.random() * 9000);\r",
                                            "\r",
                                            "// set variables\r",
                                            "\r",
                                            "// pm.globals.set(\"bp_customerId\", custId);\r",
                                            "// pm.golabls.set(\"bp_uid\", pUuid);\r",
                                            "// pm.globals.set(\"bp_lastName\", pLastName);\r",
                                            "// pm.globals.set(\"bp_sapAddressUUID\", pSapAddressUUID);\r",
                                            "\r",
                                            "// **************************************************************************"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"items\": [\r\n        {\r\n            \"id\": \"000001\",\r\n            \"type\": {\r\n                \"code\": \"{{itemTypeCodeUSB2}}\"\r\n            },\r\n            \"utilitiesAspect\": {\r\n                \"distributionChannel\": {\r\n                    \"code\": \"{{customerOrderDistributionChannelCode10}}\"\r\n                },\r\n                \"division\": {\r\n                    \"code\": \"{{divisionCode01}}\"\r\n                },\r\n                \"salesOrganization\": {\r\n                    \"id\": \"{{salesOrg1010}}\"\r\n                },\r\n                \"referenceObject\": {\r\n                    \"meter\": \"test\",\r\n                    \"installation\": \"{{InstallationID}}\"\r\n                },\r\n                \"budgetBillingType\": {\r\n                    \"code\": \"{{BudgetBillingType_SU01}}\"\r\n                },\r\n                \"deviceTypePricing\": {\r\n                    \"code\": \"{{DeviceTypeCode_01}}\"\r\n                },\r\n                \"supplyAddress\": {\r\n                    \"up_\": {\r\n                        \"id\": \"{{env_businessPartnerGUId}}\"\r\n                    },\r\n                    \"id\": \"{{env_addressDataId}}\"\r\n                },\r\n                \"podId\": \"{{InstallationID}}\",\r\n                \"gridPricing\": \"5555\",\r\n                \"geographicalCode\": \"H3H2J1\"\r\n            },\r\n            \"subscriptionAspect\": {\r\n                \"contractTerm\": {\r\n                    \"period\": 12,\r\n                    \"periodicity\": \"calendar-monthly\"\r\n                },\r\n                \"validFrom\": \"2021-06-01\"\r\n            },\r\n            \"text\": \"Commodity Subscription\",\r\n            \"product\": {\r\n                \"id\": \"{{PCS_E_T_S_Y_01}}\"\r\n            }\r\n        }\r\n    ],\r\n    \"displayId\": \"{{dispID}}\",\r\n    \"orderDate\": \"2021-06-01\",\r\n    \"pricingDate\": \"2021-06-01T15:51:04Z\",\r\n    \"partners\": [\r\n        {\r\n            \"id\": \"{{bp}}\",\r\n            \"contractAccountId\": \"{{CommonBillingAccount}}\",\r\n            \"businessPartnerId\": \"{{bp}}\",\r\n            \"role\": {\r\n                \"code\": \"SH\"\r\n            }\r\n        }\r\n    ]\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrder",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "CustomerOrder"]
                                },
                                "description": "2 products with bundle items"
                            },
                            "response": []
                        },
                        {
                            "name": "ComREADCustomerOrderSubsequentDocSBCom",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "//if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-Distribution')    \r",
                                            "pm.test(`Subsequent Document check. Successful POST request ${jiraIssue}`, function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "});\r",
                                            "pm.test(\"Item1:Subsequent Document Not null\", function () {\r",
                                            "    var jsonData1 = pm.response.json();\r",
                                            "    var subscriptionId = jsonData1?.items[0]?.utilitiesAspect?.subsequentDocument?.displayId\r",
                                            "    pm.environment.set(\"subscriptionId\", subscriptionId);\r",
                                            "\r",
                                            "if(jsonData1?.items[0]?.utilitiesAspect?.subsequentDocument == null){\r",
                                            "    postman.setNextRequest(\"ComDistributeOrder\");\r",
                                            "}\r",
                                            "else{\r",
                                            "    pm.expect(jsonData1.items[0].utilitiesAspect.subsequentDocument.id);\r",
                                            "    pm.environment.set(\"CommoditysubscriptionId\", jsonData1.items[0].utilitiesAspect.subsequentDocument.displayId); \r",
                                            "    postman.setNextRequest(\"Read Subscription\");\r",
                                            "}\r",
                                            "});\r",
                                            "//}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "{{jwt}}",
                                        "type": "text"
                                    }
                                ],
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrder({{distributeOrderId}})?$expand=items($expand=utilitiesAspect($expand=subsequentDocument))",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrder({{distributeOrderId}})"
                                    ],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "items($expand=utilitiesAspect($expand=subsequentDocument))"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "ComDistributeOrder",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "//if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-Distribution')    \r",
                                            "pm.test(`Distribute Order. Successful POST request ${jiraIssue}`, function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "});\r",
                                            "//}\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "//Add sleep here\r",
                                            "setTimeout(function(){ \r",
                                            "\r",
                                            "        console.log('Delay for 10secs');\r",
                                            "    }, 10000);\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n\"id\": \"{{distributeOrderId}}\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/internal/distribution/distributeOrder",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "internal",
                                        "distribution",
                                        "distributeOrder"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "ComREADCustomerOrderSubsequentDocSBComAfterDistribute",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "//if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "\r",
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-Distribution')    \r",
                                            "pm.test(`Subsequent Document check. Successful GET request ${jiraIssue}`, function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "});\r",
                                            "    pm.test(\"Item1:Subsequent Document Not null\", function () {\r",
                                            "        var jsonData1 = pm.response.json();\r",
                                            "        var subscriptionId = jsonData1?.items[0]?.utilitiesAspect?.subsequentDocument?.displayId\r",
                                            "        pm.environment.set(\"subscriptionId\", subscriptionId);\r",
                                            "\r",
                                            "        if(jsonData1?.items[0]?.utilitiesAspect?.subsequentDocument == null){   \r",
                                            "// Retry Logic\r",
                                            "            let count = 0;\r",
                                            "            let countmin = pm.collectionVariables.get(\"min_count\");\r",
                                            "            let countmax = pm.collectionVariables.get(\"max_count\");\r",
                                            "  \r",
                                            "            if( Number(countmin) !== Number(countmax) ){\r",
                                            "                count = Number(countmin)+1 ;\r",
                                            "                pm.collectionVariables.set(\"min_count\",count);\r",
                                            "                postman.setNextRequest(\"ComDistributeOrder\")\r",
                                            "            } else{\r",
                                            "                pm.collectionVariables.set(\"min_count\",0);\r",
                                            "                pm.expect(jsonData1.items[0].utilitiesAspect.subsequentDocument.id);\r",
                                            "                pm.environment.set(\"CommoditysubscriptionId\", jsonData1.items[0].utilitiesAspect.subsequentDocument.displayId); \r",
                                            "             //   postman.setNextRequest(\"CREATE CustomerOrders (API) - SD-Sell from Stock (‏BD9‏)\");  \r",
                                            "            }\r",
                                            "        }\r",
                                            "        else{\r",
                                            "            pm.collectionVariables.set(\"min_count\",0);\r",
                                            "            pm.expect(jsonData1.items[0].utilitiesAspect.subsequentDocument.id);\r",
                                            "            pm.environment.set(\"CommoditysubscriptionId\", jsonData1.items[0].utilitiesAspect.subsequentDocument.displayId); \r",
                                            "        }\r",
                                            "    });\r",
                                            "//}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "{{jwt}}",
                                        "type": "text"
                                    }
                                ],
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrder({{distributeOrderId}})?$expand=items($expand=utilitiesAspect($expand=subsequentDocument))",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrder({{distributeOrderId}})"
                                    ],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "items($expand=utilitiesAspect($expand=subsequentDocument))"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Read Subscription",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "//if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-Distribution')    \r",
                                            "pm.test(`Read Subscription Check. Successful GET request ${jiraIssue}`, function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "});\r",
                                            "var jsonData1 = pm.response.json(); \r",
                                            "    var CommoditysubscriptionCustomerID = jsonData1[0]?.customer?.id;\r",
                                            "    pm.environment.set(\"CommoditysubscriptionCustomerID\", CommoditysubscriptionCustomerID);\r",
                                            "\r",
                                            "    pm.test(\"Technical Resource ID Not Null\", function () {\r",
                                            "        var jsonData1 = pm.response.json();\r",
                                            "        var tResources = jsonData1[0]?.snapshots[0]?.items[0]?.technicalResources;\r",
                                            "  \r",
                                            "        if(tResources){\r",
                                            "            pm.expect(tResources[0].id);\r",
                                            "            console.log(\"********************************\");\r",
                                            "            console.log(\"TechnicalResourceID from Subscription Billing:\", tResources[0].id);\r",
                                            "            console.log(\"********************************\");\r",
                                            "        }\r",
                                            "        else{\r",
                                            "            console.log(\"********************************\");\r",
                                            "            console.log(\"TechnicalResourceID from Subscription Billing: null\");\r",
                                            "            console.log(\"********************************\");\r",
                                            "        }\r",
                                            "    });\r",
                                            "//}"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{sb_jwt}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "",
                                        "type": "text",
                                        "disabled": true
                                    }
                                ],
                                "url": {
                                    "raw": "{{sb_url}}/api/subscription/v1/subscriptions/?subscriptionDocumentId={{subscriptionId}}",
                                    "host": ["{{sb_url}}"],
                                    "path": [
                                        "api",
                                        "subscription",
                                        "v1",
                                        "subscriptions",
                                        ""
                                    ],
                                    "query": [
                                        {
                                            "key": "subscriptionDocumentId",
                                            "value": "{{subscriptionId}}"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "TerminationofCommodityOrder",
                    "item": [
                        {
                            "name": "Compute Cancellation Date",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            " var CommodityTerminationDate = ' ';\r",
                                            "var jsonData = pm.response.json();\r",
                                            "if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"CommodityTerminationDate\", jsonData?.effectiveExpirationDate);\r",
                                            "}\r",
                                            "\r",
                                            "console.log(\"Commodity termination date \", pm.environment.get(\"CommodityTerminationDate\") );"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "var moment = require('moment');\r",
                                            "\r",
                                            "pm.environment.set('currentdate', moment().format((\"YYYY-MM-DD\")));"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "bearer",
                                    "bearer": [
                                        {
                                            "key": "token",
                                            "value": "{{sb_jwt}}",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "Bearer {{sb_rev}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{sb_url}}/api/subscription/v1/subscriptions/{{CommoditysubscriptionId}}/computedcancellationdate?requestedCancellationDate={{currentdate}}",
                                    "host": ["{{sb_url}}"],
                                    "path": [
                                        "api",
                                        "subscription",
                                        "v1",
                                        "subscriptions",
                                        "{{CommoditysubscriptionId}}",
                                        "computedcancellationdate"
                                    ],
                                    "query": [
                                        {
                                            "key": "requestedCancellationDate",
                                            "value": "{{currentdate}}"
                                        },
                                        {
                                            "key": "",
                                            "value": "",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CREATE CustomerOrders (API)Terminate Commodity",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-Distribution')    \r",
                                            "pm.test(`Create Customer Order. Successful POST request ${jiraIssue}`, function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "});\r",
                                            "var responseCode = pm.response.code;\r",
                                            "var jsonData = pm.response.json();\r",
                                            " var CommodityDistributeOrderIdAfterTermination = ' ';\r",
                                            "\r",
                                            "\r",
                                            "if ( responseCode == 200 || 201  ) {\r",
                                            "    // if succesfull read the response and assign the value of the same to global variable\r",
                                            "    pm.environment.set(\"CommodityDistributeOrderIdAfterTermination\", jsonData?.id);\r",
                                            "}\r",
                                            "//Add sleep here\r",
                                            "setTimeout(function(){ \r",
                                            "\r",
                                            "        console.log('Delay for 10secs');\r",
                                            "    }, 10000);\r",
                                            "\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "//partner ID\r",
                                            "var partnerId = '';\r",
                                            "let partId = Math.floor(100000 + Math.random() * 1000000000);\r",
                                            "pm.globals.set(\"partnerId\", partId);\r",
                                            "// Display ID\r",
                                            " var dispID = '';\r",
                                            "let displID = Math.floor(1000000000 + Math.random() * 9000000)\r",
                                            "pm.globals.set(\"dispID\", displID);\r",
                                            "\r",
                                            "\r",
                                            "// console.log(\"partnerId\", partId);\r",
                                            "// console.log(\"Display ID\", dispID)\r",
                                            "\r",
                                            "// *************************************************************************\r",
                                            "\r",
                                            "// function uuid() {\r",
                                            "//   function s4() {\r",
                                            "//     return Math.floor((1 + Math.random()) * 0x10000)\r",
                                            "//       .toString(16)\r",
                                            "//       .substring(1);\r",
                                            "//   }\r",
                                            "//   return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r",
                                            "//     s4() + '-' + s4() + s4() + s4();\r",
                                            "// }\r",
                                            "\r",
                                            "// function lastName() {\r",
                                            "//    var result           = '';\r",
                                            "//    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                                            "//    var charactersLength = characters.length;\r",
                                            "//    for ( var i = 0; i < 10; i++ ) {\r",
                                            "//       result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
                                            "//    }\r",
                                            "//    return result;\r",
                                            "// }\r",
                                            "\r",
                                            "// Setup the Customer Order\r",
                                            "// let pLastName = lastName();\r",
                                            "// let pSapAddressUUID = uuid();\r",
                                            "// let custId = Math.floor(1000 + Math.random() * 9000);\r",
                                            "\r",
                                            "// set variables\r",
                                            "\r",
                                            "// pm.globals.set(\"bp_customerId\", custId);\r",
                                            "// pm.golabls.set(\"bp_uid\", pUuid);\r",
                                            "// pm.globals.set(\"bp_lastName\", pLastName);\r",
                                            "// pm.globals.set(\"bp_sapAddressUUID\", pSapAddressUUID);\r",
                                            "\r",
                                            "// **************************************************************************"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "type": "text",
                                        "value": "{{jwt}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json;IEEE754Compatible=true"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"items\": [\r\n        {\r\n            \"id\": \"000002\",\r\n            \"partners\": [\r\n                {\r\n                    \"id\": \"{{CommonBillingAccount}}\"\r\n                }\r\n            ],\r\n            \"type\": {\r\n                \"code\": \"{{itemTypeCodeUSB3}}\"\r\n            },\r\n            \"cancellationReason\": {\r\n                \"code\": \"{{tooExpensiveSalesCancelReason}}\"\r\n            },\r\n            \"utilitiesAspect\": {\r\n                \"distributionChannel\": {\r\n                    \"code\": \"{{customerOrderDistributionChannelCode10}}\"\r\n                },\r\n                \"division\": {\r\n                    \"code\": \"{{divisionCode01}}\"\r\n                },\r\n                \"salesOrganization\": {\r\n                    \"id\": \"{{salesOrg1010}}\"\r\n                }\r\n            },\r\n            \"subscriptionAspect\": {\r\n                \"contractTerm\": {\r\n                    \"period\": 12,\r\n                    \"periodicity\": \"calendar-monthly\"\r\n                },\r\n                \"validFrom\": \"2021-07-01\",\r\n                \"validTo\": \"{{CommodityTerminationDate}}\",\r\n                \"subscriptionReference\": {\r\n                    \"itemId\": \"1\",\r\n                    \"objectId\": \"{{CommoditysubscriptionId}}\"\r\n                }\r\n            },\r\n            \"text\": \"Commodity Subscription\",\r\n            \"product\": {\r\n                \"id\": \"{{PCS_E_T_S_Y_01}}\"\r\n            }\r\n        }\r\n    ],\r\n    \"displayId\": \"{{dispID}}\",\r\n    \"orderDate\": \"2021-07-01\",\r\n    \"pricingDate\": \"2021-07-01T15:51:04Z\",\r\n    \"partners\": [\r\n        {\r\n            \"id\": \"{{bp}}\",\r\n            \"contractAccountId\": \"{{CommonBillingAccount}}\",\r\n            \"businessPartnerId\": \"{{bp}}\",\r\n            \"role\": {\r\n                \"code\": \"SH\"\r\n            }\r\n        }\r\n    ]\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrder",
                                    "host": ["{{url}}"],
                                    "path": ["api", "v1", "CustomerOrder"]
                                },
                                "description": "2 products with bundle items"
                            },
                            "response": []
                        },
                        {
                            "name": "CommoditySubSequentTerminate Check",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-Distribution')    \r",
                                            "pm.test(`Termination Customer Order check. Successful POST request ${jiraIssue}`, function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "});\r",
                                            "\r",
                                            "pm.test(\"Item1:Subsequent Document Not null\", function () {\r",
                                            "    var jsonData1 = pm.response.json();\r",
                                            "\r",
                                            "    \r",
                                            "    if(jsonData1?.items[0]?.utilitiesAspect?.subsequentDocument === null){\r",
                                            "        postman.setNextRequest(\"DistributeCommodityOrderTermination\");\r",
                                            "    }\r",
                                            "    else{\r",
                                            "        pm.expect(jsonData1.items[0].utilitiesAspect.subsequentDocument.id);\r",
                                            "        pm.environment.set(\"CommoditysubscriptionId\", jsonData1.items[0].utilitiesAspect.subsequentDocument.displayId); \r",
                                            "    }\r",
                                            "});\r",
                                            "\r",
                                            "pm.test(\"Item1:Processing status equals to 'In termination'\", function () {\r",
                                            "    var jsonData1 = pm.response.json();\r",
                                            "\r",
                                            "    if(jsonData1?.items[0]?.utilitiesAspect?.subsequentDocument === null || jsonData1?.processingStatus?.code !== pm.environment.get('inTerminationSalesStatusCode')){\r",
                                            "        postman.setNextRequest(\"DistributeCommodityOrderTermination\");\r",
                                            "    } else{\r",
                                            "        pm.expect(jsonData1?.items[0]?.processingStatus?.code).to.equal(pm.environment.get('inTerminationSalesStatusCode'));\r",
                                            "        postman.setNextRequest(0);\r",
                                            "    }\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "{{jwt}}",
                                        "type": "text"
                                    }
                                ],
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrder({{CommodityDistributeOrderIdAfterTermination}})?$expand=items($expand=utilitiesAspect($expand=subsequentDocument))",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrder({{CommodityDistributeOrderIdAfterTermination}})"
                                    ],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "items($expand=utilitiesAspect($expand=subsequentDocument))"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "DistributeCommodityOrderTermination",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "  \r",
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-Distribution')    \r",
                                            "pm.test(`Distribute Order. Successful POST request ${jiraIssue}`, function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "});\r",
                                            "// }"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "//Add sleep here\r",
                                            "setTimeout(function(){ \r",
                                            "    console.log('Delay for 3 secs');\r",
                                            "}, 3000);"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "POST",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n\"id\": \"{{CommodityDistributeOrderIdAfterTermination}}\"\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{url}}/api/internal/distribution/distributeOrder",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "internal",
                                        "distribution",
                                        "distributeOrder"
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "CommoditySubSequentTerminate check after Distribution",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "// Check for response for code 200 &201 \r",
                                            "// if (pm.environment.get(\"env_featureFlag\") === false ) {\r",
                                            "const jiraIssue = pm.collectionVariables.get('JIRA-Issue-Distribution')    \r",
                                            "pm.test(`Termination Customer Order check. Successful POST request ${jiraIssue}`, function () {\r",
                                            "    pm.expect(pm.response.code).to.be.oneOf([200, 201,204]);\r",
                                            "});\r",
                                            "\r",
                                            "pm.test(\"Item1:Subsequent Document Not null\", function () {\r",
                                            "    var jsonData1 = pm.response.json();\r",
                                            "\r",
                                            "    if(jsonData1?.items[0]?.utilitiesAspect?.subsequentDocument == null){\r",
                                            "        \r",
                                            "    } else{\r",
                                            "        pm.expect(jsonData1.items[0].utilitiesAspect.subsequentDocument.id);\r",
                                            "        pm.environment.set(\"CommoditysubscriptionId\", jsonData1.items[0].utilitiesAspect.subsequentDocument.displayId); \r",
                                            "    }\r",
                                            "});\r",
                                            "\r",
                                            "pm.test(\"Item1:Processing status equals to 'In termination'\", function () {\r",
                                            "    var jsonData1 = pm.response.json();\r",
                                            "    \r",
                                            "    if(jsonData1?.items[0]?.processingStatus?.code == null) {\r",
                                            "        \r",
                                            "    } else{\r",
                                            "        pm.expect(jsonData1?.items[0]?.processingStatus?.code).to.equal(pm.environment.get('inTerminationSalesStatusCode'));\r",
                                            "    }\r",
                                            "});\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "//Add sleep here\r",
                                            "setTimeout(function(){ \r",
                                            "\r",
                                            "        console.log('Delay for 10secs');\r",
                                            "    }, 10000);\r",
                                            ""
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "{{jwt}}",
                                        "type": "text"
                                    }
                                ],
                                "url": {
                                    "raw": "{{url}}/api/v1/CustomerOrder({{CommodityDistributeOrderIdAfterTermination}})?$expand=items($expand=utilitiesAspect($expand=subsequentDocument))",
                                    "host": ["{{url}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "CustomerOrder({{CommodityDistributeOrderIdAfterTermination}})"
                                    ],
                                    "query": [
                                        {
                                            "key": "$expand",
                                            "value": "items($expand=utilitiesAspect($expand=subsequentDocument))"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                }
            ]
        }
    ],
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{jwt}}",
                "type": "string"
            }
        ]
    },
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// let present_date = new Date().toJSON();",
                    "// pm.variables.set('present_date', present_date);",
                    "// console.log(present_date);"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": ["// console.log(present_date);"]
            }
        }
    ],
    "variable": [
        {
            "key": "min_count",
            "value": "0"
        },
        {
            "key": "max_count",
            "value": "3"
        },
        {
            "key": "api-bp",
            "value": "api/businessPartner/v1"
        },
        {
            "key": "JIRA-Issue-Distribution",
            "value": "UTILITIESCLOUDSOLUTION-2848"
        },
        {
            "key": "JIRA-Issue-TMD",
            "value": "UTILITIESCLOUDSOLUTION-2693"
        },
        {
            "key": "JIRA-Issue-BITS",
            "value": "UTILITIESCLOUDSOLUTION-2983"
        },
        {
            "key": "one_month_old_date",
            "value": ""
        },
        {
            "key": "present_date",
            "value": ""
        },
        {
            "key": "random_number1",
            "value": ""
        },
        {
            "key": "random_number2",
            "value": ""
        },
        {
            "value": "",
            "type": "string"
        }
    ]
}
